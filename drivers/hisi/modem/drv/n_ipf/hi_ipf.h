/******************************************************************************/
/*  Copyright (C), 2007-2016, Hisilicon Technologies Co., Ltd. */
/******************************************************************************/
/* File name     : HI_IPF.h */
/* Version       : 2.0 */
/* Author        : xxx*/
/* Created       : 2016-07-05*/
/* Last Modified : */
/* Description   :  The C union definition file for the module IPF*/
/* Function List : */
/* History       : */
/* 1 Date        : */
/* Author        : xxx*/
/* Modification  : Create file */
/******************************************************************************/

#ifndef __HI_IPF_H__
#define __HI_IPF_H__

/*
 * Project: HI
 * Module : IPF
 */

/********************************************************************************/
/*    IPF 寄存器偏移定义（项目名_模块名_寄存器名_OFFSET)        */
/********************************************************************************/
#define    HI_IPF_SRST_OFFSET                  (0x0) /* IPF复位控制寄存器 */
#define    HI_IPF_SRST_STATE_OFFSET            (0x4) /* IPF复位状态寄存器 */
#define    HI_IPF_CH_EN_OFFSET                 (0x8) /* IPF 通道使能配置寄存器 */
#define    HI_IPF_EN_STATE_OFFSET              (0xC) /* IPF 通道使能状态寄存器 */
#define    HI_IPF_GATE_OFFSET                  (0x10) /* IPF时钟门控配置寄存器 */
#define    HI_IPF_CTRL_OFFSET                  (0x14) /* IPF全局控制配置寄存器 */
#define    HI_IPF_DMA_CTRL0_OFFSET             (0x18) /* IPF DMA控制寄存器0 */
#define    HI_IPF_DMA_CTRL1_OFFSET             (0x1C) /* IPF DMA控制寄存器1 */
#define    HI_IPF_VERSION_OFFSET               (0x20) /* IPF版本寄存器 */
#define    HI_IPF_INT0_OFFSET                  (0x30) /* 中断上报寄存器0 */
#define    HI_IPF_INT1_OFFSET                  (0x34) /* 中断上报寄存器1 */
#define    HI_IPF_INT_MASK0_OFFSET             (0x38) /* 中断屏蔽寄存器0 */
#define    HI_IPF_INT_MASK1_OFFSET             (0x3C) /* 中断屏蔽寄存器1 */
#define    HI_IPF_INT_STATE_OFFSET             (0x40) /* 中断状态寄存器 */
#define    HI_IPF_TIME_OUT_OFFSET              (0x44) /* 超时配置寄存器 */
#define    HI_IPF_PKT_LEN_OFFSET               (0x48) /* 包长配置寄存器 */
#define    HI_IPF_FILTER_ZERO_INDEX_OFFSET     (0x70) /* 过滤器起始索引配置寄存器 */
#define    HI_IPF_EF_BADDR_L_OFFSET            (0x74) /* 扩展过滤器基地址配置寄存器低位 */
#define    HI_IPF_EF_BADDR_H_OFFSET            (0x78) /* 扩展过滤器基地址配置寄存器高位 */
#define    HI_IPF_FLT_CHAIN_LOOP_OFFSET            (0x7C) /* 过滤器链表环告警 */
#define    HI_IPF_TRANS_CNT_CTRL_OFFSET        (0x80) /* 流量统计控制寄存器 */
#define    HI_IPF_TIMER_LOAD_OFFSET            (0x84) /* TIMER计数器初始值 */
#define    HI_IPF_TIMER_COUNTER_OFFSET         (0x88) /* TIMER计数器计数值 */
#define    HI_IPF_CH0_PKT_CNT_OFFSET           (0x8C) /* 上行数据包计数器计数值。 */
#define    HI_IPF_CH1_PKT_CNT_OFFSET           (0x90) /* 下行数据包计数器计数值。 */
#define    HI_IPF64_CH0_CTRL_OFFSET              (0x100) /* 上行通道控制寄存器 */
#define    HI_IPF64_CH0_STATE_OFFSET             (0x104) /* 上行通道状态寄存器 */
#define    HI_IPF64_CH0_BDQ_BADDR_L_OFFSET       (0x110) /* 上行通道BDQ起始地址低位 */
#define    HI_IPF64_CH0_BDQ_BADDR_H_OFFSET       (0x114) /* 上行通道BDQ起始地址高位 */
#define    HI_IPF64_CH0_BDQ_SIZE_OFFSET          (0x118) /* 上行通道BDQ深度 */
#define    HI_IPF64_CH0_BDQ_WPTR_OFFSET          (0x11C) /* 上行通道BDQ写指针 */
#define    HI_IPF64_CH0_BDQ_RPTR_OFFSET          (0x120) /* 上行通道BDQ读指针 */
#define    HI_IPF64_CH0_BDQ_WADDR_L_OFFSET       (0x124) /* 上行通道BDQ写地址低位 */
#define    HI_IPF64_CH0_BDQ_WADDR_H_OFFSET       (0x128) /* 上行通道BDQ写地址高位 */
#define    HI_IPF64_CH0_BDQ_RADDR_L_OFFSET       (0x12C) /* 上行通道BDQ读地址低位 */
#define    HI_IPF64_CH0_BDQ_RADDR_H_OFFSET       (0x130) /* 上行通道BDQ读地址高位 */
#define    HI_IPF64_CH0_BDQ_DEPTH_OFFSET         (0x134) /* 上行通道BD队列深度指示寄存器 */
#define    HI_IPF64_CH1_CTRL_OFFSET              (0x200) /* 下行通道控制寄存器 */
#define    HI_IPF64_CH1_STATE_OFFSET             (0x204) /* 下行通道状态寄存器 */
#define    HI_IPF64_CH1_RDQ_BADDR_L_OFFSET       (0x290) /* 下行通道RDQ起始地址低位 */
#define    HI_IPF64_CH1_RDQ_BADDR_H_OFFSET       (0x294) /* 下行通道RDQ起始地址高位 */
#define    HI_IPF64_CH1_RDQ_SIZE_OFFSET          (0x298) /* 下行通道RDQ深度 */
#define    HI_IPF64_CH1_RDQ_WPTR_OFFSET          (0x29C) /* 下行通道RDQ写指针 */
#define    HI_IPF64_CH1_RDQ_RPTR_OFFSET          (0x2A0) /* 下行通道RDQ读指针 */
#define    HI_IPF64_CH1_RDQ_WADDR_L_OFFSET       (0x2A4) /* 下行通道RDQ写地址低位 */
#define    HI_IPF64_CH1_RDQ_WADDR_H_OFFSET       (0x2A8) /* 下行通道RDQ写地址高位 */
#define    HI_IPF64_CH1_RDQ_RADDR_L_OFFSET       (0x2AC) /* 下行通道RDQ读地址低位 */
#define    HI_IPF64_CH1_RDQ_RADDR_H_OFFSET       (0x2B0) /* 下行通道RDQ读地址高位 */
#define    HI_IPF64_CH1_RDQ_DEPTH_OFFSET         (0x2B4) /* 下行通道队列深度指示寄存器 */
#define    HI_IPF64_CH1_ADQ_CTRL_OFFSET          (0x400) /* 下行通道ADQ控制寄存器 */
#define    HI_IPF64_CH1_ADQ0_BASE_L_OFFSET       (0x404) /* 下行通道ADQ0基址寄存器低位 */
#define    HI_IPF64_CH1_ADQ0_BASE_H_OFFSET       (0x408) /* 下行通道ADQ0基址寄存器高位 */
#define    HI_IPF64_CH1_ADQ0_STAT_OFFSET         (0x40C) /* 下行通道ADQ0状态寄存器 */
#define    HI_IPF64_CH1_ADQ0_WPTR_OFFSET         (0x410) /* 下行通道ADQ0写指针寄存器 */
#define    HI_IPF64_CH1_ADQ0_RPTR_OFFSET         (0x414) /* 下行通道ADQ0读指针寄存器 */
#define    HI_IPF64_CH1_ADQ1_BASE_L_OFFSET       (0x418) /* 下行通道ADQ1基址寄存器低位 */
#define    HI_IPF64_CH1_ADQ1_BASE_H_OFFSET       (0x41C) /* 下行通道ADQ1基址寄存器高位 */
#define    HI_IPF64_CH1_ADQ1_STAT_OFFSET         (0x420) /* 下行通道ADQ1状态寄存器 */
#define    HI_IPF64_CH1_ADQ1_WPTR_OFFSET         (0x424) /* 下行通道ADQ1写指针寄存器 */
#define    HI_IPF64_CH1_ADQ1_RPTR_OFFSET         (0x428) /* 下行通道ADQ1读指针寄存器 */
#define    HI_IPF64_SEC_ATTR_OFFSET              (0x800) /* IPF AXI MST SEC属性寄存器 */
#define    HI_IPF64_BURST_CFG_OFFSET             (0x804) /* GM burst配置 */
#define    HI_IPF64_CH0_RDQ_BADDR_L_OFFSET       (0x990) /* 上行通道RDQ起始地址低位 */
#define    HI_IPF64_CH0_RDQ_BADDR_H_OFFSET       (0x994) /* 上行通道RDQ起始地址 */
#define    HI_IPF64_CH0_RDQ_SIZE_OFFSET          (0x998) /* 上行通道RDQ深度 */
#define    HI_IPF64_CH0_RDQ_WPTR_OFFSET          (0x99C) /* 上行通道RDQ写指针 */
#define    HI_IPF64_CH0_RDQ_RPTR_OFFSET          (0x9A0) /* 上行通道RDQ读指针 */
#define    HI_IPF64_CH0_RDQ_WADDR_L_OFFSET       (0x9A4) /* 上行通道RDQ写地址低位 */
#define    HI_IPF64_CH0_RDQ_WADDR_H_OFFSET       (0x9A8) /* 上行通道RDQ写地址高位 */
#define    HI_IPF64_CH0_RDQ_RADDR_L_OFFSET       (0x9AC) /* 上行通道RDQ读地址低位 */
#define    HI_IPF64_CH0_RDQ_RADDR_H_OFFSET       (0x9B0) /* 上行通道RDQ读地址高位 */
#define    HI_IPF64_CH0_RDQ_DEPTH_OFFSET         (0x9B4) /* 上行通道RD队列深度指示寄存器 */
#define    HI_IPF64_CH1_BDQ_BADDR_L_OFFSET       (0xA10) /* 下行通道BDQ起始地址低位 */
#define    HI_IPF64_CH1_BDQ_BADDR_H_OFFSET       (0xA14) /* 下行通道BDQ起始地址高位 */
#define    HI_IPF64_CH1_BDQ_SIZE_OFFSET          (0xA18) /* 下行通道BDQ深度 */
#define    HI_IPF64_CH1_BDQ_WPTR_OFFSET          (0xA1C) /* 下行通道BDQ写指针 */
#define    HI_IPF64_CH1_BDQ_RPTR_OFFSET          (0xA20) /* 下行通道BDQ读指针 */
#define    HI_IPF64_CH1_BDQ_WADDR_L_OFFSET       (0xA24) /* 下行通道BDQ写地址低位 */
#define    HI_IPF64_CH1_BDQ_WADDR_H_OFFSET       (0xA28) /* 下行通道BDQ写地址高位 */
#define    HI_IPF64_CH1_BDQ_RADDR_L_OFFSET       (0xA2C) /* 下行通道BDQ读地址低位 */
#define    HI_IPF64_CH1_BDQ_RADDR_H_OFFSET       (0xA30) /* 下行通道BDQ读地址高位 */
#define    HI_IPF64_CH1_BDQ_DEPTH_OFFSET         (0xA34) /* 下行通道BD队列深度指示寄存器 */
#define    HI_IPF64_CH0_ADQ_CTRL_OFFSET          (0xB00) /* 上行通道ADQ控制寄存器 */
#define    HI_IPF64_CH0_ADQ0_BASE_L_OFFSET       (0xB04) /* 上行通道ADQ0基址寄存器低位 */
#define    HI_IPF64_CH0_ADQ0_BASE_H_OFFSET       (0xB08) /* 上行通道ADQ0基址寄存器高位 */
#define    HI_IPF64_CH0_ADQ0_STAT_OFFSET         (0xB0C) /* 上行通道ADQ0状态寄存器 */
#define    HI_IPF64_CH0_ADQ0_WPTR_OFFSET         (0xB10) /* 上行通道ADQ0写指针寄存器 */
#define    HI_IPF64_CH0_ADQ0_RPTR_OFFSET         (0xB14) /* 上行通道ADQ0读指针寄存器 */
#define    HI_IPF64_CH0_ADQ1_BASE_L_OFFSET       (0xB18) /* 上行通道ADQ1基址寄存器低位 */
#define    HI_IPF64_CH0_ADQ1_BASE_H_OFFSET       (0xB1C) /* 上行通道ADQ1基址寄存器高位 */
#define    HI_IPF64_CH0_ADQ1_STAT_OFFSET         (0xB20) /* 上行通道ADQ1状态寄存器 */
#define    HI_IPF64_CH0_ADQ1_WPTR_OFFSET         (0xB24) /* 上行通道ADQ1写指针寄存器 */
#define    HI_IPF64_CH0_ADQ1_RPTR_OFFSET         (0xB28) /* 上行通道ADQ1读指针寄存器 */
/*****************************************************************************************************/
#define    HI_IPF32_MST_INSEC_SIGN_OFFSET        (0x50) /* AXI总线地址越界读写标志寄存器 */
#define    HI_IPF32_MST_INSEC_RD_ADDR_OFFSET     (0x54)
#define    HI_IPF32_MST_INSEC_WR_ADDR_OFFSET     (0x58)
#define    HI_IPF32_EF_BADDR_OFFSET              (0x74) /* 扩展过滤器基地址配置寄存器 */
#define    HI_IPF32_CH0_CTRL_OFFSET              (0x100) /* 上行通道控制寄存器 */
#define    HI_IPF32_CH0_STATE_OFFSET             (0x104) /* 上行通道状态寄存器 */
#define    HI_IPF32_CH0_BDQ_BADDR_OFFSET         (0x108) /* 上行通道BDQ起始地址 */
#define    HI_IPF32_CH0_BDQ_SIZE_OFFSET          (0x10C) /* 上行通道BDQ深度 */
#define    HI_IPF32_CH0_BDQ_WPTR_OFFSET          (0x110) /* 上行通道BDQ写指针 */
#define    HI_IPF32_CH0_BDQ_RPTR_OFFSET          (0x114) /* 上行通道BDQ读指针 */
#define    HI_IPF32_CH0_BDQ_WADDR_OFFSET         (0x118) /* 上行通道BDQ写地址 */
#define    HI_IPF32_CH0_BDQ_RADDR_OFFSET         (0x11C) /* 上行通道BDQ读地址 */
#define    HI_IPF32_CH0_RDQ_BADDR_OFFSET         (0x120) /* 上行通道RDQ起始地址 */
#define    HI_IPF32_CH0_RDQ_SIZE_OFFSET          (0x124) /* 上行通道RDQ深度 */
#define    HI_IPF32_CH0_RDQ_WPTR_OFFSET          (0x128) /* 上行通道RDQ写指针 */
#define    HI_IPF32_CH0_RDQ_RPTR_OFFSET          (0x12C) /* 上行通道RDQ读指针 */
#define    HI_IPF32_CH0_RDQ_WADDR_OFFSET         (0x130) /* 上行通道RDQ写地址 */
#define    HI_IPF32_CH0_RDQ_RADDR_OFFSET         (0x134) /* 上行通道RDQ读地址 */
#define    HI_IPF32_CH0_DQ_DEPTH_OFFSET          (0x138) /* 上行通道队列深度指示寄存器 */
#define    HI_IPF32_CH1_CTRL_OFFSET              (0x150) /* 下行通道控制寄存器 */
#define    HI_IPF32_CH1_STATE_OFFSET             (0x154) /* 下行通道状态寄存器 */
#define    HI_IPF32_CH1_BDQ_BADDR_OFFSET         (0x158) /* 下行通道BDQ起始地址 */
#define    HI_IPF32_CH1_BDQ_SIZE_OFFSET          (0x15C) /* 下行通道BDQ深度 */
#define    HI_IPF32_CH1_BDQ_WPTR_OFFSET          (0x160) /* 下行通道BDQ写指针 */
#define    HI_IPF32_CH1_BDQ_RPTR_OFFSET          (0x164) /* 下行通道BDQ读指针 */
#define    HI_IPF32_CH1_BDQ_WADDR_OFFSET         (0x168) /* 下行通道BDQ写地址 */
#define    HI_IPF32_CH1_BDQ_RADDR_OFFSET         (0x16C) /* 下行通道BDQ读地址 */
#define    HI_IPF32_CH1_RDQ_BADDR_OFFSET         (0x170) /* 下行通道RDQ起始地址 */
#define    HI_IPF32_CH1_RDQ_SIZE_OFFSET          (0x174) /* 下行通道RDQ深度 */
#define    HI_IPF32_CH1_RDQ_WPTR_OFFSET          (0x178) /* 下行通道RDQ写指针 */
#define    HI_IPF32_CH1_RDQ_RPTR_OFFSET          (0x17C) /* 下行通道RDQ读指针 */
#define    HI_IPF32_CH1_RDQ_WADDR_OFFSET         (0x180) /* 下行通道RDQ写地址 */
#define    HI_IPF32_CH1_RDQ_RADDR_OFFSET         (0x184) /* 下行通道RDQ读地址 */
#define    HI_IPF32_CH1_DQ_DEPTH_OFFSET          (0x188) /* 下行通道队列深度指示寄存器 */
#define    HI_IPF32_CH0_ADQ_CTRL_OFFSET          (0x204) /* 上行通道ADQ控制寄存器 */
#define    HI_IPF32_CH0_ADQ0_BASE_OFFSET         (0x210) /* 上行通道ADQ0基址寄存器 */
#define    HI_IPF32_CH0_ADQ0_STAT_OFFSET         (0x214) /* 上行通道ADQ0状态寄存器 */
#define    HI_IPF32_CH0_ADQ0_WPTR_OFFSET         (0x218) /* 上行通道ADQ0写指针寄存器 */
#define    HI_IPF32_CH0_ADQ0_RPTR_OFFSET         (0x21C) /* 上行通道ADQ0读指针寄存器 */
#define    HI_IPF32_CH0_ADQ1_BASE_OFFSET         (0x220) /* 上行通道ADQ1基址寄存器 */
#define    HI_IPF32_CH0_ADQ1_STAT_OFFSET         (0x224) /* 上行通道ADQ1状态寄存器 */
#define    HI_IPF32_CH0_ADQ1_WPTR_OFFSET         (0x228) /* 上行通道ADQ1写指针寄存器 */
#define    HI_IPF32_CH0_ADQ1_RPTR_OFFSET         (0x22C) /* 上行通道ADQ1读指针寄存器 */
#define    HI_IPF32_CH1_ADQ_CTRL_OFFSET          (0x284) /* 下行通道ADQ控制寄存器 */
#define    HI_IPF32_CH1_ADQ0_BASE_OFFSET         (0x290) /* 下行通道ADQ0基址寄存器 */
#define    HI_IPF32_CH1_ADQ0_STAT_OFFSET         (0x294) /* 下行通道ADQ0状态寄存器 */
#define    HI_IPF32_CH1_ADQ0_WPTR_OFFSET         (0x298) /* 下行通道ADQ0写指针寄存器 */
#define    HI_IPF32_CH1_ADQ0_RPTR_OFFSET         (0x29C) /* 下行通道ADQ0读指针寄存器 */
#define    HI_IPF32_CH1_ADQ1_BASE_OFFSET         (0x2A0) /* 下行通道ADQ1基址寄存器 */
#define    HI_IPF32_CH1_ADQ1_STAT_OFFSET         (0x2A4) /* 下行通道ADQ1状态寄存器 */
#define    HI_IPF32_CH1_ADQ1_WPTR_OFFSET         (0x2A8) /* 下行通道ADQ1写指针寄存器 */
#define    HI_IPF32_CH1_ADQ1_RPTR_OFFSET         (0x2AC) /* 下行通道ADQ1读指针寄存器 */
#define    HI_IPF32_CH0_WDATA_FAMA_ATTR_OFFSET   (0x2B0) /* 上行通道写数据FAMA属性寄存器 */
#define    HI_IPF32_CH0_RDATA_FAMA_ATTR_OFFSET   (0x2B4) /* 上行通道读数据FAMA属性寄存器 */
#define    HI_IPF32_CH0_RD_FAMA_ATTR_OFFSET      (0x2B8) /* 上行通道RD描述符FAMA属性寄存器 */
#define    HI_IPF32_CH0_BD_FAMA_ATTR_OFFSET      (0x2BC) /* 上行通道BD描述符FAMA属性寄存器 */
#define    HI_IPF32_CH0_AD_FAMA_ATTR_OFFSET      (0x2C0) /* 上行通道AD描述符FAMA属性寄存器 */
#define    HI_IPF32_CH0_CD_FAMA_ATTR_OFFSET      (0x2C4) /* 上行通道CD描述符FAMA属性寄存器 */
#define    HI_IPF32_CH1_WDATA_FAMA_ATTR_OFFSET   (0x2C8) /* 下行通道写数据FAMA属性寄存器 */
#define    HI_IPF32_CH1_RDATA_FAMA_ATTR_OFFSET   (0x2CC) /* 下行非直通通道读数据FAMA属性寄存器 */
#define    HI_IPF32_CH1_RD_FAMA_ATTR_OFFSET      (0x2D0) /* 下行通道RD描述符FAMA属性寄存器 */
#define    HI_IPF32_CH1_BD_FAMA_ATTR_OFFSET      (0x2D4) /* 下行通道BD描述符FAMA属性寄存器 */
#define    HI_IPF32_CH1_AD_FAMA_ATTR_OFFSET      (0x2D8) /* 下行通道AD描述符FAMA属性寄存器 */
#define    HI_IPF32_CH1_CD_FAMA_ATTR_OFFSET      (0x2DC) /* 下行通道CD描述符FAMA属性寄存器 */
#define    HI_IPF32_EF_FAMA_ATTR_OFFSET          (0x2E0) /* 外部过滤器FAMA属性寄存器 */
#define    HI_IPF32_CH1_DIRECT_RDATA_FAMA_ATTR_OFFSET  (0x2E4) /* 下行直通通道读数据FAMA属性寄存器 */
#define    HI_IPF32_MST_REGION0_START_OFFSET     (0x800) /* MST端口受限的起始地址寄存器0 */
#define    HI_IPF32_MST_REGION0_END_OFFSET       (0x804) /* MST端口受限的结束地址寄存器0 */
#define    HI_IPF32_MST_REGION1_START_OFFSET     (0x808) /* MST端口受限的起始地址寄存器1 */
#define    HI_IPF32_MST_REGION1_END_OFFSET       (0x80C) /* MST端口受限的结束地址寄存器1 */
#define    HI_IPF32_MST_REGION2_START_OFFSET     (0x810) /* MST端口受限的起始地址寄存器2 */
#define    HI_IPF32_MST_REGION2_END_OFFSET       (0x814) /* MST端口受限的结束地址寄存器2 */
#define    HI_IPF32_MST_REGION3_START_OFFSET     (0x818) /* MST端口受限的起始地址寄存器3 */
#define    HI_IPF32_MST_REGION3_END_OFFSET       (0x81C) /* MST端口受限的结束地址寄存器3 */
#define    HI_IPF32_MST_DEFAULT_ADDR_OFFSET      (0x820) /* MST端口地址受限后，发出的默认访问地址 */
#define    HI_IPF32_MST_SECCTRL_OFFSET           (0x824) /* MST端口地址限制功能控制寄存器 */
#define    HI_IPF32_MST_REGION0_SIDEBAND_OFFSET  (0x830) /* MST端口地址限制功能sideband寄存器 */
#define    HI_IPF32_MST_REGION1_SIDEBAND_OFFSET  (0x834) /* MST端口地址限制功能sideband寄存器 */
#define    HI_IPF32_MST_REGION2_SIDEBAND_OFFSET  (0x838) /* MST端口地址限制功能sideband寄存器 */
#define    HI_IPF32_MST_REGION3_SIDEBAND_OFFSET  (0x83C) /* MST端口地址限制功能sideband寄存器 */
#define    HI_IPF32_MST_SIDEBAND_BYPASS_OFFSET   (0x840) /* MST端口地址限制功能sideband bypass寄存器 */
#define    HI_IPF32_MST_DEFAULT_SIDEBAND_OFFSET  (0x844) /* MST端口default sideband寄存器 */
/************************************************************************************************/

#define    HI_IPF_FLTN_LOCAL_ADDR0_0_OFFSET        (0x1000) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_1_OFFSET        (0x1080) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_2_OFFSET        (0x1100) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_3_OFFSET        (0x1180) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_4_OFFSET        (0x1200) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_5_OFFSET        (0x1280) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_6_OFFSET        (0x1300) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_7_OFFSET        (0x1380) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_8_OFFSET        (0x1400) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_9_OFFSET        (0x1480) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_10_OFFSET       (0x1500) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_11_OFFSET       (0x1580) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_12_OFFSET       (0x1600) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_13_OFFSET       (0x1680) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_14_OFFSET       (0x1700) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_15_OFFSET       (0x1780) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_16_OFFSET       (0x1800) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_17_OFFSET       (0x1880) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_18_OFFSET       (0x1900) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_19_OFFSET       (0x1980) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_20_OFFSET       (0x1A00) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_21_OFFSET       (0x1A80) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_22_OFFSET       (0x1B00) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_23_OFFSET       (0x1B80) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_24_OFFSET       (0x1C00) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_25_OFFSET       (0x1C80) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_26_OFFSET       (0x1D00) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_27_OFFSET       (0x1D80) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_28_OFFSET       (0x1E00) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_29_OFFSET       (0x1E80) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_30_OFFSET       (0x1F00) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_31_OFFSET       (0x1F80) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_32_OFFSET       (0x2000) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_33_OFFSET       (0x2080) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_34_OFFSET       (0x2100) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_35_OFFSET       (0x2180) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_36_OFFSET       (0x2200) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_37_OFFSET       (0x2280) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_38_OFFSET       (0x2300) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_39_OFFSET       (0x2380) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_40_OFFSET       (0x2400) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_41_OFFSET       (0x2480) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_42_OFFSET       (0x2500) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_43_OFFSET       (0x2580) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_44_OFFSET       (0x2600) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_45_OFFSET       (0x2680) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_46_OFFSET       (0x2700) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_47_OFFSET       (0x2780) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_48_OFFSET       (0x2800) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_49_OFFSET       (0x2880) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_50_OFFSET       (0x2900) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_51_OFFSET       (0x2980) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_52_OFFSET       (0x2A00) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_53_OFFSET       (0x2A80) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_54_OFFSET       (0x2B00) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_55_OFFSET       (0x2B80) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_56_OFFSET       (0x2C00) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_57_OFFSET       (0x2C80) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_58_OFFSET       (0x2D00) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_59_OFFSET       (0x2D80) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_60_OFFSET       (0x2E00) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_61_OFFSET       (0x2E80) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_62_OFFSET       (0x2F00) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_63_OFFSET       (0x2F80) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_64_OFFSET       (0x3000) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_65_OFFSET       (0x3080) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_66_OFFSET       (0x3100) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_67_OFFSET       (0x3180) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_68_OFFSET       (0x3200) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_69_OFFSET       (0x3280) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_70_OFFSET       (0x3300) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_71_OFFSET       (0x3380) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_72_OFFSET       (0x3400) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_73_OFFSET       (0x3480) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_74_OFFSET       (0x3500) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_75_OFFSET       (0x3580) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_76_OFFSET       (0x3600) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_77_OFFSET       (0x3680) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_78_OFFSET       (0x3700) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_79_OFFSET       (0x3780) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_80_OFFSET       (0x3800) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_81_OFFSET       (0x3880) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_82_OFFSET       (0x3900) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_83_OFFSET       (0x3980) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_84_OFFSET       (0x3A00) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_85_OFFSET       (0x3A80) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_86_OFFSET       (0x3B00) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_87_OFFSET       (0x3B80) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_88_OFFSET       (0x3C00) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_89_OFFSET       (0x3C80) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_90_OFFSET       (0x3D00) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_91_OFFSET       (0x3D80) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_92_OFFSET       (0x3E00) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_93_OFFSET       (0x3E80) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_94_OFFSET       (0x3F00) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_95_OFFSET       (0x3F80) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_96_OFFSET       (0x4000) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_97_OFFSET       (0x4080) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_98_OFFSET       (0x4100) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_99_OFFSET       (0x4180) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_100_OFFSET      (0x4200) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_101_OFFSET      (0x4280) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_102_OFFSET      (0x4300) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_103_OFFSET      (0x4380) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_104_OFFSET      (0x4400) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_105_OFFSET      (0x4480) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_106_OFFSET      (0x4500) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_107_OFFSET      (0x4580) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_108_OFFSET      (0x4600) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_109_OFFSET      (0x4680) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_110_OFFSET      (0x4700) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_111_OFFSET      (0x4780) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_112_OFFSET      (0x4800) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_113_OFFSET      (0x4880) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_114_OFFSET      (0x4900) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_115_OFFSET      (0x4980) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_116_OFFSET      (0x4A00) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_117_OFFSET      (0x4A80) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_118_OFFSET      (0x4B00) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_119_OFFSET      (0x4B80) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_120_OFFSET      (0x4C00) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_121_OFFSET      (0x4C80) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_122_OFFSET      (0x4D00) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_123_OFFSET      (0x4D80) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_124_OFFSET      (0x4E00) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_125_OFFSET      (0x4E80) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_126_OFFSET      (0x4F00) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR0_127_OFFSET      (0x4F80) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_0_OFFSET        (0x1004) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_1_OFFSET        (0x1084) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_2_OFFSET        (0x1104) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_3_OFFSET        (0x1184) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_4_OFFSET        (0x1204) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_5_OFFSET        (0x1284) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_6_OFFSET        (0x1304) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_7_OFFSET        (0x1384) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_8_OFFSET        (0x1404) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_9_OFFSET        (0x1484) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_10_OFFSET       (0x1504) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_11_OFFSET       (0x1584) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_12_OFFSET       (0x1604) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_13_OFFSET       (0x1684) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_14_OFFSET       (0x1704) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_15_OFFSET       (0x1784) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_16_OFFSET       (0x1804) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_17_OFFSET       (0x1884) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_18_OFFSET       (0x1904) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_19_OFFSET       (0x1984) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_20_OFFSET       (0x1A04) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_21_OFFSET       (0x1A84) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_22_OFFSET       (0x1B04) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_23_OFFSET       (0x1B84) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_24_OFFSET       (0x1C04) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_25_OFFSET       (0x1C84) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_26_OFFSET       (0x1D04) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_27_OFFSET       (0x1D84) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_28_OFFSET       (0x1E04) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_29_OFFSET       (0x1E84) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_30_OFFSET       (0x1F04) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_31_OFFSET       (0x1F84) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_32_OFFSET       (0x2004) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_33_OFFSET       (0x2084) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_34_OFFSET       (0x2104) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_35_OFFSET       (0x2184) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_36_OFFSET       (0x2204) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_37_OFFSET       (0x2284) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_38_OFFSET       (0x2304) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_39_OFFSET       (0x2384) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_40_OFFSET       (0x2404) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_41_OFFSET       (0x2484) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_42_OFFSET       (0x2504) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_43_OFFSET       (0x2584) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_44_OFFSET       (0x2604) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_45_OFFSET       (0x2684) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_46_OFFSET       (0x2704) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_47_OFFSET       (0x2784) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_48_OFFSET       (0x2804) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_49_OFFSET       (0x2884) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_50_OFFSET       (0x2904) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_51_OFFSET       (0x2984) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_52_OFFSET       (0x2A04) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_53_OFFSET       (0x2A84) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_54_OFFSET       (0x2B04) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_55_OFFSET       (0x2B84) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_56_OFFSET       (0x2C04) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_57_OFFSET       (0x2C84) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_58_OFFSET       (0x2D04) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_59_OFFSET       (0x2D84) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_60_OFFSET       (0x2E04) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_61_OFFSET       (0x2E84) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_62_OFFSET       (0x2F04) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_63_OFFSET       (0x2F84) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_64_OFFSET       (0x3004) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_65_OFFSET       (0x3084) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_66_OFFSET       (0x3104) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_67_OFFSET       (0x3184) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_68_OFFSET       (0x3204) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_69_OFFSET       (0x3284) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_70_OFFSET       (0x3304) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_71_OFFSET       (0x3384) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_72_OFFSET       (0x3404) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_73_OFFSET       (0x3484) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_74_OFFSET       (0x3504) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_75_OFFSET       (0x3584) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_76_OFFSET       (0x3604) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_77_OFFSET       (0x3684) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_78_OFFSET       (0x3704) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_79_OFFSET       (0x3784) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_80_OFFSET       (0x3804) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_81_OFFSET       (0x3884) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_82_OFFSET       (0x3904) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_83_OFFSET       (0x3984) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_84_OFFSET       (0x3A04) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_85_OFFSET       (0x3A84) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_86_OFFSET       (0x3B04) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_87_OFFSET       (0x3B84) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_88_OFFSET       (0x3C04) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_89_OFFSET       (0x3C84) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_90_OFFSET       (0x3D04) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_91_OFFSET       (0x3D84) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_92_OFFSET       (0x3E04) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_93_OFFSET       (0x3E84) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_94_OFFSET       (0x3F04) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_95_OFFSET       (0x3F84) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_96_OFFSET       (0x4004) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_97_OFFSET       (0x4084) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_98_OFFSET       (0x4104) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_99_OFFSET       (0x4184) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_100_OFFSET      (0x4204) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_101_OFFSET      (0x4284) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_102_OFFSET      (0x4304) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_103_OFFSET      (0x4384) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_104_OFFSET      (0x4404) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_105_OFFSET      (0x4484) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_106_OFFSET      (0x4504) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_107_OFFSET      (0x4584) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_108_OFFSET      (0x4604) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_109_OFFSET      (0x4684) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_110_OFFSET      (0x4704) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_111_OFFSET      (0x4784) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_112_OFFSET      (0x4804) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_113_OFFSET      (0x4884) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_114_OFFSET      (0x4904) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_115_OFFSET      (0x4984) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_116_OFFSET      (0x4A04) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_117_OFFSET      (0x4A84) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_118_OFFSET      (0x4B04) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_119_OFFSET      (0x4B84) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_120_OFFSET      (0x4C04) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_121_OFFSET      (0x4C84) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_122_OFFSET      (0x4D04) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_123_OFFSET      (0x4D84) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_124_OFFSET      (0x4E04) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_125_OFFSET      (0x4E84) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_126_OFFSET      (0x4F04) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR1_127_OFFSET      (0x4F84) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_0_OFFSET        (0x1008) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_1_OFFSET        (0x1088) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_2_OFFSET        (0x1108) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_3_OFFSET        (0x1188) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_4_OFFSET        (0x1208) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_5_OFFSET        (0x1288) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_6_OFFSET        (0x1308) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_7_OFFSET        (0x1388) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_8_OFFSET        (0x1408) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_9_OFFSET        (0x1488) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_10_OFFSET       (0x1508) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_11_OFFSET       (0x1588) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_12_OFFSET       (0x1608) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_13_OFFSET       (0x1688) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_14_OFFSET       (0x1708) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_15_OFFSET       (0x1788) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_16_OFFSET       (0x1808) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_17_OFFSET       (0x1888) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_18_OFFSET       (0x1908) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_19_OFFSET       (0x1988) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_20_OFFSET       (0x1A08) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_21_OFFSET       (0x1A88) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_22_OFFSET       (0x1B08) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_23_OFFSET       (0x1B88) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_24_OFFSET       (0x1C08) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_25_OFFSET       (0x1C88) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_26_OFFSET       (0x1D08) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_27_OFFSET       (0x1D88) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_28_OFFSET       (0x1E08) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_29_OFFSET       (0x1E88) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_30_OFFSET       (0x1F08) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_31_OFFSET       (0x1F88) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_32_OFFSET       (0x2008) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_33_OFFSET       (0x2088) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_34_OFFSET       (0x2108) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_35_OFFSET       (0x2188) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_36_OFFSET       (0x2208) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_37_OFFSET       (0x2288) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_38_OFFSET       (0x2308) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_39_OFFSET       (0x2388) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_40_OFFSET       (0x2408) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_41_OFFSET       (0x2488) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_42_OFFSET       (0x2508) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_43_OFFSET       (0x2588) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_44_OFFSET       (0x2608) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_45_OFFSET       (0x2688) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_46_OFFSET       (0x2708) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_47_OFFSET       (0x2788) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_48_OFFSET       (0x2808) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_49_OFFSET       (0x2888) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_50_OFFSET       (0x2908) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_51_OFFSET       (0x2988) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_52_OFFSET       (0x2A08) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_53_OFFSET       (0x2A88) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_54_OFFSET       (0x2B08) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_55_OFFSET       (0x2B88) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_56_OFFSET       (0x2C08) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_57_OFFSET       (0x2C88) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_58_OFFSET       (0x2D08) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_59_OFFSET       (0x2D88) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_60_OFFSET       (0x2E08) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_61_OFFSET       (0x2E88) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_62_OFFSET       (0x2F08) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_63_OFFSET       (0x2F88) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_64_OFFSET       (0x3008) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_65_OFFSET       (0x3088) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_66_OFFSET       (0x3108) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_67_OFFSET       (0x3188) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_68_OFFSET       (0x3208) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_69_OFFSET       (0x3288) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_70_OFFSET       (0x3308) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_71_OFFSET       (0x3388) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_72_OFFSET       (0x3408) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_73_OFFSET       (0x3488) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_74_OFFSET       (0x3508) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_75_OFFSET       (0x3588) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_76_OFFSET       (0x3608) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_77_OFFSET       (0x3688) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_78_OFFSET       (0x3708) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_79_OFFSET       (0x3788) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_80_OFFSET       (0x3808) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_81_OFFSET       (0x3888) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_82_OFFSET       (0x3908) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_83_OFFSET       (0x3988) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_84_OFFSET       (0x3A08) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_85_OFFSET       (0x3A88) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_86_OFFSET       (0x3B08) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_87_OFFSET       (0x3B88) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_88_OFFSET       (0x3C08) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_89_OFFSET       (0x3C88) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_90_OFFSET       (0x3D08) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_91_OFFSET       (0x3D88) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_92_OFFSET       (0x3E08) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_93_OFFSET       (0x3E88) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_94_OFFSET       (0x3F08) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_95_OFFSET       (0x3F88) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_96_OFFSET       (0x4008) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_97_OFFSET       (0x4088) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_98_OFFSET       (0x4108) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_99_OFFSET       (0x4188) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_100_OFFSET      (0x4208) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_101_OFFSET      (0x4288) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_102_OFFSET      (0x4308) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_103_OFFSET      (0x4388) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_104_OFFSET      (0x4408) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_105_OFFSET      (0x4488) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_106_OFFSET      (0x4508) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_107_OFFSET      (0x4588) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_108_OFFSET      (0x4608) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_109_OFFSET      (0x4688) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_110_OFFSET      (0x4708) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_111_OFFSET      (0x4788) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_112_OFFSET      (0x4808) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_113_OFFSET      (0x4888) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_114_OFFSET      (0x4908) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_115_OFFSET      (0x4988) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_116_OFFSET      (0x4A08) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_117_OFFSET      (0x4A88) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_118_OFFSET      (0x4B08) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_119_OFFSET      (0x4B88) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_120_OFFSET      (0x4C08) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_121_OFFSET      (0x4C88) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_122_OFFSET      (0x4D08) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_123_OFFSET      (0x4D88) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_124_OFFSET      (0x4E08) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_125_OFFSET      (0x4E88) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_126_OFFSET      (0x4F08) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR2_127_OFFSET      (0x4F88) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_0_OFFSET        (0x100C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_1_OFFSET        (0x108C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_2_OFFSET        (0x110C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_3_OFFSET        (0x118C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_4_OFFSET        (0x120C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_5_OFFSET        (0x128C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_6_OFFSET        (0x130C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_7_OFFSET        (0x138C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_8_OFFSET        (0x140C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_9_OFFSET        (0x148C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_10_OFFSET       (0x150C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_11_OFFSET       (0x158C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_12_OFFSET       (0x160C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_13_OFFSET       (0x168C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_14_OFFSET       (0x170C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_15_OFFSET       (0x178C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_16_OFFSET       (0x180C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_17_OFFSET       (0x188C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_18_OFFSET       (0x190C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_19_OFFSET       (0x198C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_20_OFFSET       (0x1A0C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_21_OFFSET       (0x1A8C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_22_OFFSET       (0x1B0C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_23_OFFSET       (0x1B8C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_24_OFFSET       (0x1C0C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_25_OFFSET       (0x1C8C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_26_OFFSET       (0x1D0C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_27_OFFSET       (0x1D8C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_28_OFFSET       (0x1E0C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_29_OFFSET       (0x1E8C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_30_OFFSET       (0x1F0C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_31_OFFSET       (0x1F8C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_32_OFFSET       (0x200C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_33_OFFSET       (0x208C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_34_OFFSET       (0x210C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_35_OFFSET       (0x218C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_36_OFFSET       (0x220C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_37_OFFSET       (0x228C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_38_OFFSET       (0x230C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_39_OFFSET       (0x238C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_40_OFFSET       (0x240C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_41_OFFSET       (0x248C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_42_OFFSET       (0x250C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_43_OFFSET       (0x258C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_44_OFFSET       (0x260C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_45_OFFSET       (0x268C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_46_OFFSET       (0x270C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_47_OFFSET       (0x278C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_48_OFFSET       (0x280C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_49_OFFSET       (0x288C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_50_OFFSET       (0x290C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_51_OFFSET       (0x298C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_52_OFFSET       (0x2A0C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_53_OFFSET       (0x2A8C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_54_OFFSET       (0x2B0C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_55_OFFSET       (0x2B8C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_56_OFFSET       (0x2C0C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_57_OFFSET       (0x2C8C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_58_OFFSET       (0x2D0C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_59_OFFSET       (0x2D8C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_60_OFFSET       (0x2E0C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_61_OFFSET       (0x2E8C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_62_OFFSET       (0x2F0C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_63_OFFSET       (0x2F8C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_64_OFFSET       (0x300C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_65_OFFSET       (0x308C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_66_OFFSET       (0x310C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_67_OFFSET       (0x318C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_68_OFFSET       (0x320C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_69_OFFSET       (0x328C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_70_OFFSET       (0x330C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_71_OFFSET       (0x338C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_72_OFFSET       (0x340C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_73_OFFSET       (0x348C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_74_OFFSET       (0x350C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_75_OFFSET       (0x358C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_76_OFFSET       (0x360C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_77_OFFSET       (0x368C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_78_OFFSET       (0x370C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_79_OFFSET       (0x378C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_80_OFFSET       (0x380C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_81_OFFSET       (0x388C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_82_OFFSET       (0x390C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_83_OFFSET       (0x398C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_84_OFFSET       (0x3A0C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_85_OFFSET       (0x3A8C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_86_OFFSET       (0x3B0C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_87_OFFSET       (0x3B8C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_88_OFFSET       (0x3C0C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_89_OFFSET       (0x3C8C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_90_OFFSET       (0x3D0C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_91_OFFSET       (0x3D8C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_92_OFFSET       (0x3E0C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_93_OFFSET       (0x3E8C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_94_OFFSET       (0x3F0C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_95_OFFSET       (0x3F8C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_96_OFFSET       (0x400C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_97_OFFSET       (0x408C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_98_OFFSET       (0x410C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_99_OFFSET       (0x418C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_100_OFFSET      (0x420C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_101_OFFSET      (0x428C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_102_OFFSET      (0x430C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_103_OFFSET      (0x438C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_104_OFFSET      (0x440C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_105_OFFSET      (0x448C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_106_OFFSET      (0x450C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_107_OFFSET      (0x458C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_108_OFFSET      (0x460C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_109_OFFSET      (0x468C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_110_OFFSET      (0x470C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_111_OFFSET      (0x478C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_112_OFFSET      (0x480C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_113_OFFSET      (0x488C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_114_OFFSET      (0x490C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_115_OFFSET      (0x498C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_116_OFFSET      (0x4A0C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_117_OFFSET      (0x4A8C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_118_OFFSET      (0x4B0C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_119_OFFSET      (0x4B8C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_120_OFFSET      (0x4C0C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_121_OFFSET      (0x4C8C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_122_OFFSET      (0x4D0C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_123_OFFSET      (0x4D8C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_124_OFFSET      (0x4E0C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_125_OFFSET      (0x4E8C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_126_OFFSET      (0x4F0C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_ADDR3_127_OFFSET      (0x4F8C) /* 过滤器local address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_0_OFFSET       (0x1010) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_1_OFFSET       (0x1090) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_2_OFFSET       (0x1110) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_3_OFFSET       (0x1190) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_4_OFFSET       (0x1210) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_5_OFFSET       (0x1290) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_6_OFFSET       (0x1310) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_7_OFFSET       (0x1390) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_8_OFFSET       (0x1410) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_9_OFFSET       (0x1490) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_10_OFFSET      (0x1510) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_11_OFFSET      (0x1590) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_12_OFFSET      (0x1610) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_13_OFFSET      (0x1690) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_14_OFFSET      (0x1710) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_15_OFFSET      (0x1790) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_16_OFFSET      (0x1810) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_17_OFFSET      (0x1890) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_18_OFFSET      (0x1910) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_19_OFFSET      (0x1990) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_20_OFFSET      (0x1A10) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_21_OFFSET      (0x1A90) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_22_OFFSET      (0x1B10) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_23_OFFSET      (0x1B90) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_24_OFFSET      (0x1C10) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_25_OFFSET      (0x1C90) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_26_OFFSET      (0x1D10) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_27_OFFSET      (0x1D90) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_28_OFFSET      (0x1E10) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_29_OFFSET      (0x1E90) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_30_OFFSET      (0x1F10) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_31_OFFSET      (0x1F90) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_32_OFFSET      (0x2010) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_33_OFFSET      (0x2090) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_34_OFFSET      (0x2110) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_35_OFFSET      (0x2190) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_36_OFFSET      (0x2210) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_37_OFFSET      (0x2290) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_38_OFFSET      (0x2310) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_39_OFFSET      (0x2390) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_40_OFFSET      (0x2410) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_41_OFFSET      (0x2490) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_42_OFFSET      (0x2510) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_43_OFFSET      (0x2590) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_44_OFFSET      (0x2610) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_45_OFFSET      (0x2690) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_46_OFFSET      (0x2710) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_47_OFFSET      (0x2790) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_48_OFFSET      (0x2810) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_49_OFFSET      (0x2890) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_50_OFFSET      (0x2910) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_51_OFFSET      (0x2990) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_52_OFFSET      (0x2A10) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_53_OFFSET      (0x2A90) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_54_OFFSET      (0x2B10) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_55_OFFSET      (0x2B90) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_56_OFFSET      (0x2C10) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_57_OFFSET      (0x2C90) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_58_OFFSET      (0x2D10) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_59_OFFSET      (0x2D90) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_60_OFFSET      (0x2E10) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_61_OFFSET      (0x2E90) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_62_OFFSET      (0x2F10) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_63_OFFSET      (0x2F90) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_64_OFFSET      (0x3010) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_65_OFFSET      (0x3090) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_66_OFFSET      (0x3110) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_67_OFFSET      (0x3190) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_68_OFFSET      (0x3210) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_69_OFFSET      (0x3290) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_70_OFFSET      (0x3310) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_71_OFFSET      (0x3390) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_72_OFFSET      (0x3410) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_73_OFFSET      (0x3490) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_74_OFFSET      (0x3510) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_75_OFFSET      (0x3590) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_76_OFFSET      (0x3610) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_77_OFFSET      (0x3690) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_78_OFFSET      (0x3710) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_79_OFFSET      (0x3790) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_80_OFFSET      (0x3810) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_81_OFFSET      (0x3890) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_82_OFFSET      (0x3910) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_83_OFFSET      (0x3990) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_84_OFFSET      (0x3A10) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_85_OFFSET      (0x3A90) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_86_OFFSET      (0x3B10) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_87_OFFSET      (0x3B90) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_88_OFFSET      (0x3C10) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_89_OFFSET      (0x3C90) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_90_OFFSET      (0x3D10) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_91_OFFSET      (0x3D90) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_92_OFFSET      (0x3E10) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_93_OFFSET      (0x3E90) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_94_OFFSET      (0x3F10) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_95_OFFSET      (0x3F90) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_96_OFFSET      (0x4010) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_97_OFFSET      (0x4090) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_98_OFFSET      (0x4110) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_99_OFFSET      (0x4190) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_100_OFFSET     (0x4210) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_101_OFFSET     (0x4290) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_102_OFFSET     (0x4310) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_103_OFFSET     (0x4390) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_104_OFFSET     (0x4410) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_105_OFFSET     (0x4490) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_106_OFFSET     (0x4510) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_107_OFFSET     (0x4590) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_108_OFFSET     (0x4610) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_109_OFFSET     (0x4690) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_110_OFFSET     (0x4710) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_111_OFFSET     (0x4790) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_112_OFFSET     (0x4810) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_113_OFFSET     (0x4890) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_114_OFFSET     (0x4910) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_115_OFFSET     (0x4990) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_116_OFFSET     (0x4A10) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_117_OFFSET     (0x4A90) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_118_OFFSET     (0x4B10) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_119_OFFSET     (0x4B90) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_120_OFFSET     (0x4C10) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_121_OFFSET     (0x4C90) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_122_OFFSET     (0x4D10) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_123_OFFSET     (0x4D90) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_124_OFFSET     (0x4E10) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_125_OFFSET     (0x4E90) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_126_OFFSET     (0x4F10) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_127_OFFSET     (0x4F90) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_0_OFFSET       (0x1014) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_1_OFFSET       (0x1094) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_2_OFFSET       (0x1114) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_3_OFFSET       (0x1194) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_4_OFFSET       (0x1214) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_5_OFFSET       (0x1294) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_6_OFFSET       (0x1314) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_7_OFFSET       (0x1394) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_8_OFFSET       (0x1414) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_9_OFFSET       (0x1494) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_10_OFFSET      (0x1514) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_11_OFFSET      (0x1594) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_12_OFFSET      (0x1614) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_13_OFFSET      (0x1694) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_14_OFFSET      (0x1714) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_15_OFFSET      (0x1794) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_16_OFFSET      (0x1814) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_17_OFFSET      (0x1894) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_18_OFFSET      (0x1914) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_19_OFFSET      (0x1994) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_20_OFFSET      (0x1A14) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_21_OFFSET      (0x1A94) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_22_OFFSET      (0x1B14) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_23_OFFSET      (0x1B94) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_24_OFFSET      (0x1C14) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_25_OFFSET      (0x1C94) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_26_OFFSET      (0x1D14) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_27_OFFSET      (0x1D94) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_28_OFFSET      (0x1E14) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_29_OFFSET      (0x1E94) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_30_OFFSET      (0x1F14) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_31_OFFSET      (0x1F94) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_32_OFFSET      (0x2014) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_33_OFFSET      (0x2094) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_34_OFFSET      (0x2114) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_35_OFFSET      (0x2194) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_36_OFFSET      (0x2214) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_37_OFFSET      (0x2294) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_38_OFFSET      (0x2314) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_39_OFFSET      (0x2394) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_40_OFFSET      (0x2414) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_41_OFFSET      (0x2494) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_42_OFFSET      (0x2514) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_43_OFFSET      (0x2594) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_44_OFFSET      (0x2614) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_45_OFFSET      (0x2694) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_46_OFFSET      (0x2714) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_47_OFFSET      (0x2794) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_48_OFFSET      (0x2814) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_49_OFFSET      (0x2894) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_50_OFFSET      (0x2914) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_51_OFFSET      (0x2994) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_52_OFFSET      (0x2A14) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_53_OFFSET      (0x2A94) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_54_OFFSET      (0x2B14) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_55_OFFSET      (0x2B94) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_56_OFFSET      (0x2C14) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_57_OFFSET      (0x2C94) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_58_OFFSET      (0x2D14) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_59_OFFSET      (0x2D94) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_60_OFFSET      (0x2E14) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_61_OFFSET      (0x2E94) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_62_OFFSET      (0x2F14) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_63_OFFSET      (0x2F94) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_64_OFFSET      (0x3014) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_65_OFFSET      (0x3094) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_66_OFFSET      (0x3114) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_67_OFFSET      (0x3194) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_68_OFFSET      (0x3214) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_69_OFFSET      (0x3294) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_70_OFFSET      (0x3314) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_71_OFFSET      (0x3394) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_72_OFFSET      (0x3414) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_73_OFFSET      (0x3494) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_74_OFFSET      (0x3514) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_75_OFFSET      (0x3594) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_76_OFFSET      (0x3614) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_77_OFFSET      (0x3694) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_78_OFFSET      (0x3714) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_79_OFFSET      (0x3794) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_80_OFFSET      (0x3814) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_81_OFFSET      (0x3894) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_82_OFFSET      (0x3914) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_83_OFFSET      (0x3994) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_84_OFFSET      (0x3A14) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_85_OFFSET      (0x3A94) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_86_OFFSET      (0x3B14) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_87_OFFSET      (0x3B94) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_88_OFFSET      (0x3C14) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_89_OFFSET      (0x3C94) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_90_OFFSET      (0x3D14) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_91_OFFSET      (0x3D94) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_92_OFFSET      (0x3E14) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_93_OFFSET      (0x3E94) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_94_OFFSET      (0x3F14) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_95_OFFSET      (0x3F94) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_96_OFFSET      (0x4014) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_97_OFFSET      (0x4094) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_98_OFFSET      (0x4114) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_99_OFFSET      (0x4194) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_100_OFFSET     (0x4214) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_101_OFFSET     (0x4294) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_102_OFFSET     (0x4314) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_103_OFFSET     (0x4394) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_104_OFFSET     (0x4414) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_105_OFFSET     (0x4494) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_106_OFFSET     (0x4514) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_107_OFFSET     (0x4594) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_108_OFFSET     (0x4614) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_109_OFFSET     (0x4694) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_110_OFFSET     (0x4714) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_111_OFFSET     (0x4794) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_112_OFFSET     (0x4814) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_113_OFFSET     (0x4894) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_114_OFFSET     (0x4914) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_115_OFFSET     (0x4994) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_116_OFFSET     (0x4A14) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_117_OFFSET     (0x4A94) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_118_OFFSET     (0x4B14) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_119_OFFSET     (0x4B94) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_120_OFFSET     (0x4C14) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_121_OFFSET     (0x4C94) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_122_OFFSET     (0x4D14) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_123_OFFSET     (0x4D94) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_124_OFFSET     (0x4E14) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_125_OFFSET     (0x4E94) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_126_OFFSET     (0x4F14) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_127_OFFSET     (0x4F94) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_0_OFFSET       (0x1018) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_1_OFFSET       (0x1098) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_2_OFFSET       (0x1118) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_3_OFFSET       (0x1198) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_4_OFFSET       (0x1218) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_5_OFFSET       (0x1298) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_6_OFFSET       (0x1318) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_7_OFFSET       (0x1398) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_8_OFFSET       (0x1418) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_9_OFFSET       (0x1498) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_10_OFFSET      (0x1518) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_11_OFFSET      (0x1598) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_12_OFFSET      (0x1618) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_13_OFFSET      (0x1698) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_14_OFFSET      (0x1718) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_15_OFFSET      (0x1798) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_16_OFFSET      (0x1818) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_17_OFFSET      (0x1898) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_18_OFFSET      (0x1918) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_19_OFFSET      (0x1998) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_20_OFFSET      (0x1A18) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_21_OFFSET      (0x1A98) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_22_OFFSET      (0x1B18) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_23_OFFSET      (0x1B98) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_24_OFFSET      (0x1C18) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_25_OFFSET      (0x1C98) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_26_OFFSET      (0x1D18) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_27_OFFSET      (0x1D98) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_28_OFFSET      (0x1E18) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_29_OFFSET      (0x1E98) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_30_OFFSET      (0x1F18) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_31_OFFSET      (0x1F98) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_32_OFFSET      (0x2018) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_33_OFFSET      (0x2098) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_34_OFFSET      (0x2118) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_35_OFFSET      (0x2198) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_36_OFFSET      (0x2218) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_37_OFFSET      (0x2298) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_38_OFFSET      (0x2318) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_39_OFFSET      (0x2398) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_40_OFFSET      (0x2418) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_41_OFFSET      (0x2498) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_42_OFFSET      (0x2518) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_43_OFFSET      (0x2598) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_44_OFFSET      (0x2618) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_45_OFFSET      (0x2698) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_46_OFFSET      (0x2718) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_47_OFFSET      (0x2798) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_48_OFFSET      (0x2818) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_49_OFFSET      (0x2898) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_50_OFFSET      (0x2918) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_51_OFFSET      (0x2998) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_52_OFFSET      (0x2A18) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_53_OFFSET      (0x2A98) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_54_OFFSET      (0x2B18) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_55_OFFSET      (0x2B98) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_56_OFFSET      (0x2C18) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_57_OFFSET      (0x2C98) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_58_OFFSET      (0x2D18) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_59_OFFSET      (0x2D98) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_60_OFFSET      (0x2E18) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_61_OFFSET      (0x2E98) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_62_OFFSET      (0x2F18) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_63_OFFSET      (0x2F98) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_64_OFFSET      (0x3018) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_65_OFFSET      (0x3098) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_66_OFFSET      (0x3118) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_67_OFFSET      (0x3198) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_68_OFFSET      (0x3218) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_69_OFFSET      (0x3298) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_70_OFFSET      (0x3318) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_71_OFFSET      (0x3398) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_72_OFFSET      (0x3418) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_73_OFFSET      (0x3498) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_74_OFFSET      (0x3518) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_75_OFFSET      (0x3598) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_76_OFFSET      (0x3618) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_77_OFFSET      (0x3698) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_78_OFFSET      (0x3718) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_79_OFFSET      (0x3798) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_80_OFFSET      (0x3818) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_81_OFFSET      (0x3898) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_82_OFFSET      (0x3918) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_83_OFFSET      (0x3998) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_84_OFFSET      (0x3A18) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_85_OFFSET      (0x3A98) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_86_OFFSET      (0x3B18) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_87_OFFSET      (0x3B98) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_88_OFFSET      (0x3C18) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_89_OFFSET      (0x3C98) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_90_OFFSET      (0x3D18) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_91_OFFSET      (0x3D98) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_92_OFFSET      (0x3E18) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_93_OFFSET      (0x3E98) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_94_OFFSET      (0x3F18) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_95_OFFSET      (0x3F98) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_96_OFFSET      (0x4018) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_97_OFFSET      (0x4098) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_98_OFFSET      (0x4118) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_99_OFFSET      (0x4198) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_100_OFFSET     (0x4218) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_101_OFFSET     (0x4298) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_102_OFFSET     (0x4318) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_103_OFFSET     (0x4398) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_104_OFFSET     (0x4418) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_105_OFFSET     (0x4498) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_106_OFFSET     (0x4518) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_107_OFFSET     (0x4598) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_108_OFFSET     (0x4618) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_109_OFFSET     (0x4698) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_110_OFFSET     (0x4718) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_111_OFFSET     (0x4798) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_112_OFFSET     (0x4818) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_113_OFFSET     (0x4898) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_114_OFFSET     (0x4918) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_115_OFFSET     (0x4998) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_116_OFFSET     (0x4A18) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_117_OFFSET     (0x4A98) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_118_OFFSET     (0x4B18) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_119_OFFSET     (0x4B98) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_120_OFFSET     (0x4C18) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_121_OFFSET     (0x4C98) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_122_OFFSET     (0x4D18) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_123_OFFSET     (0x4D98) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_124_OFFSET     (0x4E18) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_125_OFFSET     (0x4E98) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_126_OFFSET     (0x4F18) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_127_OFFSET     (0x4F98) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_0_OFFSET       (0x101C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_1_OFFSET       (0x109C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_2_OFFSET       (0x111C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_3_OFFSET       (0x119C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_4_OFFSET       (0x121C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_5_OFFSET       (0x129C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_6_OFFSET       (0x131C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_7_OFFSET       (0x139C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_8_OFFSET       (0x141C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_9_OFFSET       (0x149C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_10_OFFSET      (0x151C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_11_OFFSET      (0x159C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_12_OFFSET      (0x161C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_13_OFFSET      (0x169C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_14_OFFSET      (0x171C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_15_OFFSET      (0x179C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_16_OFFSET      (0x181C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_17_OFFSET      (0x189C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_18_OFFSET      (0x191C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_19_OFFSET      (0x199C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_20_OFFSET      (0x1A1C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_21_OFFSET      (0x1A9C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_22_OFFSET      (0x1B1C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_23_OFFSET      (0x1B9C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_24_OFFSET      (0x1C1C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_25_OFFSET      (0x1C9C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_26_OFFSET      (0x1D1C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_27_OFFSET      (0x1D9C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_28_OFFSET      (0x1E1C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_29_OFFSET      (0x1E9C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_30_OFFSET      (0x1F1C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_31_OFFSET      (0x1F9C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_32_OFFSET      (0x201C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_33_OFFSET      (0x209C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_34_OFFSET      (0x211C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_35_OFFSET      (0x219C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_36_OFFSET      (0x221C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_37_OFFSET      (0x229C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_38_OFFSET      (0x231C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_39_OFFSET      (0x239C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_40_OFFSET      (0x241C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_41_OFFSET      (0x249C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_42_OFFSET      (0x251C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_43_OFFSET      (0x259C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_44_OFFSET      (0x261C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_45_OFFSET      (0x269C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_46_OFFSET      (0x271C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_47_OFFSET      (0x279C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_48_OFFSET      (0x281C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_49_OFFSET      (0x289C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_50_OFFSET      (0x291C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_51_OFFSET      (0x299C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_52_OFFSET      (0x2A1C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_53_OFFSET      (0x2A9C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_54_OFFSET      (0x2B1C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_55_OFFSET      (0x2B9C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_56_OFFSET      (0x2C1C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_57_OFFSET      (0x2C9C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_58_OFFSET      (0x2D1C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_59_OFFSET      (0x2D9C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_60_OFFSET      (0x2E1C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_61_OFFSET      (0x2E9C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_62_OFFSET      (0x2F1C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_63_OFFSET      (0x2F9C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_64_OFFSET      (0x301C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_65_OFFSET      (0x309C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_66_OFFSET      (0x311C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_67_OFFSET      (0x319C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_68_OFFSET      (0x321C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_69_OFFSET      (0x329C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_70_OFFSET      (0x331C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_71_OFFSET      (0x339C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_72_OFFSET      (0x341C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_73_OFFSET      (0x349C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_74_OFFSET      (0x351C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_75_OFFSET      (0x359C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_76_OFFSET      (0x361C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_77_OFFSET      (0x369C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_78_OFFSET      (0x371C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_79_OFFSET      (0x379C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_80_OFFSET      (0x381C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_81_OFFSET      (0x389C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_82_OFFSET      (0x391C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_83_OFFSET      (0x399C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_84_OFFSET      (0x3A1C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_85_OFFSET      (0x3A9C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_86_OFFSET      (0x3B1C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_87_OFFSET      (0x3B9C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_88_OFFSET      (0x3C1C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_89_OFFSET      (0x3C9C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_90_OFFSET      (0x3D1C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_91_OFFSET      (0x3D9C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_92_OFFSET      (0x3E1C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_93_OFFSET      (0x3E9C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_94_OFFSET      (0x3F1C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_95_OFFSET      (0x3F9C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_96_OFFSET      (0x401C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_97_OFFSET      (0x409C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_98_OFFSET      (0x411C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_99_OFFSET      (0x419C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_100_OFFSET     (0x421C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_101_OFFSET     (0x429C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_102_OFFSET     (0x431C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_103_OFFSET     (0x439C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_104_OFFSET     (0x441C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_105_OFFSET     (0x449C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_106_OFFSET     (0x451C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_107_OFFSET     (0x459C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_108_OFFSET     (0x461C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_109_OFFSET     (0x469C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_110_OFFSET     (0x471C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_111_OFFSET     (0x479C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_112_OFFSET     (0x481C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_113_OFFSET     (0x489C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_114_OFFSET     (0x491C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_115_OFFSET     (0x499C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_116_OFFSET     (0x4A1C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_117_OFFSET     (0x4A9C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_118_OFFSET     (0x4B1C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_119_OFFSET     (0x4B9C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_120_OFFSET     (0x4C1C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_121_OFFSET     (0x4C9C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_122_OFFSET     (0x4D1C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_123_OFFSET     (0x4D9C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_124_OFFSET     (0x4E1C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_125_OFFSET     (0x4E9C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_126_OFFSET     (0x4F1C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_127_OFFSET     (0x4F9C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_0_OFFSET  (0x1020) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_1_OFFSET  (0x10A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_2_OFFSET  (0x1120) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_3_OFFSET  (0x11A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_4_OFFSET  (0x1220) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_5_OFFSET  (0x12A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_6_OFFSET  (0x1320) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_7_OFFSET  (0x13A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_8_OFFSET  (0x1420) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_9_OFFSET  (0x14A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_10_OFFSET  (0x1520) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_11_OFFSET  (0x15A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_12_OFFSET  (0x1620) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_13_OFFSET  (0x16A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_14_OFFSET  (0x1720) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_15_OFFSET  (0x17A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_16_OFFSET  (0x1820) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_17_OFFSET  (0x18A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_18_OFFSET  (0x1920) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_19_OFFSET  (0x19A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_20_OFFSET  (0x1A20) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_21_OFFSET  (0x1AA0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_22_OFFSET  (0x1B20) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_23_OFFSET  (0x1BA0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_24_OFFSET  (0x1C20) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_25_OFFSET  (0x1CA0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_26_OFFSET  (0x1D20) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_27_OFFSET  (0x1DA0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_28_OFFSET  (0x1E20) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_29_OFFSET  (0x1EA0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_30_OFFSET  (0x1F20) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_31_OFFSET  (0x1FA0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_32_OFFSET  (0x2020) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_33_OFFSET  (0x20A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_34_OFFSET  (0x2120) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_35_OFFSET  (0x21A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_36_OFFSET  (0x2220) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_37_OFFSET  (0x22A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_38_OFFSET  (0x2320) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_39_OFFSET  (0x23A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_40_OFFSET  (0x2420) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_41_OFFSET  (0x24A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_42_OFFSET  (0x2520) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_43_OFFSET  (0x25A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_44_OFFSET  (0x2620) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_45_OFFSET  (0x26A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_46_OFFSET  (0x2720) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_47_OFFSET  (0x27A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_48_OFFSET  (0x2820) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_49_OFFSET  (0x28A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_50_OFFSET  (0x2920) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_51_OFFSET  (0x29A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_52_OFFSET  (0x2A20) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_53_OFFSET  (0x2AA0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_54_OFFSET  (0x2B20) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_55_OFFSET  (0x2BA0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_56_OFFSET  (0x2C20) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_57_OFFSET  (0x2CA0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_58_OFFSET  (0x2D20) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_59_OFFSET  (0x2DA0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_60_OFFSET  (0x2E20) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_61_OFFSET  (0x2EA0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_62_OFFSET  (0x2F20) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_63_OFFSET  (0x2FA0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_64_OFFSET  (0x3020) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_65_OFFSET  (0x30A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_66_OFFSET  (0x3120) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_67_OFFSET  (0x31A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_68_OFFSET  (0x3220) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_69_OFFSET  (0x32A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_70_OFFSET  (0x3320) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_71_OFFSET  (0x33A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_72_OFFSET  (0x3420) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_73_OFFSET  (0x34A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_74_OFFSET  (0x3520) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_75_OFFSET  (0x35A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_76_OFFSET  (0x3620) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_77_OFFSET  (0x36A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_78_OFFSET  (0x3720) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_79_OFFSET  (0x37A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_80_OFFSET  (0x3820) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_81_OFFSET  (0x38A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_82_OFFSET  (0x3920) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_83_OFFSET  (0x39A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_84_OFFSET  (0x3A20) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_85_OFFSET  (0x3AA0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_86_OFFSET  (0x3B20) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_87_OFFSET  (0x3BA0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_88_OFFSET  (0x3C20) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_89_OFFSET  (0x3CA0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_90_OFFSET  (0x3D20) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_91_OFFSET  (0x3DA0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_92_OFFSET  (0x3E20) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_93_OFFSET  (0x3EA0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_94_OFFSET  (0x3F20) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_95_OFFSET  (0x3FA0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_96_OFFSET  (0x4020) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_97_OFFSET  (0x40A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_98_OFFSET  (0x4120) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_99_OFFSET  (0x41A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_100_OFFSET  (0x4220) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_101_OFFSET  (0x42A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_102_OFFSET  (0x4320) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_103_OFFSET  (0x43A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_104_OFFSET  (0x4420) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_105_OFFSET  (0x44A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_106_OFFSET  (0x4520) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_107_OFFSET  (0x45A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_108_OFFSET  (0x4620) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_109_OFFSET  (0x46A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_110_OFFSET  (0x4720) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_111_OFFSET  (0x47A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_112_OFFSET  (0x4820) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_113_OFFSET  (0x48A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_114_OFFSET  (0x4920) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_115_OFFSET  (0x49A0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_116_OFFSET  (0x4A20) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_117_OFFSET  (0x4AA0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_118_OFFSET  (0x4B20) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_119_OFFSET  (0x4BA0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_120_OFFSET  (0x4C20) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_121_OFFSET  (0x4CA0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_122_OFFSET  (0x4D20) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_123_OFFSET  (0x4DA0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_124_OFFSET  (0x4E20) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_125_OFFSET  (0x4EA0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_126_OFFSET  (0x4F20) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR0_MASK_127_OFFSET  (0x4FA0) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_0_OFFSET  (0x1024) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_1_OFFSET  (0x10A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_2_OFFSET  (0x1124) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_3_OFFSET  (0x11A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_4_OFFSET  (0x1224) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_5_OFFSET  (0x12A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_6_OFFSET  (0x1324) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_7_OFFSET  (0x13A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_8_OFFSET  (0x1424) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_9_OFFSET  (0x14A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_10_OFFSET  (0x1524) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_11_OFFSET  (0x15A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_12_OFFSET  (0x1624) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_13_OFFSET  (0x16A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_14_OFFSET  (0x1724) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_15_OFFSET  (0x17A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_16_OFFSET  (0x1824) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_17_OFFSET  (0x18A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_18_OFFSET  (0x1924) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_19_OFFSET  (0x19A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_20_OFFSET  (0x1A24) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_21_OFFSET  (0x1AA4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_22_OFFSET  (0x1B24) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_23_OFFSET  (0x1BA4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_24_OFFSET  (0x1C24) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_25_OFFSET  (0x1CA4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_26_OFFSET  (0x1D24) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_27_OFFSET  (0x1DA4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_28_OFFSET  (0x1E24) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_29_OFFSET  (0x1EA4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_30_OFFSET  (0x1F24) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_31_OFFSET  (0x1FA4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_32_OFFSET  (0x2024) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_33_OFFSET  (0x20A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_34_OFFSET  (0x2124) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_35_OFFSET  (0x21A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_36_OFFSET  (0x2224) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_37_OFFSET  (0x22A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_38_OFFSET  (0x2324) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_39_OFFSET  (0x23A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_40_OFFSET  (0x2424) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_41_OFFSET  (0x24A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_42_OFFSET  (0x2524) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_43_OFFSET  (0x25A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_44_OFFSET  (0x2624) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_45_OFFSET  (0x26A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_46_OFFSET  (0x2724) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_47_OFFSET  (0x27A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_48_OFFSET  (0x2824) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_49_OFFSET  (0x28A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_50_OFFSET  (0x2924) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_51_OFFSET  (0x29A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_52_OFFSET  (0x2A24) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_53_OFFSET  (0x2AA4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_54_OFFSET  (0x2B24) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_55_OFFSET  (0x2BA4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_56_OFFSET  (0x2C24) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_57_OFFSET  (0x2CA4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_58_OFFSET  (0x2D24) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_59_OFFSET  (0x2DA4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_60_OFFSET  (0x2E24) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_61_OFFSET  (0x2EA4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_62_OFFSET  (0x2F24) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_63_OFFSET  (0x2FA4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_64_OFFSET  (0x3024) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_65_OFFSET  (0x30A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_66_OFFSET  (0x3124) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_67_OFFSET  (0x31A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_68_OFFSET  (0x3224) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_69_OFFSET  (0x32A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_70_OFFSET  (0x3324) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_71_OFFSET  (0x33A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_72_OFFSET  (0x3424) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_73_OFFSET  (0x34A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_74_OFFSET  (0x3524) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_75_OFFSET  (0x35A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_76_OFFSET  (0x3624) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_77_OFFSET  (0x36A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_78_OFFSET  (0x3724) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_79_OFFSET  (0x37A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_80_OFFSET  (0x3824) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_81_OFFSET  (0x38A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_82_OFFSET  (0x3924) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_83_OFFSET  (0x39A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_84_OFFSET  (0x3A24) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_85_OFFSET  (0x3AA4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_86_OFFSET  (0x3B24) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_87_OFFSET  (0x3BA4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_88_OFFSET  (0x3C24) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_89_OFFSET  (0x3CA4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_90_OFFSET  (0x3D24) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_91_OFFSET  (0x3DA4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_92_OFFSET  (0x3E24) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_93_OFFSET  (0x3EA4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_94_OFFSET  (0x3F24) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_95_OFFSET  (0x3FA4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_96_OFFSET  (0x4024) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_97_OFFSET  (0x40A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_98_OFFSET  (0x4124) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_99_OFFSET  (0x41A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_100_OFFSET  (0x4224) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_101_OFFSET  (0x42A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_102_OFFSET  (0x4324) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_103_OFFSET  (0x43A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_104_OFFSET  (0x4424) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_105_OFFSET  (0x44A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_106_OFFSET  (0x4524) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_107_OFFSET  (0x45A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_108_OFFSET  (0x4624) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_109_OFFSET  (0x46A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_110_OFFSET  (0x4724) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_111_OFFSET  (0x47A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_112_OFFSET  (0x4824) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_113_OFFSET  (0x48A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_114_OFFSET  (0x4924) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_115_OFFSET  (0x49A4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_116_OFFSET  (0x4A24) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_117_OFFSET  (0x4AA4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_118_OFFSET  (0x4B24) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_119_OFFSET  (0x4BA4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_120_OFFSET  (0x4C24) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_121_OFFSET  (0x4CA4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_122_OFFSET  (0x4D24) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_123_OFFSET  (0x4DA4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_124_OFFSET  (0x4E24) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_125_OFFSET  (0x4EA4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_126_OFFSET  (0x4F24) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR1_MASK_127_OFFSET  (0x4FA4) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_0_OFFSET  (0x1028) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_1_OFFSET  (0x10A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_2_OFFSET  (0x1128) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_3_OFFSET  (0x11A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_4_OFFSET  (0x1228) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_5_OFFSET  (0x12A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_6_OFFSET  (0x1328) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_7_OFFSET  (0x13A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_8_OFFSET  (0x1428) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_9_OFFSET  (0x14A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_10_OFFSET  (0x1528) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_11_OFFSET  (0x15A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_12_OFFSET  (0x1628) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_13_OFFSET  (0x16A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_14_OFFSET  (0x1728) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_15_OFFSET  (0x17A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_16_OFFSET  (0x1828) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_17_OFFSET  (0x18A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_18_OFFSET  (0x1928) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_19_OFFSET  (0x19A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_20_OFFSET  (0x1A28) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_21_OFFSET  (0x1AA8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_22_OFFSET  (0x1B28) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_23_OFFSET  (0x1BA8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_24_OFFSET  (0x1C28) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_25_OFFSET  (0x1CA8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_26_OFFSET  (0x1D28) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_27_OFFSET  (0x1DA8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_28_OFFSET  (0x1E28) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_29_OFFSET  (0x1EA8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_30_OFFSET  (0x1F28) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_31_OFFSET  (0x1FA8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_32_OFFSET  (0x2028) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_33_OFFSET  (0x20A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_34_OFFSET  (0x2128) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_35_OFFSET  (0x21A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_36_OFFSET  (0x2228) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_37_OFFSET  (0x22A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_38_OFFSET  (0x2328) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_39_OFFSET  (0x23A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_40_OFFSET  (0x2428) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_41_OFFSET  (0x24A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_42_OFFSET  (0x2528) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_43_OFFSET  (0x25A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_44_OFFSET  (0x2628) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_45_OFFSET  (0x26A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_46_OFFSET  (0x2728) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_47_OFFSET  (0x27A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_48_OFFSET  (0x2828) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_49_OFFSET  (0x28A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_50_OFFSET  (0x2928) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_51_OFFSET  (0x29A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_52_OFFSET  (0x2A28) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_53_OFFSET  (0x2AA8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_54_OFFSET  (0x2B28) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_55_OFFSET  (0x2BA8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_56_OFFSET  (0x2C28) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_57_OFFSET  (0x2CA8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_58_OFFSET  (0x2D28) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_59_OFFSET  (0x2DA8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_60_OFFSET  (0x2E28) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_61_OFFSET  (0x2EA8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_62_OFFSET  (0x2F28) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_63_OFFSET  (0x2FA8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_64_OFFSET  (0x3028) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_65_OFFSET  (0x30A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_66_OFFSET  (0x3128) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_67_OFFSET  (0x31A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_68_OFFSET  (0x3228) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_69_OFFSET  (0x32A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_70_OFFSET  (0x3328) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_71_OFFSET  (0x33A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_72_OFFSET  (0x3428) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_73_OFFSET  (0x34A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_74_OFFSET  (0x3528) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_75_OFFSET  (0x35A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_76_OFFSET  (0x3628) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_77_OFFSET  (0x36A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_78_OFFSET  (0x3728) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_79_OFFSET  (0x37A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_80_OFFSET  (0x3828) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_81_OFFSET  (0x38A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_82_OFFSET  (0x3928) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_83_OFFSET  (0x39A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_84_OFFSET  (0x3A28) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_85_OFFSET  (0x3AA8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_86_OFFSET  (0x3B28) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_87_OFFSET  (0x3BA8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_88_OFFSET  (0x3C28) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_89_OFFSET  (0x3CA8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_90_OFFSET  (0x3D28) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_91_OFFSET  (0x3DA8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_92_OFFSET  (0x3E28) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_93_OFFSET  (0x3EA8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_94_OFFSET  (0x3F28) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_95_OFFSET  (0x3FA8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_96_OFFSET  (0x4028) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_97_OFFSET  (0x40A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_98_OFFSET  (0x4128) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_99_OFFSET  (0x41A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_100_OFFSET  (0x4228) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_101_OFFSET  (0x42A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_102_OFFSET  (0x4328) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_103_OFFSET  (0x43A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_104_OFFSET  (0x4428) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_105_OFFSET  (0x44A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_106_OFFSET  (0x4528) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_107_OFFSET  (0x45A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_108_OFFSET  (0x4628) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_109_OFFSET  (0x46A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_110_OFFSET  (0x4728) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_111_OFFSET  (0x47A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_112_OFFSET  (0x4828) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_113_OFFSET  (0x48A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_114_OFFSET  (0x4928) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_115_OFFSET  (0x49A8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_116_OFFSET  (0x4A28) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_117_OFFSET  (0x4AA8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_118_OFFSET  (0x4B28) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_119_OFFSET  (0x4BA8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_120_OFFSET  (0x4C28) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_121_OFFSET  (0x4CA8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_122_OFFSET  (0x4D28) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_123_OFFSET  (0x4DA8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_124_OFFSET  (0x4E28) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_125_OFFSET  (0x4EA8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_126_OFFSET  (0x4F28) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR2_MASK_127_OFFSET  (0x4FA8) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_0_OFFSET  (0x102C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_1_OFFSET  (0x10AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_2_OFFSET  (0x112C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_3_OFFSET  (0x11AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_4_OFFSET  (0x122C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_5_OFFSET  (0x12AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_6_OFFSET  (0x132C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_7_OFFSET  (0x13AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_8_OFFSET  (0x142C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_9_OFFSET  (0x14AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_10_OFFSET  (0x152C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_11_OFFSET  (0x15AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_12_OFFSET  (0x162C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_13_OFFSET  (0x16AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_14_OFFSET  (0x172C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_15_OFFSET  (0x17AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_16_OFFSET  (0x182C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_17_OFFSET  (0x18AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_18_OFFSET  (0x192C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_19_OFFSET  (0x19AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_20_OFFSET  (0x1A2C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_21_OFFSET  (0x1AAC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_22_OFFSET  (0x1B2C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_23_OFFSET  (0x1BAC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_24_OFFSET  (0x1C2C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_25_OFFSET  (0x1CAC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_26_OFFSET  (0x1D2C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_27_OFFSET  (0x1DAC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_28_OFFSET  (0x1E2C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_29_OFFSET  (0x1EAC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_30_OFFSET  (0x1F2C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_31_OFFSET  (0x1FAC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_32_OFFSET  (0x202C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_33_OFFSET  (0x20AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_34_OFFSET  (0x212C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_35_OFFSET  (0x21AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_36_OFFSET  (0x222C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_37_OFFSET  (0x22AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_38_OFFSET  (0x232C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_39_OFFSET  (0x23AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_40_OFFSET  (0x242C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_41_OFFSET  (0x24AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_42_OFFSET  (0x252C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_43_OFFSET  (0x25AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_44_OFFSET  (0x262C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_45_OFFSET  (0x26AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_46_OFFSET  (0x272C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_47_OFFSET  (0x27AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_48_OFFSET  (0x282C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_49_OFFSET  (0x28AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_50_OFFSET  (0x292C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_51_OFFSET  (0x29AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_52_OFFSET  (0x2A2C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_53_OFFSET  (0x2AAC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_54_OFFSET  (0x2B2C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_55_OFFSET  (0x2BAC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_56_OFFSET  (0x2C2C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_57_OFFSET  (0x2CAC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_58_OFFSET  (0x2D2C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_59_OFFSET  (0x2DAC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_60_OFFSET  (0x2E2C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_61_OFFSET  (0x2EAC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_62_OFFSET  (0x2F2C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_63_OFFSET  (0x2FAC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_64_OFFSET  (0x302C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_65_OFFSET  (0x30AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_66_OFFSET  (0x312C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_67_OFFSET  (0x31AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_68_OFFSET  (0x322C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_69_OFFSET  (0x32AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_70_OFFSET  (0x332C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_71_OFFSET  (0x33AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_72_OFFSET  (0x342C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_73_OFFSET  (0x34AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_74_OFFSET  (0x352C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_75_OFFSET  (0x35AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_76_OFFSET  (0x362C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_77_OFFSET  (0x36AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_78_OFFSET  (0x372C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_79_OFFSET  (0x37AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_80_OFFSET  (0x382C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_81_OFFSET  (0x38AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_82_OFFSET  (0x392C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_83_OFFSET  (0x39AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_84_OFFSET  (0x3A2C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_85_OFFSET  (0x3AAC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_86_OFFSET  (0x3B2C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_87_OFFSET  (0x3BAC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_88_OFFSET  (0x3C2C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_89_OFFSET  (0x3CAC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_90_OFFSET  (0x3D2C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_91_OFFSET  (0x3DAC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_92_OFFSET  (0x3E2C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_93_OFFSET  (0x3EAC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_94_OFFSET  (0x3F2C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_95_OFFSET  (0x3FAC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_96_OFFSET  (0x402C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_97_OFFSET  (0x40AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_98_OFFSET  (0x412C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_99_OFFSET  (0x41AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_100_OFFSET  (0x422C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_101_OFFSET  (0x42AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_102_OFFSET  (0x432C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_103_OFFSET  (0x43AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_104_OFFSET  (0x442C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_105_OFFSET  (0x44AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_106_OFFSET  (0x452C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_107_OFFSET  (0x45AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_108_OFFSET  (0x462C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_109_OFFSET  (0x46AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_110_OFFSET  (0x472C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_111_OFFSET  (0x47AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_112_OFFSET  (0x482C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_113_OFFSET  (0x48AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_114_OFFSET  (0x492C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_115_OFFSET  (0x49AC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_116_OFFSET  (0x4A2C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_117_OFFSET  (0x4AAC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_118_OFFSET  (0x4B2C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_119_OFFSET  (0x4BAC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_120_OFFSET  (0x4C2C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_121_OFFSET  (0x4CAC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_122_OFFSET  (0x4D2C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_123_OFFSET  (0x4DAC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_124_OFFSET  (0x4E2C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_125_OFFSET  (0x4EAC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_126_OFFSET  (0x4F2C) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_ADDR3_MASK_127_OFFSET  (0x4FAC) /* 过滤器remote address配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_0_OFFSET         (0x1030) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_1_OFFSET         (0x10B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_2_OFFSET         (0x1130) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_3_OFFSET         (0x11B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_4_OFFSET         (0x1230) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_5_OFFSET         (0x12B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_6_OFFSET         (0x1330) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_7_OFFSET         (0x13B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_8_OFFSET         (0x1430) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_9_OFFSET         (0x14B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_10_OFFSET        (0x1530) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_11_OFFSET        (0x15B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_12_OFFSET        (0x1630) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_13_OFFSET        (0x16B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_14_OFFSET        (0x1730) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_15_OFFSET        (0x17B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_16_OFFSET        (0x1830) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_17_OFFSET        (0x18B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_18_OFFSET        (0x1930) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_19_OFFSET        (0x19B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_20_OFFSET        (0x1A30) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_21_OFFSET        (0x1AB0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_22_OFFSET        (0x1B30) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_23_OFFSET        (0x1BB0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_24_OFFSET        (0x1C30) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_25_OFFSET        (0x1CB0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_26_OFFSET        (0x1D30) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_27_OFFSET        (0x1DB0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_28_OFFSET        (0x1E30) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_29_OFFSET        (0x1EB0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_30_OFFSET        (0x1F30) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_31_OFFSET        (0x1FB0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_32_OFFSET        (0x2030) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_33_OFFSET        (0x20B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_34_OFFSET        (0x2130) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_35_OFFSET        (0x21B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_36_OFFSET        (0x2230) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_37_OFFSET        (0x22B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_38_OFFSET        (0x2330) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_39_OFFSET        (0x23B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_40_OFFSET        (0x2430) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_41_OFFSET        (0x24B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_42_OFFSET        (0x2530) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_43_OFFSET        (0x25B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_44_OFFSET        (0x2630) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_45_OFFSET        (0x26B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_46_OFFSET        (0x2730) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_47_OFFSET        (0x27B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_48_OFFSET        (0x2830) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_49_OFFSET        (0x28B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_50_OFFSET        (0x2930) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_51_OFFSET        (0x29B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_52_OFFSET        (0x2A30) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_53_OFFSET        (0x2AB0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_54_OFFSET        (0x2B30) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_55_OFFSET        (0x2BB0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_56_OFFSET        (0x2C30) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_57_OFFSET        (0x2CB0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_58_OFFSET        (0x2D30) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_59_OFFSET        (0x2DB0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_60_OFFSET        (0x2E30) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_61_OFFSET        (0x2EB0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_62_OFFSET        (0x2F30) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_63_OFFSET        (0x2FB0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_64_OFFSET        (0x3030) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_65_OFFSET        (0x30B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_66_OFFSET        (0x3130) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_67_OFFSET        (0x31B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_68_OFFSET        (0x3230) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_69_OFFSET        (0x32B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_70_OFFSET        (0x3330) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_71_OFFSET        (0x33B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_72_OFFSET        (0x3430) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_73_OFFSET        (0x34B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_74_OFFSET        (0x3530) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_75_OFFSET        (0x35B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_76_OFFSET        (0x3630) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_77_OFFSET        (0x36B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_78_OFFSET        (0x3730) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_79_OFFSET        (0x37B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_80_OFFSET        (0x3830) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_81_OFFSET        (0x38B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_82_OFFSET        (0x3930) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_83_OFFSET        (0x39B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_84_OFFSET        (0x3A30) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_85_OFFSET        (0x3AB0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_86_OFFSET        (0x3B30) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_87_OFFSET        (0x3BB0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_88_OFFSET        (0x3C30) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_89_OFFSET        (0x3CB0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_90_OFFSET        (0x3D30) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_91_OFFSET        (0x3DB0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_92_OFFSET        (0x3E30) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_93_OFFSET        (0x3EB0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_94_OFFSET        (0x3F30) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_95_OFFSET        (0x3FB0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_96_OFFSET        (0x4030) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_97_OFFSET        (0x40B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_98_OFFSET        (0x4130) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_99_OFFSET        (0x41B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_100_OFFSET       (0x4230) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_101_OFFSET       (0x42B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_102_OFFSET       (0x4330) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_103_OFFSET       (0x43B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_104_OFFSET       (0x4430) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_105_OFFSET       (0x44B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_106_OFFSET       (0x4530) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_107_OFFSET       (0x45B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_108_OFFSET       (0x4630) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_109_OFFSET       (0x46B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_110_OFFSET       (0x4730) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_111_OFFSET       (0x47B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_112_OFFSET       (0x4830) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_113_OFFSET       (0x48B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_114_OFFSET       (0x4930) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_115_OFFSET       (0x49B0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_116_OFFSET       (0x4A30) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_117_OFFSET       (0x4AB0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_118_OFFSET       (0x4B30) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_119_OFFSET       (0x4BB0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_120_OFFSET       (0x4C30) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_121_OFFSET       (0x4CB0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_122_OFFSET       (0x4D30) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_123_OFFSET       (0x4DB0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_124_OFFSET       (0x4E30) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_125_OFFSET       (0x4EB0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_126_OFFSET       (0x4F30) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_LOCAL_PORT_127_OFFSET       (0x4FB0) /* 过滤表LOCAL PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_0_OFFSET        (0x1034) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_1_OFFSET        (0x10B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_2_OFFSET        (0x1134) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_3_OFFSET        (0x11B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_4_OFFSET        (0x1234) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_5_OFFSET        (0x12B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_6_OFFSET        (0x1334) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_7_OFFSET        (0x13B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_8_OFFSET        (0x1434) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_9_OFFSET        (0x14B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_10_OFFSET       (0x1534) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_11_OFFSET       (0x15B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_12_OFFSET       (0x1634) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_13_OFFSET       (0x16B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_14_OFFSET       (0x1734) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_15_OFFSET       (0x17B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_16_OFFSET       (0x1834) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_17_OFFSET       (0x18B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_18_OFFSET       (0x1934) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_19_OFFSET       (0x19B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_20_OFFSET       (0x1A34) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_21_OFFSET       (0x1AB4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_22_OFFSET       (0x1B34) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_23_OFFSET       (0x1BB4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_24_OFFSET       (0x1C34) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_25_OFFSET       (0x1CB4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_26_OFFSET       (0x1D34) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_27_OFFSET       (0x1DB4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_28_OFFSET       (0x1E34) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_29_OFFSET       (0x1EB4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_30_OFFSET       (0x1F34) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_31_OFFSET       (0x1FB4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_32_OFFSET       (0x2034) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_33_OFFSET       (0x20B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_34_OFFSET       (0x2134) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_35_OFFSET       (0x21B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_36_OFFSET       (0x2234) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_37_OFFSET       (0x22B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_38_OFFSET       (0x2334) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_39_OFFSET       (0x23B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_40_OFFSET       (0x2434) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_41_OFFSET       (0x24B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_42_OFFSET       (0x2534) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_43_OFFSET       (0x25B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_44_OFFSET       (0x2634) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_45_OFFSET       (0x26B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_46_OFFSET       (0x2734) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_47_OFFSET       (0x27B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_48_OFFSET       (0x2834) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_49_OFFSET       (0x28B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_50_OFFSET       (0x2934) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_51_OFFSET       (0x29B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_52_OFFSET       (0x2A34) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_53_OFFSET       (0x2AB4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_54_OFFSET       (0x2B34) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_55_OFFSET       (0x2BB4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_56_OFFSET       (0x2C34) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_57_OFFSET       (0x2CB4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_58_OFFSET       (0x2D34) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_59_OFFSET       (0x2DB4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_60_OFFSET       (0x2E34) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_61_OFFSET       (0x2EB4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_62_OFFSET       (0x2F34) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_63_OFFSET       (0x2FB4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_64_OFFSET       (0x3034) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_65_OFFSET       (0x30B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_66_OFFSET       (0x3134) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_67_OFFSET       (0x31B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_68_OFFSET       (0x3234) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_69_OFFSET       (0x32B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_70_OFFSET       (0x3334) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_71_OFFSET       (0x33B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_72_OFFSET       (0x3434) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_73_OFFSET       (0x34B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_74_OFFSET       (0x3534) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_75_OFFSET       (0x35B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_76_OFFSET       (0x3634) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_77_OFFSET       (0x36B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_78_OFFSET       (0x3734) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_79_OFFSET       (0x37B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_80_OFFSET       (0x3834) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_81_OFFSET       (0x38B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_82_OFFSET       (0x3934) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_83_OFFSET       (0x39B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_84_OFFSET       (0x3A34) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_85_OFFSET       (0x3AB4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_86_OFFSET       (0x3B34) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_87_OFFSET       (0x3BB4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_88_OFFSET       (0x3C34) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_89_OFFSET       (0x3CB4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_90_OFFSET       (0x3D34) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_91_OFFSET       (0x3DB4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_92_OFFSET       (0x3E34) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_93_OFFSET       (0x3EB4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_94_OFFSET       (0x3F34) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_95_OFFSET       (0x3FB4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_96_OFFSET       (0x4034) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_97_OFFSET       (0x40B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_98_OFFSET       (0x4134) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_99_OFFSET       (0x41B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_100_OFFSET      (0x4234) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_101_OFFSET      (0x42B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_102_OFFSET      (0x4334) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_103_OFFSET      (0x43B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_104_OFFSET      (0x4434) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_105_OFFSET      (0x44B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_106_OFFSET      (0x4534) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_107_OFFSET      (0x45B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_108_OFFSET      (0x4634) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_109_OFFSET      (0x46B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_110_OFFSET      (0x4734) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_111_OFFSET      (0x47B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_112_OFFSET      (0x4834) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_113_OFFSET      (0x48B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_114_OFFSET      (0x4934) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_115_OFFSET      (0x49B4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_116_OFFSET      (0x4A34) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_117_OFFSET      (0x4AB4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_118_OFFSET      (0x4B34) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_119_OFFSET      (0x4BB4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_120_OFFSET      (0x4C34) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_121_OFFSET      (0x4CB4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_122_OFFSET      (0x4D34) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_123_OFFSET      (0x4DB4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_124_OFFSET      (0x4E34) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_125_OFFSET      (0x4EB4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_126_OFFSET      (0x4F34) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_REMOTE_PORT_127_OFFSET      (0x4FB4) /* 过滤表REMOTE PORT门限配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_0_OFFSET      (0x1038) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_1_OFFSET      (0x10B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_2_OFFSET      (0x1138) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_3_OFFSET      (0x11B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_4_OFFSET      (0x1238) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_5_OFFSET      (0x12B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_6_OFFSET      (0x1338) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_7_OFFSET      (0x13B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_8_OFFSET      (0x1438) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_9_OFFSET      (0x14B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_10_OFFSET     (0x1538) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_11_OFFSET     (0x15B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_12_OFFSET     (0x1638) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_13_OFFSET     (0x16B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_14_OFFSET     (0x1738) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_15_OFFSET     (0x17B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_16_OFFSET     (0x1838) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_17_OFFSET     (0x18B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_18_OFFSET     (0x1938) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_19_OFFSET     (0x19B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_20_OFFSET     (0x1A38) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_21_OFFSET     (0x1AB8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_22_OFFSET     (0x1B38) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_23_OFFSET     (0x1BB8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_24_OFFSET     (0x1C38) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_25_OFFSET     (0x1CB8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_26_OFFSET     (0x1D38) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_27_OFFSET     (0x1DB8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_28_OFFSET     (0x1E38) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_29_OFFSET     (0x1EB8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_30_OFFSET     (0x1F38) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_31_OFFSET     (0x1FB8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_32_OFFSET     (0x2038) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_33_OFFSET     (0x20B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_34_OFFSET     (0x2138) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_35_OFFSET     (0x21B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_36_OFFSET     (0x2238) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_37_OFFSET     (0x22B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_38_OFFSET     (0x2338) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_39_OFFSET     (0x23B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_40_OFFSET     (0x2438) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_41_OFFSET     (0x24B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_42_OFFSET     (0x2538) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_43_OFFSET     (0x25B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_44_OFFSET     (0x2638) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_45_OFFSET     (0x26B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_46_OFFSET     (0x2738) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_47_OFFSET     (0x27B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_48_OFFSET     (0x2838) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_49_OFFSET     (0x28B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_50_OFFSET     (0x2938) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_51_OFFSET     (0x29B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_52_OFFSET     (0x2A38) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_53_OFFSET     (0x2AB8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_54_OFFSET     (0x2B38) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_55_OFFSET     (0x2BB8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_56_OFFSET     (0x2C38) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_57_OFFSET     (0x2CB8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_58_OFFSET     (0x2D38) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_59_OFFSET     (0x2DB8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_60_OFFSET     (0x2E38) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_61_OFFSET     (0x2EB8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_62_OFFSET     (0x2F38) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_63_OFFSET     (0x2FB8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_64_OFFSET     (0x3038) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_65_OFFSET     (0x30B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_66_OFFSET     (0x3138) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_67_OFFSET     (0x31B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_68_OFFSET     (0x3238) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_69_OFFSET     (0x32B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_70_OFFSET     (0x3338) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_71_OFFSET     (0x33B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_72_OFFSET     (0x3438) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_73_OFFSET     (0x34B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_74_OFFSET     (0x3538) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_75_OFFSET     (0x35B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_76_OFFSET     (0x3638) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_77_OFFSET     (0x36B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_78_OFFSET     (0x3738) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_79_OFFSET     (0x37B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_80_OFFSET     (0x3838) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_81_OFFSET     (0x38B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_82_OFFSET     (0x3938) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_83_OFFSET     (0x39B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_84_OFFSET     (0x3A38) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_85_OFFSET     (0x3AB8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_86_OFFSET     (0x3B38) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_87_OFFSET     (0x3BB8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_88_OFFSET     (0x3C38) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_89_OFFSET     (0x3CB8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_90_OFFSET     (0x3D38) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_91_OFFSET     (0x3DB8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_92_OFFSET     (0x3E38) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_93_OFFSET     (0x3EB8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_94_OFFSET     (0x3F38) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_95_OFFSET     (0x3FB8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_96_OFFSET     (0x4038) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_97_OFFSET     (0x40B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_98_OFFSET     (0x4138) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_99_OFFSET     (0x41B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_100_OFFSET    (0x4238) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_101_OFFSET    (0x42B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_102_OFFSET    (0x4338) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_103_OFFSET    (0x43B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_104_OFFSET    (0x4438) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_105_OFFSET    (0x44B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_106_OFFSET    (0x4538) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_107_OFFSET    (0x45B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_108_OFFSET    (0x4638) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_109_OFFSET    (0x46B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_110_OFFSET    (0x4738) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_111_OFFSET    (0x47B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_112_OFFSET    (0x4838) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_113_OFFSET    (0x48B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_114_OFFSET    (0x4938) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_115_OFFSET    (0x49B8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_116_OFFSET    (0x4A38) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_117_OFFSET    (0x4AB8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_118_OFFSET    (0x4B38) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_119_OFFSET    (0x4BB8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_120_OFFSET    (0x4C38) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_121_OFFSET    (0x4CB8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_122_OFFSET    (0x4D38) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_123_OFFSET    (0x4DB8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_124_OFFSET    (0x4E38) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_125_OFFSET    (0x4EB8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_126_OFFSET    (0x4F38) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_TRAFFIC_CLASS_127_OFFSET    (0x4FB8) /* 过滤表业务等级域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_0_OFFSET          (0x103C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_1_OFFSET          (0x10BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_2_OFFSET          (0x113C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_3_OFFSET          (0x11BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_4_OFFSET          (0x123C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_5_OFFSET          (0x12BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_6_OFFSET          (0x133C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_7_OFFSET          (0x13BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_8_OFFSET          (0x143C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_9_OFFSET          (0x14BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_10_OFFSET         (0x153C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_11_OFFSET         (0x15BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_12_OFFSET         (0x163C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_13_OFFSET         (0x16BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_14_OFFSET         (0x173C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_15_OFFSET         (0x17BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_16_OFFSET         (0x183C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_17_OFFSET         (0x18BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_18_OFFSET         (0x193C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_19_OFFSET         (0x19BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_20_OFFSET         (0x1A3C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_21_OFFSET         (0x1ABC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_22_OFFSET         (0x1B3C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_23_OFFSET         (0x1BBC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_24_OFFSET         (0x1C3C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_25_OFFSET         (0x1CBC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_26_OFFSET         (0x1D3C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_27_OFFSET         (0x1DBC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_28_OFFSET         (0x1E3C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_29_OFFSET         (0x1EBC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_30_OFFSET         (0x1F3C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_31_OFFSET         (0x1FBC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_32_OFFSET         (0x203C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_33_OFFSET         (0x20BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_34_OFFSET         (0x213C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_35_OFFSET         (0x21BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_36_OFFSET         (0x223C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_37_OFFSET         (0x22BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_38_OFFSET         (0x233C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_39_OFFSET         (0x23BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_40_OFFSET         (0x243C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_41_OFFSET         (0x24BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_42_OFFSET         (0x253C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_43_OFFSET         (0x25BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_44_OFFSET         (0x263C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_45_OFFSET         (0x26BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_46_OFFSET         (0x273C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_47_OFFSET         (0x27BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_48_OFFSET         (0x283C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_49_OFFSET         (0x28BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_50_OFFSET         (0x293C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_51_OFFSET         (0x29BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_52_OFFSET         (0x2A3C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_53_OFFSET         (0x2ABC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_54_OFFSET         (0x2B3C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_55_OFFSET         (0x2BBC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_56_OFFSET         (0x2C3C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_57_OFFSET         (0x2CBC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_58_OFFSET         (0x2D3C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_59_OFFSET         (0x2DBC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_60_OFFSET         (0x2E3C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_61_OFFSET         (0x2EBC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_62_OFFSET         (0x2F3C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_63_OFFSET         (0x2FBC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_64_OFFSET         (0x303C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_65_OFFSET         (0x30BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_66_OFFSET         (0x313C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_67_OFFSET         (0x31BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_68_OFFSET         (0x323C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_69_OFFSET         (0x32BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_70_OFFSET         (0x333C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_71_OFFSET         (0x33BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_72_OFFSET         (0x343C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_73_OFFSET         (0x34BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_74_OFFSET         (0x353C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_75_OFFSET         (0x35BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_76_OFFSET         (0x363C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_77_OFFSET         (0x36BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_78_OFFSET         (0x373C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_79_OFFSET         (0x37BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_80_OFFSET         (0x383C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_81_OFFSET         (0x38BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_82_OFFSET         (0x393C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_83_OFFSET         (0x39BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_84_OFFSET         (0x3A3C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_85_OFFSET         (0x3ABC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_86_OFFSET         (0x3B3C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_87_OFFSET         (0x3BBC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_88_OFFSET         (0x3C3C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_89_OFFSET         (0x3CBC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_90_OFFSET         (0x3D3C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_91_OFFSET         (0x3DBC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_92_OFFSET         (0x3E3C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_93_OFFSET         (0x3EBC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_94_OFFSET         (0x3F3C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_95_OFFSET         (0x3FBC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_96_OFFSET         (0x403C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_97_OFFSET         (0x40BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_98_OFFSET         (0x413C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_99_OFFSET         (0x41BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_100_OFFSET        (0x423C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_101_OFFSET        (0x42BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_102_OFFSET        (0x433C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_103_OFFSET        (0x43BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_104_OFFSET        (0x443C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_105_OFFSET        (0x44BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_106_OFFSET        (0x453C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_107_OFFSET        (0x45BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_108_OFFSET        (0x463C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_109_OFFSET        (0x46BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_110_OFFSET        (0x473C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_111_OFFSET        (0x47BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_112_OFFSET        (0x483C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_113_OFFSET        (0x48BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_114_OFFSET        (0x493C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_115_OFFSET        (0x49BC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_116_OFFSET        (0x4A3C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_117_OFFSET        (0x4ABC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_118_OFFSET        (0x4B3C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_119_OFFSET        (0x4BBC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_120_OFFSET        (0x4C3C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_121_OFFSET        (0x4CBC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_122_OFFSET        (0x4D3C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_123_OFFSET        (0x4DBC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_124_OFFSET        (0x4E3C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_125_OFFSET        (0x4EBC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_126_OFFSET        (0x4F3C) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_LADD_MASK_127_OFFSET        (0x4FBC) /* 过滤器local address mask域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_0_OFFSET        (0x1040) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_1_OFFSET        (0x10C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_2_OFFSET        (0x1140) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_3_OFFSET        (0x11C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_4_OFFSET        (0x1240) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_5_OFFSET        (0x12C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_6_OFFSET        (0x1340) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_7_OFFSET        (0x13C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_8_OFFSET        (0x1440) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_9_OFFSET        (0x14C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_10_OFFSET       (0x1540) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_11_OFFSET       (0x15C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_12_OFFSET       (0x1640) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_13_OFFSET       (0x16C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_14_OFFSET       (0x1740) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_15_OFFSET       (0x17C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_16_OFFSET       (0x1840) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_17_OFFSET       (0x18C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_18_OFFSET       (0x1940) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_19_OFFSET       (0x19C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_20_OFFSET       (0x1A40) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_21_OFFSET       (0x1AC0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_22_OFFSET       (0x1B40) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_23_OFFSET       (0x1BC0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_24_OFFSET       (0x1C40) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_25_OFFSET       (0x1CC0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_26_OFFSET       (0x1D40) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_27_OFFSET       (0x1DC0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_28_OFFSET       (0x1E40) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_29_OFFSET       (0x1EC0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_30_OFFSET       (0x1F40) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_31_OFFSET       (0x1FC0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_32_OFFSET       (0x2040) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_33_OFFSET       (0x20C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_34_OFFSET       (0x2140) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_35_OFFSET       (0x21C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_36_OFFSET       (0x2240) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_37_OFFSET       (0x22C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_38_OFFSET       (0x2340) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_39_OFFSET       (0x23C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_40_OFFSET       (0x2440) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_41_OFFSET       (0x24C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_42_OFFSET       (0x2540) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_43_OFFSET       (0x25C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_44_OFFSET       (0x2640) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_45_OFFSET       (0x26C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_46_OFFSET       (0x2740) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_47_OFFSET       (0x27C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_48_OFFSET       (0x2840) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_49_OFFSET       (0x28C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_50_OFFSET       (0x2940) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_51_OFFSET       (0x29C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_52_OFFSET       (0x2A40) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_53_OFFSET       (0x2AC0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_54_OFFSET       (0x2B40) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_55_OFFSET       (0x2BC0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_56_OFFSET       (0x2C40) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_57_OFFSET       (0x2CC0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_58_OFFSET       (0x2D40) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_59_OFFSET       (0x2DC0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_60_OFFSET       (0x2E40) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_61_OFFSET       (0x2EC0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_62_OFFSET       (0x2F40) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_63_OFFSET       (0x2FC0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_64_OFFSET       (0x3040) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_65_OFFSET       (0x30C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_66_OFFSET       (0x3140) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_67_OFFSET       (0x31C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_68_OFFSET       (0x3240) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_69_OFFSET       (0x32C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_70_OFFSET       (0x3340) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_71_OFFSET       (0x33C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_72_OFFSET       (0x3440) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_73_OFFSET       (0x34C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_74_OFFSET       (0x3540) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_75_OFFSET       (0x35C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_76_OFFSET       (0x3640) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_77_OFFSET       (0x36C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_78_OFFSET       (0x3740) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_79_OFFSET       (0x37C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_80_OFFSET       (0x3840) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_81_OFFSET       (0x38C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_82_OFFSET       (0x3940) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_83_OFFSET       (0x39C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_84_OFFSET       (0x3A40) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_85_OFFSET       (0x3AC0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_86_OFFSET       (0x3B40) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_87_OFFSET       (0x3BC0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_88_OFFSET       (0x3C40) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_89_OFFSET       (0x3CC0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_90_OFFSET       (0x3D40) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_91_OFFSET       (0x3DC0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_92_OFFSET       (0x3E40) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_93_OFFSET       (0x3EC0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_94_OFFSET       (0x3F40) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_95_OFFSET       (0x3FC0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_96_OFFSET       (0x4040) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_97_OFFSET       (0x40C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_98_OFFSET       (0x4140) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_99_OFFSET       (0x41C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_100_OFFSET      (0x4240) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_101_OFFSET      (0x42C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_102_OFFSET      (0x4340) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_103_OFFSET      (0x43C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_104_OFFSET      (0x4440) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_105_OFFSET      (0x44C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_106_OFFSET      (0x4540) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_107_OFFSET      (0x45C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_108_OFFSET      (0x4640) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_109_OFFSET      (0x46C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_110_OFFSET      (0x4740) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_111_OFFSET      (0x47C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_112_OFFSET      (0x4840) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_113_OFFSET      (0x48C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_114_OFFSET      (0x4940) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_115_OFFSET      (0x49C0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_116_OFFSET      (0x4A40) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_117_OFFSET      (0x4AC0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_118_OFFSET      (0x4B40) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_119_OFFSET      (0x4BC0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_120_OFFSET      (0x4C40) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_121_OFFSET      (0x4CC0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_122_OFFSET      (0x4D40) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_123_OFFSET      (0x4DC0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_124_OFFSET      (0x4E40) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_125_OFFSET      (0x4EC0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_126_OFFSET      (0x4F40) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_NEXT_HEADER_127_OFFSET      (0x4FC0) /* 过滤器协议类型域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_0_OFFSET         (0x1044) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_1_OFFSET         (0x10C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_2_OFFSET         (0x1144) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_3_OFFSET         (0x11C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_4_OFFSET         (0x1244) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_5_OFFSET         (0x12C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_6_OFFSET         (0x1344) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_7_OFFSET         (0x13C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_8_OFFSET         (0x1444) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_9_OFFSET         (0x14C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_10_OFFSET        (0x1544) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_11_OFFSET        (0x15C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_12_OFFSET        (0x1644) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_13_OFFSET        (0x16C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_14_OFFSET        (0x1744) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_15_OFFSET        (0x17C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_16_OFFSET        (0x1844) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_17_OFFSET        (0x18C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_18_OFFSET        (0x1944) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_19_OFFSET        (0x19C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_20_OFFSET        (0x1A44) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_21_OFFSET        (0x1AC4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_22_OFFSET        (0x1B44) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_23_OFFSET        (0x1BC4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_24_OFFSET        (0x1C44) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_25_OFFSET        (0x1CC4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_26_OFFSET        (0x1D44) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_27_OFFSET        (0x1DC4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_28_OFFSET        (0x1E44) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_29_OFFSET        (0x1EC4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_30_OFFSET        (0x1F44) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_31_OFFSET        (0x1FC4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_32_OFFSET        (0x2044) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_33_OFFSET        (0x20C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_34_OFFSET        (0x2144) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_35_OFFSET        (0x21C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_36_OFFSET        (0x2244) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_37_OFFSET        (0x22C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_38_OFFSET        (0x2344) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_39_OFFSET        (0x23C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_40_OFFSET        (0x2444) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_41_OFFSET        (0x24C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_42_OFFSET        (0x2544) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_43_OFFSET        (0x25C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_44_OFFSET        (0x2644) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_45_OFFSET        (0x26C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_46_OFFSET        (0x2744) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_47_OFFSET        (0x27C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_48_OFFSET        (0x2844) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_49_OFFSET        (0x28C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_50_OFFSET        (0x2944) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_51_OFFSET        (0x29C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_52_OFFSET        (0x2A44) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_53_OFFSET        (0x2AC4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_54_OFFSET        (0x2B44) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_55_OFFSET        (0x2BC4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_56_OFFSET        (0x2C44) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_57_OFFSET        (0x2CC4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_58_OFFSET        (0x2D44) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_59_OFFSET        (0x2DC4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_60_OFFSET        (0x2E44) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_61_OFFSET        (0x2EC4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_62_OFFSET        (0x2F44) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_63_OFFSET        (0x2FC4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_64_OFFSET        (0x3044) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_65_OFFSET        (0x30C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_66_OFFSET        (0x3144) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_67_OFFSET        (0x31C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_68_OFFSET        (0x3244) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_69_OFFSET        (0x32C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_70_OFFSET        (0x3344) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_71_OFFSET        (0x33C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_72_OFFSET        (0x3444) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_73_OFFSET        (0x34C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_74_OFFSET        (0x3544) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_75_OFFSET        (0x35C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_76_OFFSET        (0x3644) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_77_OFFSET        (0x36C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_78_OFFSET        (0x3744) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_79_OFFSET        (0x37C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_80_OFFSET        (0x3844) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_81_OFFSET        (0x38C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_82_OFFSET        (0x3944) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_83_OFFSET        (0x39C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_84_OFFSET        (0x3A44) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_85_OFFSET        (0x3AC4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_86_OFFSET        (0x3B44) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_87_OFFSET        (0x3BC4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_88_OFFSET        (0x3C44) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_89_OFFSET        (0x3CC4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_90_OFFSET        (0x3D44) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_91_OFFSET        (0x3DC4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_92_OFFSET        (0x3E44) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_93_OFFSET        (0x3EC4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_94_OFFSET        (0x3F44) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_95_OFFSET        (0x3FC4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_96_OFFSET        (0x4044) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_97_OFFSET        (0x40C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_98_OFFSET        (0x4144) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_99_OFFSET        (0x41C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_100_OFFSET       (0x4244) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_101_OFFSET       (0x42C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_102_OFFSET       (0x4344) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_103_OFFSET       (0x43C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_104_OFFSET       (0x4444) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_105_OFFSET       (0x44C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_106_OFFSET       (0x4544) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_107_OFFSET       (0x45C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_108_OFFSET       (0x4644) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_109_OFFSET       (0x46C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_110_OFFSET       (0x4744) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_111_OFFSET       (0x47C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_112_OFFSET       (0x4844) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_113_OFFSET       (0x48C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_114_OFFSET       (0x4944) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_115_OFFSET       (0x49C4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_116_OFFSET       (0x4A44) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_117_OFFSET       (0x4AC4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_118_OFFSET       (0x4B44) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_119_OFFSET       (0x4BC4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_120_OFFSET       (0x4C44) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_121_OFFSET       (0x4CC4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_122_OFFSET       (0x4D44) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_123_OFFSET       (0x4DC4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_124_OFFSET       (0x4E44) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_125_OFFSET       (0x4EC4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_126_OFFSET       (0x4F44) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_FLOW_LABEL_127_OFFSET       (0x4FC4) /* 过滤器流标签域配置寄存器 */
#define    HI_IPF_FLTN_ICMP_0_OFFSET               (0x1048) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_1_OFFSET               (0x10C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_2_OFFSET               (0x1148) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_3_OFFSET               (0x11C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_4_OFFSET               (0x1248) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_5_OFFSET               (0x12C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_6_OFFSET               (0x1348) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_7_OFFSET               (0x13C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_8_OFFSET               (0x1448) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_9_OFFSET               (0x14C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_10_OFFSET              (0x1548) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_11_OFFSET              (0x15C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_12_OFFSET              (0x1648) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_13_OFFSET              (0x16C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_14_OFFSET              (0x1748) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_15_OFFSET              (0x17C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_16_OFFSET              (0x1848) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_17_OFFSET              (0x18C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_18_OFFSET              (0x1948) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_19_OFFSET              (0x19C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_20_OFFSET              (0x1A48) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_21_OFFSET              (0x1AC8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_22_OFFSET              (0x1B48) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_23_OFFSET              (0x1BC8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_24_OFFSET              (0x1C48) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_25_OFFSET              (0x1CC8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_26_OFFSET              (0x1D48) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_27_OFFSET              (0x1DC8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_28_OFFSET              (0x1E48) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_29_OFFSET              (0x1EC8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_30_OFFSET              (0x1F48) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_31_OFFSET              (0x1FC8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_32_OFFSET              (0x2048) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_33_OFFSET              (0x20C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_34_OFFSET              (0x2148) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_35_OFFSET              (0x21C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_36_OFFSET              (0x2248) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_37_OFFSET              (0x22C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_38_OFFSET              (0x2348) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_39_OFFSET              (0x23C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_40_OFFSET              (0x2448) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_41_OFFSET              (0x24C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_42_OFFSET              (0x2548) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_43_OFFSET              (0x25C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_44_OFFSET              (0x2648) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_45_OFFSET              (0x26C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_46_OFFSET              (0x2748) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_47_OFFSET              (0x27C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_48_OFFSET              (0x2848) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_49_OFFSET              (0x28C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_50_OFFSET              (0x2948) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_51_OFFSET              (0x29C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_52_OFFSET              (0x2A48) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_53_OFFSET              (0x2AC8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_54_OFFSET              (0x2B48) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_55_OFFSET              (0x2BC8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_56_OFFSET              (0x2C48) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_57_OFFSET              (0x2CC8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_58_OFFSET              (0x2D48) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_59_OFFSET              (0x2DC8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_60_OFFSET              (0x2E48) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_61_OFFSET              (0x2EC8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_62_OFFSET              (0x2F48) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_63_OFFSET              (0x2FC8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_64_OFFSET              (0x3048) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_65_OFFSET              (0x30C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_66_OFFSET              (0x3148) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_67_OFFSET              (0x31C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_68_OFFSET              (0x3248) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_69_OFFSET              (0x32C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_70_OFFSET              (0x3348) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_71_OFFSET              (0x33C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_72_OFFSET              (0x3448) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_73_OFFSET              (0x34C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_74_OFFSET              (0x3548) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_75_OFFSET              (0x35C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_76_OFFSET              (0x3648) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_77_OFFSET              (0x36C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_78_OFFSET              (0x3748) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_79_OFFSET              (0x37C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_80_OFFSET              (0x3848) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_81_OFFSET              (0x38C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_82_OFFSET              (0x3948) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_83_OFFSET              (0x39C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_84_OFFSET              (0x3A48) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_85_OFFSET              (0x3AC8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_86_OFFSET              (0x3B48) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_87_OFFSET              (0x3BC8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_88_OFFSET              (0x3C48) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_89_OFFSET              (0x3CC8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_90_OFFSET              (0x3D48) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_91_OFFSET              (0x3DC8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_92_OFFSET              (0x3E48) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_93_OFFSET              (0x3EC8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_94_OFFSET              (0x3F48) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_95_OFFSET              (0x3FC8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_96_OFFSET              (0x4048) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_97_OFFSET              (0x40C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_98_OFFSET              (0x4148) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_99_OFFSET              (0x41C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_100_OFFSET             (0x4248) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_101_OFFSET             (0x42C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_102_OFFSET             (0x4348) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_103_OFFSET             (0x43C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_104_OFFSET             (0x4448) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_105_OFFSET             (0x44C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_106_OFFSET             (0x4548) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_107_OFFSET             (0x45C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_108_OFFSET             (0x4648) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_109_OFFSET             (0x46C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_110_OFFSET             (0x4748) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_111_OFFSET             (0x47C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_112_OFFSET             (0x4848) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_113_OFFSET             (0x48C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_114_OFFSET             (0x4948) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_115_OFFSET             (0x49C8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_116_OFFSET             (0x4A48) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_117_OFFSET             (0x4AC8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_118_OFFSET             (0x4B48) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_119_OFFSET             (0x4BC8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_120_OFFSET             (0x4C48) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_121_OFFSET             (0x4CC8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_122_OFFSET             (0x4D48) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_123_OFFSET             (0x4DC8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_124_OFFSET             (0x4E48) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_125_OFFSET             (0x4EC8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_126_OFFSET             (0x4F48) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_ICMP_127_OFFSET             (0x4FC8) /* 过滤器ICMP配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_0_OFFSET              (0x104C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_1_OFFSET              (0x10CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_2_OFFSET              (0x114C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_3_OFFSET              (0x11CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_4_OFFSET              (0x124C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_5_OFFSET              (0x12CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_6_OFFSET              (0x134C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_7_OFFSET              (0x13CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_8_OFFSET              (0x144C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_9_OFFSET              (0x14CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_10_OFFSET             (0x154C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_11_OFFSET             (0x15CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_12_OFFSET             (0x164C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_13_OFFSET             (0x16CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_14_OFFSET             (0x174C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_15_OFFSET             (0x17CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_16_OFFSET             (0x184C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_17_OFFSET             (0x18CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_18_OFFSET             (0x194C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_19_OFFSET             (0x19CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_20_OFFSET             (0x1A4C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_21_OFFSET             (0x1ACC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_22_OFFSET             (0x1B4C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_23_OFFSET             (0x1BCC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_24_OFFSET             (0x1C4C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_25_OFFSET             (0x1CCC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_26_OFFSET             (0x1D4C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_27_OFFSET             (0x1DCC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_28_OFFSET             (0x1E4C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_29_OFFSET             (0x1ECC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_30_OFFSET             (0x1F4C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_31_OFFSET             (0x1FCC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_32_OFFSET             (0x204C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_33_OFFSET             (0x20CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_34_OFFSET             (0x214C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_35_OFFSET             (0x21CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_36_OFFSET             (0x224C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_37_OFFSET             (0x22CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_38_OFFSET             (0x234C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_39_OFFSET             (0x23CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_40_OFFSET             (0x244C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_41_OFFSET             (0x24CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_42_OFFSET             (0x254C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_43_OFFSET             (0x25CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_44_OFFSET             (0x264C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_45_OFFSET             (0x26CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_46_OFFSET             (0x274C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_47_OFFSET             (0x27CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_48_OFFSET             (0x284C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_49_OFFSET             (0x28CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_50_OFFSET             (0x294C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_51_OFFSET             (0x29CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_52_OFFSET             (0x2A4C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_53_OFFSET             (0x2ACC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_54_OFFSET             (0x2B4C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_55_OFFSET             (0x2BCC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_56_OFFSET             (0x2C4C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_57_OFFSET             (0x2CCC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_58_OFFSET             (0x2D4C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_59_OFFSET             (0x2DCC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_60_OFFSET             (0x2E4C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_61_OFFSET             (0x2ECC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_62_OFFSET             (0x2F4C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_63_OFFSET             (0x2FCC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_64_OFFSET             (0x304C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_65_OFFSET             (0x30CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_66_OFFSET             (0x314C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_67_OFFSET             (0x31CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_68_OFFSET             (0x324C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_69_OFFSET             (0x32CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_70_OFFSET             (0x334C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_71_OFFSET             (0x33CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_72_OFFSET             (0x344C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_73_OFFSET             (0x34CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_74_OFFSET             (0x354C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_75_OFFSET             (0x35CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_76_OFFSET             (0x364C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_77_OFFSET             (0x36CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_78_OFFSET             (0x374C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_79_OFFSET             (0x37CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_80_OFFSET             (0x384C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_81_OFFSET             (0x38CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_82_OFFSET             (0x394C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_83_OFFSET             (0x39CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_84_OFFSET             (0x3A4C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_85_OFFSET             (0x3ACC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_86_OFFSET             (0x3B4C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_87_OFFSET             (0x3BCC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_88_OFFSET             (0x3C4C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_89_OFFSET             (0x3CCC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_90_OFFSET             (0x3D4C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_91_OFFSET             (0x3DCC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_92_OFFSET             (0x3E4C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_93_OFFSET             (0x3ECC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_94_OFFSET             (0x3F4C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_95_OFFSET             (0x3FCC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_96_OFFSET             (0x404C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_97_OFFSET             (0x40CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_98_OFFSET             (0x414C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_99_OFFSET             (0x41CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_100_OFFSET            (0x424C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_101_OFFSET            (0x42CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_102_OFFSET            (0x434C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_103_OFFSET            (0x43CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_104_OFFSET            (0x444C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_105_OFFSET            (0x44CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_106_OFFSET            (0x454C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_107_OFFSET            (0x45CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_108_OFFSET            (0x464C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_109_OFFSET            (0x46CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_110_OFFSET            (0x474C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_111_OFFSET            (0x47CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_112_OFFSET            (0x484C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_113_OFFSET            (0x48CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_114_OFFSET            (0x494C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_115_OFFSET            (0x49CC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_116_OFFSET            (0x4A4C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_117_OFFSET            (0x4ACC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_118_OFFSET            (0x4B4C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_119_OFFSET            (0x4BCC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_120_OFFSET            (0x4C4C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_121_OFFSET            (0x4CCC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_122_OFFSET            (0x4D4C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_123_OFFSET            (0x4DCC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_124_OFFSET            (0x4E4C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_125_OFFSET            (0x4ECC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_126_OFFSET            (0x4F4C) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_CHAIN_127_OFFSET            (0x4FCC) /* 过滤器链表域配置寄存器 */
#define    HI_IPF_FLTN_SPI_0_OFFSET                (0x1050) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_1_OFFSET                (0x10D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_2_OFFSET                (0x1150) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_3_OFFSET                (0x11D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_4_OFFSET                (0x1250) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_5_OFFSET                (0x12D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_6_OFFSET                (0x1350) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_7_OFFSET                (0x13D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_8_OFFSET                (0x1450) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_9_OFFSET                (0x14D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_10_OFFSET               (0x1550) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_11_OFFSET               (0x15D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_12_OFFSET               (0x1650) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_13_OFFSET               (0x16D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_14_OFFSET               (0x1750) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_15_OFFSET               (0x17D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_16_OFFSET               (0x1850) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_17_OFFSET               (0x18D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_18_OFFSET               (0x1950) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_19_OFFSET               (0x19D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_20_OFFSET               (0x1A50) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_21_OFFSET               (0x1AD0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_22_OFFSET               (0x1B50) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_23_OFFSET               (0x1BD0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_24_OFFSET               (0x1C50) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_25_OFFSET               (0x1CD0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_26_OFFSET               (0x1D50) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_27_OFFSET               (0x1DD0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_28_OFFSET               (0x1E50) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_29_OFFSET               (0x1ED0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_30_OFFSET               (0x1F50) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_31_OFFSET               (0x1FD0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_32_OFFSET               (0x2050) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_33_OFFSET               (0x20D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_34_OFFSET               (0x2150) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_35_OFFSET               (0x21D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_36_OFFSET               (0x2250) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_37_OFFSET               (0x22D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_38_OFFSET               (0x2350) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_39_OFFSET               (0x23D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_40_OFFSET               (0x2450) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_41_OFFSET               (0x24D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_42_OFFSET               (0x2550) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_43_OFFSET               (0x25D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_44_OFFSET               (0x2650) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_45_OFFSET               (0x26D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_46_OFFSET               (0x2750) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_47_OFFSET               (0x27D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_48_OFFSET               (0x2850) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_49_OFFSET               (0x28D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_50_OFFSET               (0x2950) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_51_OFFSET               (0x29D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_52_OFFSET               (0x2A50) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_53_OFFSET               (0x2AD0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_54_OFFSET               (0x2B50) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_55_OFFSET               (0x2BD0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_56_OFFSET               (0x2C50) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_57_OFFSET               (0x2CD0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_58_OFFSET               (0x2D50) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_59_OFFSET               (0x2DD0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_60_OFFSET               (0x2E50) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_61_OFFSET               (0x2ED0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_62_OFFSET               (0x2F50) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_63_OFFSET               (0x2FD0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_64_OFFSET               (0x3050) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_65_OFFSET               (0x30D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_66_OFFSET               (0x3150) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_67_OFFSET               (0x31D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_68_OFFSET               (0x3250) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_69_OFFSET               (0x32D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_70_OFFSET               (0x3350) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_71_OFFSET               (0x33D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_72_OFFSET               (0x3450) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_73_OFFSET               (0x34D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_74_OFFSET               (0x3550) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_75_OFFSET               (0x35D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_76_OFFSET               (0x3650) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_77_OFFSET               (0x36D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_78_OFFSET               (0x3750) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_79_OFFSET               (0x37D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_80_OFFSET               (0x3850) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_81_OFFSET               (0x38D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_82_OFFSET               (0x3950) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_83_OFFSET               (0x39D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_84_OFFSET               (0x3A50) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_85_OFFSET               (0x3AD0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_86_OFFSET               (0x3B50) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_87_OFFSET               (0x3BD0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_88_OFFSET               (0x3C50) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_89_OFFSET               (0x3CD0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_90_OFFSET               (0x3D50) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_91_OFFSET               (0x3DD0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_92_OFFSET               (0x3E50) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_93_OFFSET               (0x3ED0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_94_OFFSET               (0x3F50) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_95_OFFSET               (0x3FD0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_96_OFFSET               (0x4050) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_97_OFFSET               (0x40D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_98_OFFSET               (0x4150) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_99_OFFSET               (0x41D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_100_OFFSET              (0x4250) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_101_OFFSET              (0x42D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_102_OFFSET              (0x4350) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_103_OFFSET              (0x43D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_104_OFFSET              (0x4450) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_105_OFFSET              (0x44D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_106_OFFSET              (0x4550) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_107_OFFSET              (0x45D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_108_OFFSET              (0x4650) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_109_OFFSET              (0x46D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_110_OFFSET              (0x4750) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_111_OFFSET              (0x47D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_112_OFFSET              (0x4850) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_113_OFFSET              (0x48D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_114_OFFSET              (0x4950) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_115_OFFSET              (0x49D0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_116_OFFSET              (0x4A50) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_117_OFFSET              (0x4AD0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_118_OFFSET              (0x4B50) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_119_OFFSET              (0x4BD0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_120_OFFSET              (0x4C50) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_121_OFFSET              (0x4CD0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_122_OFFSET              (0x4D50) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_123_OFFSET              (0x4DD0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_124_OFFSET              (0x4E50) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_125_OFFSET              (0x4ED0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_126_OFFSET              (0x4F50) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_SPI_127_OFFSET              (0x4FD0) /* 过滤器SPI配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_0_OFFSET          (0x1054) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_1_OFFSET          (0x10D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_2_OFFSET          (0x1154) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_3_OFFSET          (0x11D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_4_OFFSET          (0x1254) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_5_OFFSET          (0x12D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_6_OFFSET          (0x1354) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_7_OFFSET          (0x13D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_8_OFFSET          (0x1454) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_9_OFFSET          (0x14D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_10_OFFSET         (0x1554) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_11_OFFSET         (0x15D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_12_OFFSET         (0x1654) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_13_OFFSET         (0x16D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_14_OFFSET         (0x1754) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_15_OFFSET         (0x17D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_16_OFFSET         (0x1854) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_17_OFFSET         (0x18D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_18_OFFSET         (0x1954) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_19_OFFSET         (0x19D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_20_OFFSET         (0x1A54) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_21_OFFSET         (0x1AD4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_22_OFFSET         (0x1B54) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_23_OFFSET         (0x1BD4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_24_OFFSET         (0x1C54) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_25_OFFSET         (0x1CD4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_26_OFFSET         (0x1D54) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_27_OFFSET         (0x1DD4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_28_OFFSET         (0x1E54) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_29_OFFSET         (0x1ED4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_30_OFFSET         (0x1F54) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_31_OFFSET         (0x1FD4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_32_OFFSET         (0x2054) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_33_OFFSET         (0x20D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_34_OFFSET         (0x2154) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_35_OFFSET         (0x21D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_36_OFFSET         (0x2254) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_37_OFFSET         (0x22D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_38_OFFSET         (0x2354) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_39_OFFSET         (0x23D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_40_OFFSET         (0x2454) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_41_OFFSET         (0x24D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_42_OFFSET         (0x2554) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_43_OFFSET         (0x25D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_44_OFFSET         (0x2654) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_45_OFFSET         (0x26D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_46_OFFSET         (0x2754) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_47_OFFSET         (0x27D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_48_OFFSET         (0x2854) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_49_OFFSET         (0x28D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_50_OFFSET         (0x2954) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_51_OFFSET         (0x29D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_52_OFFSET         (0x2A54) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_53_OFFSET         (0x2AD4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_54_OFFSET         (0x2B54) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_55_OFFSET         (0x2BD4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_56_OFFSET         (0x2C54) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_57_OFFSET         (0x2CD4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_58_OFFSET         (0x2D54) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_59_OFFSET         (0x2DD4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_60_OFFSET         (0x2E54) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_61_OFFSET         (0x2ED4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_62_OFFSET         (0x2F54) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_63_OFFSET         (0x2FD4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_64_OFFSET         (0x3054) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_65_OFFSET         (0x30D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_66_OFFSET         (0x3154) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_67_OFFSET         (0x31D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_68_OFFSET         (0x3254) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_69_OFFSET         (0x32D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_70_OFFSET         (0x3354) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_71_OFFSET         (0x33D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_72_OFFSET         (0x3454) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_73_OFFSET         (0x34D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_74_OFFSET         (0x3554) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_75_OFFSET         (0x35D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_76_OFFSET         (0x3654) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_77_OFFSET         (0x36D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_78_OFFSET         (0x3754) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_79_OFFSET         (0x37D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_80_OFFSET         (0x3854) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_81_OFFSET         (0x38D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_82_OFFSET         (0x3954) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_83_OFFSET         (0x39D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_84_OFFSET         (0x3A54) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_85_OFFSET         (0x3AD4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_86_OFFSET         (0x3B54) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_87_OFFSET         (0x3BD4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_88_OFFSET         (0x3C54) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_89_OFFSET         (0x3CD4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_90_OFFSET         (0x3D54) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_91_OFFSET         (0x3DD4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_92_OFFSET         (0x3E54) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_93_OFFSET         (0x3ED4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_94_OFFSET         (0x3F54) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_95_OFFSET         (0x3FD4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_96_OFFSET         (0x4054) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_97_OFFSET         (0x40D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_98_OFFSET         (0x4154) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_99_OFFSET         (0x41D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_100_OFFSET        (0x4254) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_101_OFFSET        (0x42D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_102_OFFSET        (0x4354) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_103_OFFSET        (0x43D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_104_OFFSET        (0x4454) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_105_OFFSET        (0x44D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_106_OFFSET        (0x4554) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_107_OFFSET        (0x45D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_108_OFFSET        (0x4654) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_109_OFFSET        (0x46D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_110_OFFSET        (0x4754) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_111_OFFSET        (0x47D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_112_OFFSET        (0x4854) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_113_OFFSET        (0x48D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_114_OFFSET        (0x4954) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_115_OFFSET        (0x49D4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_116_OFFSET        (0x4A54) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_117_OFFSET        (0x4AD4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_118_OFFSET        (0x4B54) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_119_OFFSET        (0x4BD4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_120_OFFSET        (0x4C54) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_121_OFFSET        (0x4CD4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_122_OFFSET        (0x4D54) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_123_OFFSET        (0x4DD4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_124_OFFSET        (0x4E54) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_125_OFFSET        (0x4ED4) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_126_OFFSET        (0x4F54) /* 过滤器规则控制配置寄存器 */
#define    HI_IPF_FLTN_RULE_CTRL_127_OFFSET        (0x4FD4) /* 过滤器规则控制配置寄存器 */

#define	HI_IPF_MST_REGION_START_OFFSET(n)			(HI_IPF32_MST_REGION0_START_OFFSET+0x8*n)
#define HI_IPF_MST_REGION_END_OFFSET(n)				(HI_IPF32_MST_REGION0_END_OFFSET+0x8*n)
#define HI_IPF_MST_REGION_SIDEBAND_OFFSET(n)		(HI_IPF32_MST_REGION0_SIDEBAND_OFFSET+0x4*n)
#define HI_IPF_FLTN_LOCAL_ADDR0_OFFSET(n)           (HI_IPF_FLTN_LOCAL_ADDR0_0_OFFSET+0x80*n)
#define HI_IPF_FLTN_LOCAL_ADDR1_OFFSET(n)           (HI_IPF_FLTN_LOCAL_ADDR1_0_OFFSET+0x80*n)
#define HI_IPF_FLTN_LOCAL_ADDR2_OFFSET(n)           (HI_IPF_FLTN_LOCAL_ADDR2_0_OFFSET+0x80*n)
#define HI_IPF_FLTN_LOCAL_ADDR3_OFFSET(n)           (HI_IPF_FLTN_LOCAL_ADDR3_0_OFFSET+0x80*n)
#define HI_IPF_FLTN_REMOTE_ADDR0_OFFSET(n)          (HI_IPF_FLTN_REMOTE_ADDR0_0_OFFSET+0x80*n)
#define HI_IPF_FLTN_REMOTE_ADDR1_OFFSET(n)          (HI_IPF_FLTN_REMOTE_ADDR1_0_OFFSET+0x80*n)
#define HI_IPF_FLTN_REMOTE_ADDR2_OFFSET(n)          (HI_IPF_FLTN_REMOTE_ADDR2_0_OFFSET+0x80*n)
#define HI_IPF_FLTN_REMOTE_ADDR3_OFFSET(n)          (HI_IPF_FLTN_REMOTE_ADDR3_0_OFFSET+0x80*n)
#define HI_IPF_FLTN_REMOTE_ADDR0_MASK_OFFSET(n)     (HI_IPF_FLTN_REMOTE_ADDR0_MASK_0_OFFSET+0x80*n)
#define HI_IPF_FLTN_REMOTE_ADDR1_MASK_OFFSET(n)     (HI_IPF_FLTN_REMOTE_ADDR1_MASK_0_OFFSET+0x80*n)
#define HI_IPF_FLTN_REMOTE_ADDR2_MASK_OFFSET(n)     (HI_IPF_FLTN_REMOTE_ADDR2_MASK_0_OFFSET+0x80*n)
#define HI_IPF_FLTN_REMOTE_ADDR3_MASK_OFFSET(n)     (HI_IPF_FLTN_REMOTE_ADDR3_MASK_0_OFFSET+0x80*n)
#define HI_IPF_FLTN_LOCAL_PORT_OFFSET(n)            (HI_IPF_FLTN_LOCAL_PORT_0_OFFSET+0x80*n)
#define HI_IPF_FLTN_REMOTE_PORT_OFFSET(n)           (HI_IPF_FLTN_REMOTE_PORT_0_OFFSET+0x80*n)
#define HI_IPF_FLTN_TRAFFIC_CLASS_OFFSET(n)         (HI_IPF_FLTN_TRAFFIC_CLASS_0_OFFSET+0x80*n)
#define HI_IPF_FLTN_LADD_MASK_OFFSET(n)             (HI_IPF_FLTN_LADD_MASK_0_OFFSET+0x80*n)
#define HI_IPF_FLTN_NEXT_HEADER_OFFSET(n)           (HI_IPF_FLTN_NEXT_HEADER_0_OFFSET+0x80*n)
#define HI_IPF_FLTN_FLOW_LABEL_OFFSET(n)            (HI_IPF_FLTN_FLOW_LABEL_0_OFFSET+0x80*n)
#define HI_IPF_FLTN_ICMP_OFFSET(n)                  (HI_IPF_FLTN_ICMP_0_OFFSET+0x80*n)
#define HI_IPF_FLTN_CHAIN_OFFSET(n)                 (HI_IPF_FLTN_CHAIN_0_OFFSET+0x80*n)
#define HI_IPF_FLTN_SPI_OFFSET(n)                   (HI_IPF_FLTN_SPI_0_OFFSET+0x80*n)
#define HI_IPF_FLTN_RULE_CTRL_OFFSET(n)             (HI_IPF_FLTN_RULE_CTRL_0_OFFSET+0x80*n)

enum reg_index{
	EF_BADDR,
	CH0_BDQ_BADDR,
	CH0_BDQ_SIZE, 
	CH0_BDQ_WPTR, 
	CH0_BDQ_RPTR, 
	CH0_BDQ_WADDR,
	CH0_BDQ_RADDR,
	CH0_RDQ_BADDR,
	CH0_RDQ_SIZE, 
	CH0_RDQ_WPTR, 
	CH0_RDQ_RPTR, 
	CH0_RDQ_WADDR,
	CH0_RDQ_RADDR,
	CH0_DQ_DEPTH, 
	CH1_CTRL,     
	CH1_STATE,    
	CH1_BDQ_BADDR,
	CH1_BDQ_SIZE, 
	CH1_BDQ_WPTR, 
	CH1_BDQ_RPTR, 
	CH1_BDQ_WADDR,
	CH1_BDQ_RADDR,
	CH1_RDQ_BADDR,
	CH1_RDQ_SIZE, 
	CH1_RDQ_WPTR, 
	CH1_RDQ_RPTR, 
	CH1_RDQ_WADDR,
	CH1_RDQ_RADDR,
	CH1_DQ_DEPTH, 
	CH0_ADQ_CTRL, 
	CH0_ADQ0_BASE,
	CH0_ADQ0_STAT,
	CH0_ADQ0_WPTR,
	CH0_ADQ0_RPTR,
	CH0_ADQ1_BASE,
	CH0_ADQ1_STAT,
	CH0_ADQ1_WPTR,
	CH0_ADQ1_RPTR,
	CH1_ADQ_CTRL, 
	CH1_ADQ0_BASE,
	CH1_ADQ0_STAT,
	CH1_ADQ0_WPTR,
	CH1_ADQ0_RPTR,
	CH1_ADQ1_BASE,
	CH1_ADQ1_STAT,
	CH1_ADQ1_WPTR,
	CH1_ADQ1_RPTR,
};

#ifndef __ASSEMBLY__

/********************************************************************************/
/*    IPF 寄存器定义（项目名_模块名_寄存器名_T)        */
/********************************************************************************/
typedef union
{
    struct
    {
        unsigned int    ipf_srst                   : 1; /* [0..0] 全局软复位寄存器。0：不复位；1：复位。高电平有效。只复位逻辑不复位配置寄存器.复位可能不能立即生效，由复位状态寄存器指示复位是否成功，复位成功后写0解除软复位。 */
        unsigned int    reserved                   : 31; /* [31..1] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_SRST_T;    /* IPF复位控制寄存器 */

typedef union
{
    struct
    {
        unsigned int    ipf_srst_state             : 1; /* [0..0] 复位状态指示寄存器。0：未处于复位状态；1：处于复位状态，表示复位成功。当逻辑处于复位状态软件可解除复位。 */
        unsigned int    reserved                   : 31; /* [31..1] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_SRST_STATE_T;    /* IPF复位状态寄存器 */

typedef union
{
    struct
    {
        unsigned int    ul_en                      : 1; /* [0..0] UL通道使能配置寄存器.0:通道关闭1:通道使能写1使能通道，立即生效.写0关闭通道,若此时通道busy，则不能立即关闭，直到通道idle后才能关闭. */
        unsigned int    dl_en                      : 1; /* [1..1] DL通道使能配置寄存器.0:通道关闭1:通道使能写1使能通道，立即生效.写0关闭通道,若此时通道busy，则不能立即关闭，直到通道idle后才能关闭. */
        unsigned int    reserved                   : 30; /* [31..2] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH_EN_T;    /* IPF 通道使能配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    ul_en_state                : 1; /* [0..0] UL通道使能状态寄存器.0:通道已关闭1:通道打开 */
        unsigned int    dl_en_state                : 1; /* [1..1] DL通道使能状态寄存器.0:通道已关闭1:通道打开 */
        unsigned int    reserved                   : 30; /* [31..2] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_EN_STATE_T;    /* IPF 通道使能状态寄存器 */

typedef union
{
    struct
    {
        unsigned int    ipf_sysclk_sel0            : 1; /* [0..0] ipf模块系统时钟门控使能。0:时钟常开1:自动门控  */
        unsigned int    ipf_sysclk_sel1            : 1; /* [1..1] ipf模块系统时钟门控使能。0:时钟常开1:自动门控  */
        unsigned int    ipf_busclk_sel             : 1; /* [2..2] ipf模块总线时钟门控使能。0:时钟常开1:自动门控 */
        unsigned int    reserved_1                 : 5; /* [7..3] 保留。 */
        unsigned int    ipf_ram0clk_sel            : 1; /* [8..8] ipf模块单口RAM时钟门控使能。0:时钟常开1:自动门控 */
        unsigned int    ipf_ram1clk_sel            : 1; /* [9..9] ipf模块双口RAM时钟门控使能。0:时钟常开1:自动门控 */
        unsigned int    reserved_0                 : 22; /* [31..10] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_GATE_T;    /* IPF时钟门控配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    filter_seq                 : 1; /* [0..0] 过滤器配置顺序指示寄存器.0:过滤器配置顺序排序1:过滤器配置乱序排序 */
        unsigned int    flt_addr_reverse           : 1; /* [1..1] 0：表示过滤器中的地址寄存器按大端排列1：表示过滤器中的地址寄存器按小端排列 */
        unsigned int    sp_cfg                     : 1; /* [2..2] 0:SP模式下DL优先级高1;SP模式下UL优先级高 */
        unsigned int    sp_wrr_sel                 : 1; /* [3..3] 0:WRR模式调度1;SP模式调度 */
        unsigned int    max_burst_len              : 2; /* [5..4] BURST最大长度配置寄存器2'b00:BURST162'b01:BURST82'b10,2'b11:BURST4 */
        unsigned int    ipv6_nh_sel                : 1; /* [6..6] IPV6 参与匹配NextNeader选择控制信号0:解析的上层报文对应的NextHeader或不识别的NextHeader(注意AH和ESP共存时NextHeader对应的时选择之后的NextHeader)1:基本头中的NextNeader */
        unsigned int    ah_esp_sel                 : 1; /* [7..7] 如果AH和ESP同时存在且均配置为参与匹配,SPI选择控制信号0:选择ESP对应的SPI参与匹配1:选择AH对应的SPI参与匹配 */
        unsigned int    ah_disable                 : 1; /* [8..8] AH SPI是否参与匹配控制信号0:参与匹配1:不参与匹配 */
        unsigned int    esp_disable                : 1; /* [9..9] ESP SPI是否参与匹配控制信号0:参与匹配1:不参与匹配 */
        unsigned int    mfc_en                     : 1; /* [10..10] 单通道多过滤器链使能0：每个通道只能支持一个过滤器链，链表头索引静态配置；1：每个通道最多支持16个过滤器链，链表头索引由BD动态配置； */
        unsigned int    mm_en                      : 1; /* [11..11] 单通道动态模式使能0：每个通道模式由通道控制寄存器静态配置；1：每个通道模式由BD中mode标志动态配置； */
        unsigned int    add_rep                    : 1; /* [12..12] 下行通道AD上报选择。0：表示RD上报目的地址使用AD的第二个字；1：表示RD上报目的地址使用AD的第一个字； */
        unsigned int    schedule_strategy          : 1; /* [13..13] 上下行通道调度策略选择。0：表示上下行通道根据BDQ是否为空进行调度；1：表示上下行通道根据ADQ、BDQ是否为空，RDQ是否为满进行调度。 */
        unsigned int    cd_en_sel                  : 1; /* [14..14] 上下行通道CD使能来源选择。0：表示CD使能由寄存器静态配置；1：表示CD使能由BD中（第3bit）cd_en标志动态配置。 */
        unsigned int    reserved                   : 17; /* [31..15] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_CTRL_T;    /* IPF全局控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    ipf_wr_ch0_id              : 4; /* [3..0] AXI写通道0 ID */
        unsigned int    ipf_wr_ch1_id              : 4; /* [7..4] AXI写通道1 ID */
        unsigned int    ipf_rd_ch0_id              : 4; /* [11..8] AXI读通道0 ID */
        unsigned int    ipf_rd_ch1_id              : 4; /* [15..12] AXI读通道1 ID */
        unsigned int    ipf_wr_ch0_pri             : 3; /* [18..16] AXI写通道0优先级 */
        unsigned int    reserved_3                 : 1; /* [19..19] 保留 */
        unsigned int    ipf_wr_ch1_pri             : 3; /* [22..20] AXI写通道1优先级 */
        unsigned int    reserved_2                 : 1; /* [23..23] 保留 */
        unsigned int    ipf_rd_ch0_pri             : 3; /* [26..24] AXI读通道0优先级 */
        unsigned int    reserved_1                 : 1; /* [27..27] 保留 */
        unsigned int    ipf_rd_ch1_pri             : 3; /* [30..28] AXI读通道1优先级 */
        unsigned int    reserved_0                 : 1; /* [31..31] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_DMA_CTRL0_T;    /* IPF DMA控制寄存器0 */

typedef union
{
    struct
    {
        unsigned int    outstanding_w              : 1; /* [0..0] 写通道outstanding使能。0：AXI master没有写outstanding操作；1：AXI master有写outstanding操作，outstanding深度为4； */
        unsigned int    outstanding_r              : 1; /* [1..1] 读通道outstanding使能。0：AXI master没有读outstanding操作；1：AXI master有读outstanding操作，outstanding深度为4； */
        unsigned int    reserved                   : 30; /* [31..2] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_DMA_CTRL1_T;    /* IPF DMA控制寄存器1 */

typedef union
{
    struct
    {
        unsigned int    ipf_version                : 32; /* [31..0] IPF版本寄存器，只读。为ASCII编码，表示150a，为IPF的第六个版本。第五版（Chicago），增加FAMA特性。第六版（Boston），提升性能，描述符修改。 */
    } bits;
    unsigned int    u32;
}HI_IPF_VERSION_T;    /* IPF版本寄存器 */

typedef union
{
    struct
    {
        unsigned int    ul_rpt_int0                : 1; /* [0..0] 上行结果上报中断0 */
        unsigned int    ul_timeout_int0            : 1; /* [1..1] 上行结果上报超时中断0 */
        unsigned int    ul_disable_end_int0        : 1; /* [2..2] 上行通道关闭完成中断0 */
        unsigned int    ul_idle_cfg_bd_int0        : 1; /* [3..3] 上行通道IDLE期间软件配置BD指示中断0 */
        unsigned int    ul_trail_cfg_bd_int0       : 1; /* [4..4] 上行通道关闭但BD没有处理完期间软件继续配置BD指示中断0 */
        unsigned int    ul_noidle_clrptr_int0      : 1; /* [5..5] 上行非IDLE态清指针指示中断0 */
        unsigned int    ul_rdq_downoverflow_int0   : 1; /* [6..6] 上行RDQ下溢中断0 */
        unsigned int    ul_bdq_upoverflow_int0     : 1; /* [7..7] 上行BDQ上溢中断0 */
        unsigned int    ul_rdq_full_int0           : 1; /* [8..8] 上行RDQ满中断0 */
        unsigned int    ul_bdq_epty_int0           : 1; /* [9..9] 上行BDQ空中断0 */
        unsigned int    ul_adq0_epty_int0          : 1; /* [10..10] 上行ADQ0空中断0 */
        unsigned int    ul_adq1_epty_int0          : 1; /* [11..11] 上行ADQ1空中断0 */
        unsigned int    ul_pkt_cnt_overflow_int0   : 1; /* [12..12] 上行数据包计数器溢出指示中断0 */
        unsigned int    reserved_1                 : 3; /* [15..13] 保留 */
        unsigned int    dl_rpt_int0                : 1; /* [16..16] 下行结果上报中断0 */
        unsigned int    dl_timeout_int0            : 1; /* [17..17] 下行结果上报超时中断0 */
        unsigned int    dl_disable_end_int0        : 1; /* [18..18] 下行通道关闭完成中断0 */
        unsigned int    dl_idle_cfg_bd_int0        : 1; /* [19..19] 下行通道IDLE期间软件配置BD指示中断0 */
        unsigned int    dl_trail_cfg_bd_int0       : 1; /* [20..20] 下行通道关闭但BD没有处理完期间软件继续配置BD指示中断0 */
        unsigned int    dl_noidle_clrptr_int0      : 1; /* [21..21] 下行非IDLE态清指针指示中断0 */
        unsigned int    dl_rdq_downoverflow_int0   : 1; /* [22..22] 下行RDQ下溢中断0 */
        unsigned int    dl_bdq_upoverflow_int0     : 1; /* [23..23] 下行BDQ上溢中断0 */
        unsigned int    dl_rdq_full_int0           : 1; /* [24..24] 下行RDQ满中断0 */
        unsigned int    dl_bdq_epty_int0           : 1; /* [25..25] 下行BDQ空中断0 */
        unsigned int    dl_adq0_epty_int0          : 1; /* [26..26] 下行ADQ0空中断0 */
        unsigned int    dl_adq1_epty_int0          : 1; /* [27..27] 下行ADQ1空中断0 */
        unsigned int    dl_pkt_cnt_overflow_int0   : 1; /* [28..28] 下行数据包计数器溢出指示中断0 */
        unsigned int    reserved_0                 : 2; /* [30..29] 保留 */
        unsigned int    timer_cnt_eq0_int0         : 1; /* [31..31] IPF TIMER计数完成标志中断0 */
    } bits;
    unsigned int    u32;
}HI_IPF_INT0_T;    /* 中断上报寄存器0 */

typedef union
{
    struct
    {
        unsigned int    ul_rpt_int1                : 1; /* [0..0] 上行结果上报中断1 */
        unsigned int    ul_timeout_int1            : 1; /* [1..1] 上行结果上报超时中断1 */
        unsigned int    ul_disable_end_int1        : 1; /* [2..2] 上行通道关闭完成中断1 */
        unsigned int    ul_idle_cfg_bd_int1        : 1; /* [3..3] 上行通道IDLE期间软件配置BD指示中断1 */
        unsigned int    ul_trail_cfg_bd_int1       : 1; /* [4..4] 上行通道关闭但BD没有处理完期间软件继续配置BD指示中断1 */
        unsigned int    ul_noidle_clrptr_int1      : 1; /* [5..5] 上行非IDLE态清指针指示中断1 */
        unsigned int    ul_rdq_downoverflow_int1   : 1; /* [6..6] 上行RDQ下溢中断1 */
        unsigned int    ul_bdq_upoverflow_int1     : 1; /* [7..7] 上行BDQ上溢中断1 */
        unsigned int    ul_rdq_full_int1           : 1; /* [8..8] 上行RDQ满中断1 */
        unsigned int    ul_bdq_epty_int1           : 1; /* [9..9] 上行BDQ空中断1 */
        unsigned int    ul_adq0_epty_int1          : 1; /* [10..10] 上行ADQ0空中断1 */
        unsigned int    ul_adq1_epty_int1          : 1; /* [11..11] 上行ADQ1空中断1 */
        unsigned int    ul_pkt_cnt_overflow_int1   : 1; /* [12..12] 上行数据包计数器溢出指示中断1 */
        unsigned int    reserved_1                 : 3; /* [15..13] 保留 */
        unsigned int    dl_rpt_int1                : 1; /* [16..16] 下行结果上报中断1 */
        unsigned int    dl_timeout_int1            : 1; /* [17..17] 下行结果上报超时中断1 */
        unsigned int    dl_disable_end_int1        : 1; /* [18..18] 下行通道关闭完成中断1 */
        unsigned int    dl_idle_cfg_bd_int1        : 1; /* [19..19] 下行通道IDLE期间软件配置BD指示中断1 */
        unsigned int    dl_trail_cfg_bd_int1       : 1; /* [20..20] 下行通道关闭但BD没有处理完期间软件继续配置BD指示中断1 */
        unsigned int    dl_noidle_clrptr_int1      : 1; /* [21..21] 下行非IDLE态清指针指示中断1 */
        unsigned int    dl_rdq_downoverflow_int1   : 1; /* [22..22] 下行RDQ下溢中断1 */
        unsigned int    dl_bdq_upoverflow_int1     : 1; /* [23..23] 下行BDQ上溢中断1 */
        unsigned int    dl_rdq_full_int1           : 1; /* [24..24] 下行RDQ满中断1 */
        unsigned int    dl_bdq_epty_int1           : 1; /* [25..25] 下行BDQ空中断1 */
        unsigned int    dl_adq0_epty_int1          : 1; /* [26..26] 下行ADQ0空中断1 */
        unsigned int    dl_adq1_epty_int1          : 1; /* [27..27] 下行ADQ1空中断1 */
        unsigned int    dl_pkt_cnt_overflow_int1   : 1; /* [28..28] 下行数据包计数器溢出指示中断1 */
        unsigned int    reserved_0                 : 2; /* [30..29] 保留 */
        unsigned int    timer_cnt_eq0_int1         : 1; /* [31..31] IPF TIMER计数完成标志中断0 */
    } bits;
    unsigned int    u32;
}HI_IPF_INT1_T;    /* 中断上报寄存器1 */

typedef union
{
    struct
    {
        unsigned int    ul_rpt_mask0               : 1; /* [0..0] 上行结果上报中断屏蔽寄存器0 */
        unsigned int    ul_timeout_mask0           : 1; /* [1..1] 上行结果上报超时中断屏蔽寄存器0 */
        unsigned int    ul_disable_end_mask0       : 1; /* [2..2] 上行通道关闭完成中断屏蔽寄存器0 */
        unsigned int    ul_idle_cfg_bd_mask0       : 1; /* [3..3] 上行通道IDLE期间软件配置BD指示中断屏蔽寄存器0 */
        unsigned int    ul_trail_cfg_bd_mask0      : 1; /* [4..4] 上行通道关闭但BD没有处理完期间软件继续配置BD指示中断屏蔽寄存器0 */
        unsigned int    ul_noidle_clrptr_mask0     : 1; /* [5..5] 上行非IDLE态清指针指示中断屏蔽寄存器0 */
        unsigned int    ul_rdq_downoverflow_mask0  : 1; /* [6..6] 上行RDQ下溢中断屏蔽寄存器0 */
        unsigned int    ul_bdq_upoverflow_mask0    : 1; /* [7..7] 上行BDQ上溢中断屏蔽寄存器0 */
        unsigned int    ul_rdq_full_mask0          : 1; /* [8..8] 上行RDQ满中断屏蔽寄存器0 */
        unsigned int    ul_bdq_epty_mask0          : 1; /* [9..9] 上行BDQ空中断屏蔽寄存器0 */
        unsigned int    ul_adq0_epty_mask0         : 1; /* [10..10] 上行ADQ0空中断屏蔽寄存器0 */
        unsigned int    ul_adq1_epty_mask0         : 1; /* [11..11] 上行ADQ1空中断屏蔽寄存器0 */
        unsigned int    ul_pkt_cnt_overflow_mask0  : 1; /* [12..12] 上行数据包计数器溢出中断屏蔽寄存器0 */
        unsigned int    reserved_1                 : 3; /* [15..13] 保留 */
        unsigned int    dl_rpt_mask0               : 1; /* [16..16] 下行结果上报中断屏蔽寄存器0 */
        unsigned int    dl_timeout_mask0           : 1; /* [17..17] 下行结果上报超时中断屏蔽寄存器0 */
        unsigned int    dl_disable_end_mask0       : 1; /* [18..18] 下行通道关闭完成中断屏蔽寄存器0 */
        unsigned int    dl_idle_cfg_bd_mask0       : 1; /* [19..19] 下行通道IDLE期间软件配置BD指示中断屏蔽寄存器0 */
        unsigned int    dl_trail_cfg_bd_mask0      : 1; /* [20..20] 下行通道关闭但BD没有处理完期间软件继续配置BD指示中断屏蔽寄存器0 */
        unsigned int    dl_noidle_clrptr_mask0     : 1; /* [21..21] 下行非IDLE态清指针指示中断屏蔽寄存器0 */
        unsigned int    dl_rdq_downoverflow_mask0  : 1; /* [22..22] 下行RDQ下溢中断屏蔽寄存器0 */
        unsigned int    dl_bdq_upoverflow_mask0    : 1; /* [23..23] 下行BDQ上溢中断屏蔽寄存器0 */
        unsigned int    dl_rdq_full_mask0          : 1; /* [24..24] 下行RDQ满中断屏蔽寄存器0 */
        unsigned int    dl_bdq_epty_mask0          : 1; /* [25..25] 下行BDQ空中断屏蔽寄存器0 */
        unsigned int    dl_adq0_epty_mask0         : 1; /* [26..26] 下行ADQ0空中断屏蔽寄存器0 */
        unsigned int    dl_adq1_epty_mask0         : 1; /* [27..27] 下行ADQ1空中断屏蔽寄存器0。0 */
        unsigned int    dl_pkt_cnt_overflow_mask0  : 1; /* [28..28] 下行数据包计数器溢出中断屏蔽寄存器0 */
        unsigned int    reserved_0                 : 2; /* [30..29] 保留 */
        unsigned int    timer_cnt_eq0_mask0        : 1; /* [31..31] IPF TIMER计数完成中断屏蔽寄存器0 */
    } bits;
    unsigned int    u32;
}HI_IPF_INT_MASK0_T;    /* 中断屏蔽寄存器0 */

typedef union
{
    struct
    {
        unsigned int    ul_rpt_mask1               : 1; /* [0..0] 上行结果上报中断屏蔽寄存器1 */
        unsigned int    ul_timeout_mask1           : 1; /* [1..1] 上行结果上报超时中断屏蔽寄存器1 */
        unsigned int    ul_disable_end_mask1       : 1; /* [2..2] 上行通道关闭完成中断屏蔽寄存器1 */
        unsigned int    ul_idle_cfg_bd_mask1       : 1; /* [3..3] 上行通道IDLE期间软件配置BD指示中断屏蔽寄存器1 */
        unsigned int    ul_trail_cfg_bd_mask1      : 1; /* [4..4] 上行通道关闭但BD没有处理完期间软件继续配置BD指示中断屏蔽寄存器1 */
        unsigned int    ul_noidle_clrptr_mask1     : 1; /* [5..5] 上行非IDLE态清指针指示中断屏蔽寄存器1 */
        unsigned int    ul_rdq_downoverflow_mask1  : 1; /* [6..6] 上行RDQ下溢中断屏蔽寄存器1 */
        unsigned int    ul_bdq_upoverflow_mask1    : 1; /* [7..7] 上行BDQ上溢中断屏蔽寄存器1 */
        unsigned int    ul_rdq_full_mask1          : 1; /* [8..8] 上行RDQ满中断屏蔽寄存器1 */
        unsigned int    ul_bdq_epty_mask1          : 1; /* [9..9] 上行BDQ空中断屏蔽寄存器1 */
        unsigned int    ul_adq0_epty_mask1         : 1; /* [10..10] 上行ADQ0空中断屏蔽寄存器1 */
        unsigned int    ul_adq1_epty_mask1         : 1; /* [11..11] 上行ADQ1空中断屏蔽寄存器1 */
        unsigned int    ul_pkt_cnt_overflow_mask1  : 1; /* [12..12] 上行数据包计数器溢出中断屏蔽寄存器1 */
        unsigned int    reserved_1                 : 3; /* [15..13] 保留 */
        unsigned int    dl_rpt_mask1               : 1; /* [16..16] 下行结果上报中断屏蔽寄存器1 */
        unsigned int    dl_timeout_mask1           : 1; /* [17..17] 下行结果上报超时中断屏蔽寄存器1 */
        unsigned int    dl_disable_end_mask1       : 1; /* [18..18] 下行通道关闭完成中断屏蔽寄存器1 */
        unsigned int    dl_idle_cfg_bd_mask1       : 1; /* [19..19] 下行通道IDLE期间软件配置BD指示中断屏蔽寄存器1 */
        unsigned int    dl_trail_cfg_bd_mask1      : 1; /* [20..20] 下行通道关闭但BD没有处理完期间软件继续配置BD指示中断屏蔽寄存器1 */
        unsigned int    dl_noidle_clrptr_mask1     : 1; /* [21..21] 下行非IDLE态清指针指示中断屏蔽寄存器1 */
        unsigned int    dl_rdq_downoverflow_mask1  : 1; /* [22..22] 下行RDQ下溢中断屏蔽寄存器1 */
        unsigned int    dl_bdq_upoverflow_mask1    : 1; /* [23..23] 下行BDQ上溢中断屏蔽寄存器1 */
        unsigned int    dl_rdq_full_mask1          : 1; /* [24..24] 下行RDQ满中断屏蔽寄存器1 */
        unsigned int    dl_bdq_epty_mask1          : 1; /* [25..25] 下行BDQ空中断屏蔽寄存器1 */
        unsigned int    dl_adq0_epty_mask1         : 1; /* [26..26] 下行ADQ0空中断屏蔽寄存器1 */
        unsigned int    dl_adq1_epty_mask1         : 1; /* [27..27] 下行ADQ1空中断屏蔽寄存器1 */
        unsigned int    dl_pkt_cnt_overflow_mask1  : 1; /* [28..28] 下行数据包计数器溢出中断屏蔽寄存器1 */
        unsigned int    reserved_0                 : 2; /* [30..29] 保留 */
        unsigned int    timer_cnt_eq0_mask1        : 1; /* [31..31] IPF TIMER计数完成中断屏蔽寄存器1 */
    } bits;
    unsigned int    u32;
}HI_IPF_INT_MASK1_T;    /* 中断屏蔽寄存器1 */

typedef union
{
    struct
    {
        unsigned int    ul_rpt                     : 1; /* [0..0] 上行结果上报指示 */
        unsigned int    ul_timeout                 : 1; /* [1..1] 上行结果上报超时指示 */
        unsigned int    ul_disable_end             : 1; /* [2..2] 上行通道关闭完成指示 */
        unsigned int    ul_idle_cfg_bd             : 1; /* [3..3] 上行通道IDLE期间软件配置BD指示 */
        unsigned int    ul_trail_cfg_bd            : 1; /* [4..4] 上行通道关闭但BD没有处理完期间软件继续配置BD指示 */
        unsigned int    ul_noidle_clrptr           : 1; /* [5..5] 上行非IDLE态清指针指示 */
        unsigned int    ul_rdq_downoverflow        : 1; /* [6..6] 上行RDQ下溢指示 */
        unsigned int    ul_bdq_upoverflow          : 1; /* [7..7] 上行BDQ上溢指示 */
        unsigned int    ul_rdq_full                : 1; /* [8..8] 上行RDQ满指示 */
        unsigned int    ul_bdq_epty                : 1; /* [9..9] 上行通道BDQ空指示 */
        unsigned int    ul_adq0_epty               : 1; /* [10..10] 上行通道ADQ0空指示 */
        unsigned int    ul_adq1_epty               : 1; /* [11..11] 上行通道ADQ1空指示 */
        unsigned int    ul_pkt_cnt_overflow        : 1; /* [12..12] 上行数据包计数器溢出指示 */
        unsigned int    reserved_1                 : 3; /* [15..13] 保留 */
        unsigned int    dl_rpt                     : 1; /* [16..16] 下行结果上报指示 */
        unsigned int    dl_timeout                 : 1; /* [17..17] 下行结果上报超时指示 */
        unsigned int    dl_disable_end             : 1; /* [18..18] 下行通道关闭完成指示 */
        unsigned int    dl_idle_cfg_bd             : 1; /* [19..19] 下行通道IDLE期间软件配置BD指示 */
        unsigned int    dl_trail_cfg_bd            : 1; /* [20..20] 下行通道关闭但BD没有处理完期间软件继续配置BD指示 */
        unsigned int    dl_noidle_clrptr           : 1; /* [21..21] 下行非IDLE态清指针指示 */
        unsigned int    dl_rdq_downoverflow        : 1; /* [22..22] 下行RDQ下溢指示 */
        unsigned int    dl_bdq_upoverflow          : 1; /* [23..23] 下行BDQ上溢指示 */
        unsigned int    dl_rdq_full                : 1; /* [24..24] 下行RDQ满指示 */
        unsigned int    dl_bdq_epty                : 1; /* [25..25] 下行通道BDQ空指示 */
        unsigned int    dl_adq0_epty               : 1; /* [26..26] 下行通道ADQ0空指示 */
        unsigned int    dl_adq1_epty               : 1; /* [27..27] 下行通道ADQ1空指示 */
        unsigned int    dl_pkt_cnt_overflow        : 1; /* [28..28] 下行数据包计数器溢出指示 */
        unsigned int    reserved_0                 : 2; /* [30..29] 保留 */
        unsigned int    timer_cnt_eq0              : 1; /* [31..31] IPF TIMER计数完成标志 */
    } bits;
    unsigned int    u32;
}HI_IPF_INT_STATE_T;    /* 中断状态寄存器 */

typedef union
{
    struct
    {
        unsigned int    time_out_cfg               : 16; /* [15..0] 超时配置，如果两个RD间隔超时则上报中断，步长为256个时钟周期。对两个通道同时生效。 */
        unsigned int    time_out_valid             : 1; /* [16..16] 超时中断使能 */
        unsigned int    reserved                   : 15; /* [31..17] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_TIME_OUT_T;    /* 超时配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    min_pkt_len                : 14; /* [13..0] 最小包长配置寄存器，默认值为40字节（0x28） */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    max_pkt_len                : 14; /* [29..16] 最大包长配置寄存器，默认值为1500字节（0x5DC） */
        unsigned int    reserved_0                 : 2; /* [31..30] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_PKT_LEN_T;    /* 包长配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    ul_filter_zero_index       : 10; /* [9..0] ul基本过滤器起始索引，ul基本过滤器起始地址配置范围为0～127,扩展过滤器地址范围从128~1022，如果配置为1023表示下行通道无过滤器，默认值为1023（0x3FF）。当mfc_en控制位有效时，这个域无效； */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    dl_filter_zero_index       : 10; /* [25..16] dl基本过滤器起始索引，dl基本过滤器起始地址配置范围为0～127,扩展过滤器地址范围从128~1022，如果配置为1023表示下行通道无过滤器，默认值为1023（0x3FF）。当mfc_en控制位有效时，这个域无效； */
        unsigned int    reserved_0                 : 6; /* [31..26] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FILTER_ZERO_INDEX_T;    /* IPF过滤器起始索引配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    ef_baddr_l                 : 32; /* [31..0] 扩展扩滤器起始地址低位[31:0]，8字节对齐 */
    } bits;
    unsigned int    u32;
}HI_IPF_EF_BADDR_L_T;    /* 扩展过滤器基地址配置寄存器低位 */

typedef union
{
    struct
    {
        unsigned int    ef_baddr_h                 : 16; /* [15..0] 扩展扩滤器起始地址[47:32] */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_EF_BADDR_H_T;    /* 扩展过滤器基地址配置寄存器高位 */

typedef union
{
    struct
    {
        unsigned int    flt_chain_loop             : 1; /* [0..0] 表示过滤器链表形成环异常告警 */
        unsigned int    reserved                   : 31; /* [31..1] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLT_CHAIN_LOOP_T;    /* 过滤器链表环告警 */

typedef union
{
    struct
    {
        unsigned int    ul_pkt_cnt_en              : 1; /* [0..0] 上行计数器使能：0：不使能；1：使能。 */
        unsigned int    ul_pkt_cnt_clear           : 1; /* [1..1] 上行计数器清零寄存器，软件配置为1则下行包计数器清零。此寄存器逻辑自清。 */
        unsigned int    ul_pkt_cnt_prescaler_sel   : 2; /* [3..2] 上行计数器计数精度配置寄存器：2'b00：1Byte；2'b01：1KByte；2'b10：1MByte；2'b11：1GByte； */
        unsigned int    reserved_2                 : 4; /* [7..4] 保留 */
        unsigned int    dl_pkt_cnt_en              : 1; /* [8..8] 下行计数器使能：0：不使能；1：使能。 */
        unsigned int    dl_pkt_cnt_clear           : 1; /* [9..9] 下行计数器清零寄存器，软件配置为1则下行包计数器清零。此寄存器逻辑自清。 */
        unsigned int    dl_pkt_cnt_prescaler_sel   : 2; /* [11..10] 下行计数器计数精度配置寄存器：2'b00：1Byte；2'b01：1KByte；2'b10：1MByte；2'b11：1GByte； */
        unsigned int    reserved_1                 : 4; /* [15..12] 保留 */
        unsigned int    timer_en                   : 1; /* [16..16] timer使能信号：1：使能，开始计数；0：不使能，停止计数。 */
        unsigned int    timer_auto_reload          : 1; /* [17..17] timer是否自动重新装载计数值：0：计数完成后，不重新装载；1：计数完成后，自动重新装载。 */
        unsigned int    timer_clear                : 1; /* [18..18] timer计数器清零信号，软件配置为1则timer计数器清零.此寄存器逻辑自清. */
        unsigned int    reserved_0                 : 5; /* [23..19] 保留 */
        unsigned int    timer_prescaler            : 8; /* [31..24] timer步长配置寄存器，以IPF一个aclk时钟周期为单位。 */
    } bits;
    unsigned int    u32;
}HI_IPF_TRANS_CNT_CTRL_T;    /* 流量统计控制寄存器 */

typedef union
{
    struct
    {
        unsigned int    timer_load                 : 32; /* [31..0] timer计数器初始值。Timer使能后，计数器自动load该值到计数器中，递减计数。计数到0时上报中断。此时如果配置timer_auto_relaod为1，则计数器自动装载该值。 */
    } bits;
    unsigned int    u32;
}HI_IPF_TIMER_LOAD_T;    /* TIMER计数器初始值 */

typedef union
{
    struct
    {
        unsigned int    timer_counter              : 32; /* [31..0] timer计数器计数值。 */
    } bits;
    unsigned int    u32;
}HI_IPF_TIMER_COUNTER_T;    /* TIMER计数器计数值 */

typedef union
{
    struct
    {
        unsigned int    ul_pkt_cnt                 : 32; /* [31..0] 上行数据包计数器计数值。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_PKT_CNT_T;    /* 上行数据包计数器计数值。 */

typedef union
{
    struct
    {
        unsigned int    dl_pkt_cnt                 : 32; /* [31..0] 下行数据包计数器计数值。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_PKT_CNT_T;    /* 下行数据包计数器计数值。 */

typedef union
{
    struct
    {
        unsigned int    ul_mod                     : 2; /* [1..0] 模式控制寄存器00：搬数过滤01：只过滤10 or 11：只搬数当mm_en控制位有效时，这个域无效； */
        unsigned int    ul_endian                  : 1; /* [2..2] 输入数据大小端指示0：big endian1：little endian */
        unsigned int    ul_data_chain              : 1; /* [3..3] 数据是否为链表 */
        unsigned int    ul_bdq_clr                 : 1; /* [4..4] 上行队列清除控制信号,软件配置为1则BD,读写指针清零.此寄存器逻辑自清 */
        unsigned int    ul_rdq_clr                 : 1; /* [5..5] 上行队列清除控制信号,软件配置为1则RD读写指针清零.此寄存器逻辑自清 */
        unsigned int    reserved                   : 10; /* [15..6] 保留 */
        unsigned int    ul_wrr_value               : 16; /* [31..16] WRR值，单位字节。上下行如果配置为WRR调度模式，此配置寄存器含义为上行分配的权重。即连续服务上行ul_wrr_value节后才相应下行。除非上行没有任务下行有任务才切到下行。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_CTRL_T;    /* 上行通道控制寄存器 */

typedef union
{
    struct
    {
        unsigned int    ul_busy                    : 1; /* [0..0] 上行busy状态指示寄存器 */
        unsigned int    ul_rdq_full                : 1; /* [1..1] 上行RDQ满状态指示寄存器 */
        unsigned int    ul_rdq_empty               : 1; /* [2..2] 上行RDQ空状态指示寄存器 */
        unsigned int    ul_bdq_full                : 1; /* [3..3] 上行BDQ满状态指示寄存器 */
        unsigned int    ul_bdq_empty               : 1; /* [4..4] 上行BDQ空状态指示寄存器 */
        unsigned int    reserved_1                 : 3; /* [7..5] 保留 */
        unsigned int    ul_rdq_rptr_invalid        : 1; /* [8..8] 上行RDQ读指针无效，表示软件配置的RDQ读指针大于RDQ SIZE */
        unsigned int    ul_bdq_wptr_invalid        : 1; /* [9..9] 上行BDQ写指针无效，表示软件配置的BDQ写指针大于BDQ SIZE */
        unsigned int    reserved_0                 : 22; /* [31..10] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_STATE_T;    /* 上行通道状态寄存器 */

typedef union
{
    struct
    {
        unsigned int    ul_bdq_baddr_l             : 32; /* [31..0] 上行通道BDQ起始地址低位[31:0],8字节对齐 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_BDQ_BADDR_L_T;    /* 上行通道BDQ起始地址低位 */

typedef union
{
    struct
    {
        unsigned int    ul_bdq_baddr_h             : 16; /* [15..0] 上行通道BDQ起始地址高位[47:32] */
        unsigned int    reserved                   : 16; /* [31..16] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_BDQ_BADDR_H_T;    /* 上行通道BDQ起始地址高位 */

typedef union
{
    struct
    {
        unsigned int    ul_bdq_size                : 10; /* [9..0] 上行通道BDQ深度 */
        unsigned int    reserved                   : 22; /* [31..10] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_BDQ_SIZE_T;    /* 上行通道BDQ深度 */

typedef union
{
    struct
    {
        unsigned int    ul_bdq_wptr                : 10; /* [9..0] 上行通道BDQ写指针，不能大于上行BDQ深度 */
        unsigned int    reserved                   : 22; /* [31..10] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_BDQ_WPTR_T;    /* 上行通道BDQ写指针 */

typedef union
{
    struct
    {
        unsigned int    ul_bdq_rptr                : 10; /* [9..0] 上行通道BDQ读指针 */
        unsigned int    reserved                   : 22; /* [31..10] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_BDQ_RPTR_T;    /* 上行通道BDQ读指针 */

typedef union
{
    struct
    {
        unsigned int    ul_bdq_waddr_l             : 32; /* [31..0] 上行通道BDQ写地址低位[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_BDQ_WADDR_L_T;    /* 上行通道BDQ写地址低位 */

typedef union
{
    struct
    {
        unsigned int    ul_bdq_waddr_h             : 16; /* [15..0] 上行通道BDQ写地址高位[47:32] */
        unsigned int    reserved                   : 16; /* [31..16] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_BDQ_WADDR_H_T;    /* 上行通道BDQ写地址高位 */

typedef union
{
    struct
    {
        unsigned int    ul_bdq_raddr_l             : 32; /* [31..0] 上行通道BDQ读地址低位[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_BDQ_RADDR_L_T;    /* 上行通道BDQ读地址低位 */

typedef union
{
    struct
    {
        unsigned int    ul_bdq_raddr_h             : 16; /* [15..0] 上行通道BDQ读地址高位[47:32] */
        unsigned int    reserved                   : 16; /* [31..16] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_BDQ_RADDR_H_T;    /* 上行通道BDQ读地址高位 */

typedef union
{
    struct
    {
        unsigned int    ul_bdq_depth               : 11; /* [10..0] 上行BDQ当前深度寄存器,表示BDQ中BD的个数.等于0表示空,等于(ul_bdq_size+1)表示满 */
        unsigned int    reserved                   : 21; /* [31..11] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_BDQ_DEPTH_T;    /* 上行通道BD队列深度指示寄存器 */

typedef union
{
    struct
    {
        unsigned int    ul_bdq_depth               : 11; /* [10..0] 上行BDQ当前深度寄存器,表示BDQ中BD的个数.等于0表示空,等于(ul_bdq_size+1)表示满 */
        unsigned int    reserved_1                 : 5; /* [15..11] 保留. */
        unsigned int    ul_rdq_depth               : 11; /* [26..16] 上行RDQ当前深度寄存器,表示RDQ中RD的个数.等于0表示空,等于(ul_rdq_size+1)表示满 */
        unsigned int    reserved_0                 : 5; /* [31..27] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_DQ_DEPTH_T;    /* 上行通道队列深度指示寄存器 */

typedef union
{
    struct
    {
        unsigned int    dl_mod                     : 2; /* [1..0] 模式控制寄存器00：搬数过滤01：只过滤10 or 11：只搬数；当mm_en控制位有效时，这个域无效； */
        unsigned int    dl_endian                  : 1; /* [2..2] 输入数据大小端指示0：big endian1：little endian */
        unsigned int    dl_data_chain              : 1; /* [3..3] 数据是否为链表 */
        unsigned int    dl_bdq_clr                 : 1; /* [4..4] 下行队列清除控制信号,软件配置为1则BD读写指针清零.此寄存器逻辑自清 */
        unsigned int    dl_rdq_clr                 : 1; /* [5..5] 下行队列清除控制信号,软件配置为1则RD读写指针清零.此寄存器逻辑自清 */
        unsigned int    reserved                   : 10; /* [15..6] 保留 */
        unsigned int    dl_wrr_value               : 16; /* [31..16] WRR值，单位字节。上下行如果配置为WRR调度模式，此配置寄存器含义为下行分配的权重。即连续服务下行dl_wrr_value节后才相应上行。除非下行没有任务上行有任务才切到上行。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_CTRL_T;    /* 下行通道控制寄存器 */

typedef union
{
    struct
    {
        unsigned int    dl_busy                    : 1; /* [0..0] 下行busy状态指示寄存器 */
        unsigned int    dl_rdq_full                : 1; /* [1..1] 下行RDQ满状态指示寄存器 */
        unsigned int    dl_rdq_empty               : 1; /* [2..2] 下行RDQ空状态指示寄存器 */
        unsigned int    dl_bdq_full                : 1; /* [3..3] 下行BDQ满状态指示寄存器 */
        unsigned int    dl_bdq_empty               : 1; /* [4..4] 下行BDQ空状态指示寄存器 */
        unsigned int    reserved_1                 : 3; /* [7..5] 保留 */
        unsigned int    dl_rdq_rptr_invalid        : 1; /* [8..8] 下行RDQ读指针无效，表示软件配置的RDQ读指针大于RDQ SIZE */
        unsigned int    dl_bdq_wptr_invalid        : 1; /* [9..9] 下行BDQ写指针无效，表示软件配置的BDQ写指针大于BDQ SIZE */
        unsigned int    reserved_0                 : 22; /* [31..10] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_STATE_T;    /* 下行通道状态寄存器 */

typedef union
{
    struct
    {
        unsigned int    dl_rdq_baddr_l             : 32; /* [31..0] 下行通道RDQ起始地址低位[31:0],8字节对齐 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_RDQ_BADDR_L_T;    /* 下行通道RDQ起始地址低位 */

typedef union
{
    struct
    {
        unsigned int    dl_rdq_baddr_h             : 16; /* [15..0] 下行通道RDQ起始地址高位[47:32] */
        unsigned int    reserved                   : 16; /* [31..16] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_RDQ_BADDR_H_T;    /* 下行通道RDQ起始地址高位 */

typedef union
{
    struct
    {
        unsigned int    dl_rdq_size                : 10; /* [9..0] 下行通道RDQ深度 */
        unsigned int    reserved                   : 22; /* [31..10] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_RDQ_SIZE_T;    /* 下行通道RDQ深度 */

typedef union
{
    struct
    {
        unsigned int    dl_rdq_wptr                : 10; /* [9..0] 下行通道RDQ写指针 */
        unsigned int    reserved                   : 22; /* [31..10] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_RDQ_WPTR_T;    /* 下行通道RDQ写指针 */

typedef union
{
    struct
    {
        unsigned int    dl_rdq_rptr                : 10; /* [9..0] 下行通道RDQ读指针，不能大于下行RDQ深度 */
        unsigned int    reserved                   : 22; /* [31..10] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_RDQ_RPTR_T;    /* 下行通道RDQ读指针 */

typedef union
{
    struct
    {
        unsigned int    dl_rdq_waddr_l             : 32; /* [31..0] 下行通道RDQ写地址低位[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_RDQ_WADDR_L_T;    /* 下行通道RDQ写地址低位 */

typedef union
{
    struct
    {
        unsigned int    dl_rdq_waddr_h             : 16; /* [15..0] 下行通道RDQ写地址高位[47:32] */
        unsigned int    reserved                   : 16; /* [31..16] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_RDQ_WADDR_H_T;    /* 下行通道RDQ写地址高位 */

typedef union
{
    struct
    {
        unsigned int    dl_rdq_raddr_l             : 32; /* [31..0] 下行通道RDQ读地址低位[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_RDQ_RADDR_L_T;    /* 下行通道RDQ读地址低位 */
typedef union
{
    struct
    {
        unsigned int    dl_bdq_depth               : 11; /* [10..0] 下行BDQ当前深度寄存器,表示BDQ中BD的个数.等于0表示空,等于(dl_bdq_size+1)表示满 */
        unsigned int    reserved_1                 : 5; /* [15..11] 保留. */
        unsigned int    dl_rdq_depth               : 11; /* [26..16] 下行RDQ当前深度寄存器,表示RDQ中RD的个数.等于0表示空,等于(dl_rdq_size+1)表示满 */
        unsigned int    reserved_0                 : 5; /* [31..27] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_DQ_DEPTH_T;    /* 下行通道队列深度指示寄存器 */

typedef union
{
    struct
    {
        unsigned int    dl_rdq_raddr_h             : 16; /* [15..0] 下行通道RDQ读地址高位[47:32] */
        unsigned int    reserved                   : 16; /* [31..16] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_RDQ_RADDR_H_T;    /* 下行通道RDQ读地址高位 */

typedef union
{
    struct
    {
        unsigned int    dl_rdq_depth               : 11; /* [10..0] 下行RDQ当前深度寄存器,表示RDQ中RD的个数.等于0表示空,等于(dl_rdq_size+1)表示满 */
        unsigned int    reserved                   : 21; /* [31..11] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_RDQ_DEPTH_T;    /* 下行通道队列深度指示寄存器 */

typedef union
{
    struct
    {
        unsigned int    dl_adq_en                  : 2; /* [1..0] 下行通道ADQ0使能。00：表示下行通道不使用ADQ；01：表示下行通道使用ADQ0；1x：表示下行通道使用ADQ0和ADQ1； */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留 */
        unsigned int    dl_adq0_size_sel           : 3; /* [6..4] 下行ADQ0大小(dl_adq0_size)选择寄存器。000：表示ADQ1的大小为32；001：表示ADQ1的大小为64；010：表示ADQ1的大小为128；011：表示ADQ1的大小为256；100：表示ADQ1的大小为512；101：表示ADQ1的大小为1024；110：表示ADQ1的大小为2048；111：表示ADQ1的大小为4096； */
        unsigned int    reserved_1                 : 1; /* [7..7] 保留 */
        unsigned int    dl_adq1_size_sel           : 3; /* [10..8] 下行ADQ1大小(dl_adq1_size)选择寄存器。000：表示ADQ1的大小为32；001：表示ADQ1的大小为64；010：表示ADQ1的大小为128；011：表示ADQ1的大小为256；100：表示ADQ1的大小为512；101：表示ADQ1的大小为1024；110：表示ADQ1的大小为2048；111：表示ADQ1的大小为4096； */
        unsigned int    reserved_0                 : 5; /* [15..11] 保留 */
        unsigned int    dl_adq_plen_th             : 16; /* [31..16] 下行通道数据包长阈值。当下行通道两个adq都开启时，如果当前数据包长小于阈值，使用adq0的AD；否则使用adq1的AD */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_ADQ_CTRL_T;    /* 下行通道ADQ控制寄存器 */

typedef union
{
    struct
    {
        unsigned int    dl_adq0_base_l             : 32; /* [31..0] 下行通道目的地址描述符队列基址低位[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_ADQ0_BASE_L_T;    /* 下行通道ADQ0基址寄存器低位 */

typedef union
{
    struct
    {
        unsigned int    dl_adq0_base_h             : 16; /* [15..0] 下行通道目的地址描述符队列基址高位[47:32] */
        unsigned int    reserved                   : 16; /* [31..16] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_ADQ0_BASE_H_T;    /* 下行通道ADQ0基址寄存器高位 */

typedef union
{
    struct
    {
        unsigned int    dl_adq0_empty              : 1; /* [0..0] 下行ADQ0空状态指示寄存器 */
        unsigned int    reserved_1                 : 1; /* [1..1] 保留. */
        unsigned int    dl_adq0_buf_epty           : 1; /* [2..2] 下行通道内部AD Buffer0空标志。该标志等于1表示内部AD Buffer0缓存了0个AD。 */
        unsigned int    dl_adq0_buf_full           : 1; /* [3..3] 下行通道内部AD Buffer0满标志。该标志等于1表示内部AD Buffer0缓存了2个AD。 */
        unsigned int    dl_adq0_rptr_invalid       : 1; /* [4..4] 下行ADQ0读指针无效，表示软件配置的ADQ0读指针大于dl_adq0_size */
        unsigned int    dl_adq0_wptr_invalid       : 1; /* [5..5] 下行ADQ0写指针无效，表示软件配置的ADQ0写指针大于dl_adq0_size */
        unsigned int    reserved_0                 : 26; /* [31..6] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_ADQ0_STAT_T;    /* 下行通道ADQ0状态寄存器 */

typedef union
{
    struct
    {
        unsigned int    dl_adq0_wptr               : 12; /* [11..0] 下行通道ADQ0写指针，正常工作时写指针需要软件维护。 */
        unsigned int    reserved                   : 20; /* [31..12] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_ADQ0_WPTR_T;    /* 下行通道ADQ0写指针寄存器 */

typedef union
{
    struct
    {
        unsigned int    dl_adq0_rptr               : 12; /* [11..0] 下行通道ADQ0读指针，正常工作时读指针由硬件维护。 */
        unsigned int    reserved                   : 20; /* [31..12] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_ADQ0_RPTR_T;    /* 下行通道ADQ0读指针寄存器 */

typedef union
{
    struct
    {
        unsigned int    dl_adq1_base_l             : 32; /* [31..0] 下行通道目的地址描述符队列基址低位[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_ADQ1_BASE_L_T;    /* 下行通道ADQ1基址寄存器低位 */

typedef union
{
    struct
    {
        unsigned int    dl_adq1_base_h             : 16; /* [15..0] 下行通道目的地址描述符队列基址高位[47:32] */
        unsigned int    reserved                   : 16; /* [31..16] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_ADQ1_BASE_H_T;    /* 下行通道ADQ1基址寄存器高位 */

typedef union
{
    struct
    {
        unsigned int    dl_adq1_empty              : 1; /* [0..0] 下行ADQ1空状态指示寄存器 */
        unsigned int    reserved_1                 : 1; /* [1..1] 保留. */
        unsigned int    dl_adq1_buf_epty           : 1; /* [2..2] 下行通道内部AD Buffer1空标志。该标志等于1表示内部AD Buffer1缓存了0个AD。 */
        unsigned int    dl_adq1_buf_full           : 1; /* [3..3] 下行通道内部AD Buffer1满标志。该标志等于1表示内部AD Buffer1缓存了2个AD。 */
        unsigned int    dl_adq1_rptr_invalid       : 1; /* [4..4] 下行ADQ1读指针无效，表示软件配置的ADQ1读指针大于dl_adq1_size */
        unsigned int    dl_adq1_wptr_invalid       : 1; /* [5..5] 下行ADQ1写指针无效，表示软件配置的ADQ1写指针大于dl_adq1_size */
        unsigned int    reserved_0                 : 26; /* [31..6] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_ADQ1_STAT_T;    /* 下行通道ADQ1状态寄存器 */

typedef union
{
    struct
    {
        unsigned int    dl_adq1_wptr               : 12; /* [11..0] 下行通道ADQ1写指针，正常工作时写指针需要软件维护。 */
        unsigned int    reserved                   : 20; /* [31..12] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_ADQ1_WPTR_T;    /* 下行通道ADQ1写指针寄存器 */

typedef union
{
    struct
    {
        unsigned int    dl_adq1_rptr               : 12; /* [11..0] 下行通道ADQ1读指针，正常工作时读指针由硬件维护。 */
        unsigned int    reserved                   : 20; /* [31..12] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_ADQ1_RPTR_T;    /* 下行通道ADQ1读指针寄存器 */

typedef union
{
    struct
    {
        unsigned int    ul_wdata_sec_n             : 1; /* [0..0] 上行通道写数据SEC属性寄存器。0：安全；1：非安全。 */
        unsigned int    ul_rdata_sec_n             : 1; /* [1..1] 上行通道读数据SEC属性寄存器。0：安全；1：非安全。 */
        unsigned int    ul_rd_sec_n                : 1; /* [2..2] 上行通道RD描述符SEC属性寄存器。0：安全；1：非安全。 */
        unsigned int    ul_bd_sec_n                : 1; /* [3..3] 上行通道BD描述符SEC属性寄存器。0：安全；1：非安全。 */
        unsigned int    ul_ad_sec_n                : 1; /* [4..4] 上行通道AD描述符SEC属性寄存器。0：安全；1：非安全。 */
        unsigned int    ul_cd_sec_n                : 1; /* [5..5] 上行通道CD描述符SEC属性寄存器。0：安全；1：非安全。 */
        unsigned int    reserved_2                 : 2; /* [7..6] 保留 */
        unsigned int    dl_wdata_sec_n             : 1; /* [8..8] 下行通道写数据SEC属性寄存器。0：安全；1：非安全。 */
        unsigned int    dl_rdata_sec_n             : 1; /* [9..9] 下行非直通通道读数据SEC属性寄存器。0：安全；1：非安全。 */
        unsigned int    dl_direct_rdata_sec_n      : 1; /* [10..10] 下行直通通道读数据SEC属性寄存器。0：安全；1：非安全。 */
        unsigned int    dl_rd_sec_n                : 1; /* [11..11] 下行通道RD描述符SEC属性寄存器。0：安全；1：非安全。 */
        unsigned int    dl_bd_sec_n                : 1; /* [12..12] 下行通道BD描述符SEC属性寄存器。0：安全；1：非安全。 */
        unsigned int    dl_ad_sec_n                : 1; /* [13..13] 下行通道AD描述符SEC属性寄存器。0：安全；1：非安全。 */
        unsigned int    dl_cd_sec_n                : 1; /* [14..14] 下行通道CD描述符SEC属性寄存器。0：安全；1：非安全。 */
        unsigned int    reserved_1                 : 1; /* [15..15] 保留 */
        unsigned int    ef_sec_n                   : 1; /* [16..16] 外部过滤器SEC属性寄存器。0：安全；1：非安全。 */
        unsigned int    reserved_0                 : 15; /* [31..17] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_SEC_ATTR_T;    /* IPF AXI MST SEC属性寄存器 */

typedef union
{
    struct
    {
        unsigned int    burst_w                    : 2; /* [1..0] 写通道burst类型。2'b00：INC ALIGNED2'b01：INC NORMAL2'b10：WRAP2'b11：STREAM注意：配置为2‘b00，支持128 Byte边界拆分 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    burst_r                    : 2; /* [5..4] 读通道burst类型。2'b00：INC ALIGNED2'b01：INC NORMAL2'b10：WRAP2'b11：STREAM注意：配置为2‘b00，支持128 Byte边界拆分 */
        unsigned int    reserved_1                 : 2; /* [7..6] 保留。 */
        unsigned int    enburst_undef              : 1; /* [8..8] burst长度：1'b0：不支持AWLEN/ARLEN为不定长的传输1'b1：支持AWLEN/ARLEN为定长的传输 */
        unsigned int    enburst16                  : 1; /* [9..9] burst长度：1'b0：不支持AWLEN/ARLEN为16的传输1'b1：支持AWLEN/ARLEN为16的传输 */
        unsigned int    enburst8                   : 1; /* [10..10] burst长度：1'b0：不支持AWLEN/ARLEN为8的传输1'b1：支持AWLEN/ARLEN为8的传输 */
        unsigned int    enburst4                   : 1; /* [11..11] burst长度：1'b0：不支持AWLEN/ARLEN为4的传输1'b1：支持AWLEN/ARLEN为4的传输 */
        unsigned int    axi_1k_en                  : 1; /* [12..12] 地址边界拆分模式：1'b0：4KB地址边界拆分1'b1：1KB地址边界拆分 */
        unsigned int    reserved_0                 : 19; /* [31..13] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_BURST_CFG_T;    /* GM burst配置 */

typedef union
{
    struct
    {
        unsigned int    ul_rdq_baddr_l             : 32; /* [31..0] 上行通道RDQ起始地址低位[31:0],8字节对齐 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_RDQ_BADDR_L_T;    /* 上行通道RDQ起始地址低位 */

typedef union
{
    struct
    {
        unsigned int    ul_rdq_baddr_h             : 16; /* [15..0] 上行通道RDQ起始地址高位[47:32] */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_RDQ_BADDR_H_T;    /* 上行通道RDQ起始地址 */

typedef union
{
    struct
    {
        unsigned int    ul_rdq_size                : 10; /* [9..0] 上行通道RDQ深度 */
        unsigned int    reserved                   : 22; /* [31..10] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_RDQ_SIZE_T;    /* 上行通道RDQ深度 */

typedef union
{
    struct
    {
        unsigned int    ul_rdq_wptr                : 10; /* [9..0] 上行通道RDQ写指针 */
        unsigned int    reserved                   : 22; /* [31..10] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_RDQ_WPTR_T;    /* 上行通道RDQ写指针 */

typedef union
{
    struct
    {
        unsigned int    ul_rdq_rptr                : 10; /* [9..0] 上行通道RDQ读指针，不能大于上行RDQ深度 */
        unsigned int    reserved                   : 22; /* [31..10] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_RDQ_RPTR_T;    /* 上行通道RDQ读指针 */

typedef union
{
    struct
    {
        unsigned int    ul_rdq_waddr_l             : 32; /* [31..0] 上行通道RDQ写地址低位[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_RDQ_WADDR_L_T;    /* 上行通道RDQ写地址低位 */

typedef union
{
    struct
    {
        unsigned int    ul_rdq_waddr_h             : 16; /* [15..0] 上行通道RDQ写地址高位[47:32] */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_RDQ_WADDR_H_T;    /* 上行通道RDQ写地址高位 */

typedef union
{
    struct
    {
        unsigned int    ul_rdq_raddr_l             : 32; /* [31..0] 上行通道RDQ读地址低位[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_RDQ_RADDR_L_T;    /* 上行通道RDQ读地址低位 */

typedef union
{
    struct
    {
        unsigned int    ul_rdq_raddr_h             : 16; /* [15..0] 上行通道RDQ读地址高位[47:32] */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_RDQ_RADDR_H_T;    /* 上行通道RDQ读地址高位 */

typedef union
{
    struct
    {
        unsigned int    ul_rdq_depth               : 11; /* [10..0] 上行RDQ当前深度寄存器,表示RDQ中RD的个数.等于0表示空,等于(ul_rdq_size+1)表示满 */
        unsigned int    reserved                   : 21; /* [31..11] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_RDQ_DEPTH_T;    /* 上行通道RD队列深度指示寄存器 */

typedef union
{
    struct
    {
        unsigned int    dl_bdq_baddr_l             : 32; /* [31..0] 下行通道BDQ起始地址低位[31:0],8字节对齐 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_BDQ_BADDR_L_T;    /* 下行通道BDQ起始地址低位 */

typedef union
{
    struct
    {
        unsigned int    dl_bdq_baddr_h             : 16; /* [15..0] 下行通道BDQ起始地址高位[47:32] */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_BDQ_BADDR_H_T;    /* 下行通道BDQ起始地址高位 */

typedef union
{
    struct
    {
        unsigned int    dl_bdq_size                : 10; /* [9..0] 下行通道BDQ深度 */
        unsigned int    reserved                   : 22; /* [31..10] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_BDQ_SIZE_T;    /* 下行通道BDQ深度 */

typedef union
{
    struct
    {
        unsigned int    dl_bdq_wptr                : 10; /* [9..0] 下行通道BDQ写指针，不能大于下行BDQ深度 */
        unsigned int    reserved                   : 22; /* [31..10] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_BDQ_WPTR_T;    /* 下行通道BDQ写指针 */

typedef union
{
    struct
    {
        unsigned int    dl_bdq_rptr                : 10; /* [9..0] 下行通道BDQ读指针 */
        unsigned int    reserved                   : 22; /* [31..10] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_BDQ_RPTR_T;    /* 下行通道BDQ读指针 */

typedef union
{
    struct
    {
        unsigned int    dl_bdq_waddr_l             : 32; /* [31..0] 下行通道BDQ写地址低位[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_BDQ_WADDR_L_T;    /* 下行通道BDQ写地址低位 */

typedef union
{
    struct
    {
        unsigned int    dl_bdq_waddr_h             : 16; /* [15..0] 下行通道BDQ写地址高位[47:32] */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_BDQ_WADDR_H_T;    /* 下行通道BDQ写地址高位 */

typedef union
{
    struct
    {
        unsigned int    dl_bdq_raddr_l             : 32; /* [31..0] 下行通道BDQ读地址低位[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_BDQ_RADDR_L_T;    /* 下行通道BDQ读地址低位 */

typedef union
{
    struct
    {
        unsigned int    dl_bdq_raddr_h             : 16; /* [15..0] 下行通道BDQ读地址高位[47:32] */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_BDQ_RADDR_H_T;    /* 下行通道BDQ读地址高位 */

typedef union
{
    struct
    {
        unsigned int    dl_bdq_depth               : 11; /* [10..0] 下行BDQ当前深度寄存器,表示BDQ中BD的个数.等于0表示空,等于(dl_bdq_size+1)表示满 */
        unsigned int    reserved                   : 21; /* [31..11] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH1_BDQ_DEPTH_T;    /* 下行通道BD队列深度指示寄存器 */

typedef union
{
    struct
    {
        unsigned int    ul_adq_en                  : 2; /* [1..0] 上行通道ADQ0使能。00：表示上行通道不使用ADQ；01：表示上行通道使用ADQ0；1x：表示上行通道使用ADQ0和ADQ1； */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留 */
        unsigned int    ul_adq0_size_sel           : 3; /* [6..4] 上行ADQ0大小(ul_adq0_size)选择寄存器。000：表示ADQ1的大小为32；001：表示ADQ1的大小为64；010：表示ADQ1的大小为128；011：表示ADQ1的大小为256；100：表示ADQ1的大小为512；101：表示ADQ1的大小为1024；110：表示ADQ1的大小为2048；111：表示ADQ1的大小为4096； */
        unsigned int    reserved_1                 : 1; /* [7..7] 保留 */
        unsigned int    ul_adq1_size_sel           : 3; /* [10..8] 上行ADQ1大小(ul_adq1_size)选择寄存器。000：表示ADQ1的大小为32；001：表示ADQ1的大小为64；010：表示ADQ1的大小为128；011：表示ADQ1的大小为256；100：表示ADQ1的大小为512；101：表示ADQ1的大小为1024；110：表示ADQ1的大小为2048；111：表示ADQ1的大小为4096； */
        unsigned int    reserved_0                 : 5; /* [15..11] 保留 */
        unsigned int    ul_adq_plen_th             : 16; /* [31..16] 上行通道数据包长阈值。当上行通道两个adq都开启时，如果当前数据包长小于阈值，使用adq0的AD；否则使用adq1的AD */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_ADQ_CTRL_T;    /* 上行通道ADQ控制寄存器 */

typedef union
{
    struct
    {
        unsigned int    ul_adq0_base_l             : 32; /* [31..0] 上行通道目的地址描述符队列基址低位[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_ADQ0_BASE_L_T;    /* 上行通道ADQ0基址寄存器低位 */

typedef union
{
    struct
    {
        unsigned int    ul_adq0_base_h             : 16; /* [15..0] 上行通道目的地址描述符队列基址高位[47:32] */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_ADQ0_BASE_H_T;    /* 上行通道ADQ0基址寄存器高位 */

typedef union
{
    struct
    {
        unsigned int    ul_adq0_empty              : 1; /* [0..0] 上行ADQ0空状态指示寄存器 */
        unsigned int    reserved_1                 : 1; /* [1..1] 保留. */
        unsigned int    ul_adq0_buf_epty           : 1; /* [2..2] 上行通道内部AD Buffer0空标志。该标志等于1表示内部AD Buffer0缓存了0个AD。 */
        unsigned int    ul_adq0_buf_full           : 1; /* [3..3] 上行通道内部AD Buffer0满标志。该标志等于1表示内部AD Buffer0缓存了2个AD。 */
        unsigned int    ul_adq0_rptr_invalid       : 1; /* [4..4] 上行ADQ0读指针无效，表示软件配置的ADQ0读指针大于ADQ0 SIZE */
        unsigned int    ul_adq0_wptr_invalid       : 1; /* [5..5] 上行ADQ0写指针无效，表示软件配置的ADQ0写指针大于ADQ0 SIZE */
        unsigned int    reserved_0                 : 26; /* [31..6] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_ADQ0_STAT_T;    /* 上行通道ADQ0状态寄存器 */

typedef union
{
    struct
    {
        unsigned int    ul_adq0_wptr               : 12; /* [11..0] 上行通道ADQ0写指针，正常工作时写指针需要软件维护。 */
        unsigned int    reserved                   : 20; /* [31..12] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_ADQ0_WPTR_T;    /* 上行通道ADQ0写指针寄存器 */

typedef union
{
    struct
    {
        unsigned int    ul_adq0_rptr               : 12; /* [11..0] 上行通道ADQ0读指针，正常工作时读指针由硬件维护。 */
        unsigned int    reserved                   : 20; /* [31..12] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_ADQ0_RPTR_T;    /* 上行通道ADQ0读指针寄存器 */

typedef union
{
    struct
    {
        unsigned int    ul_adq1_base_l             : 32; /* [31..0] 上行通道目的地址描述符队列基址低位[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_ADQ1_BASE_L_T;    /* 上行通道ADQ1基址寄存器低位 */

typedef union
{
    struct
    {
        unsigned int    ul_adq1_base_h             : 16; /* [15..0] 上行通道目的地址描述符队列基址高位[47:32] */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_ADQ1_BASE_H_T;    /* 上行通道ADQ1基址寄存器高位 */

typedef union
{
    struct
    {
        unsigned int    ul_adq1_empty              : 1; /* [0..0] 上行ADQ1空状态指示寄存器 */
        unsigned int    reserved_1                 : 1; /* [1..1] 保留. */
        unsigned int    ul_adq1_buf_epty           : 1; /* [2..2] 上行通道内部AD Buffer1空标志。该标志等于1表示内部AD Buffer1缓存了0个AD。 */
        unsigned int    ul_adq1_buf_full           : 1; /* [3..3] 上行通道内部AD Buffer1满标志。该标志等于1表示内部AD Buffer1缓存了2个AD。 */
        unsigned int    ul_adq1_rptr_invalid       : 1; /* [4..4] 上行ADQ1读指针无效，表示软件配置的ADQ1读指针大于ADQ1 SIZE */
        unsigned int    ul_adq1_wptr_invalid       : 1; /* [5..5] 上行ADQ1写指针无效，表示软件配置的ADQ1写指针大于ADQ1 SIZE */
        unsigned int    reserved_0                 : 26; /* [31..6] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_ADQ1_STAT_T;    /* 上行通道ADQ1状态寄存器 */

typedef union
{
    struct
    {
        unsigned int    ul_adq1_wptr               : 12; /* [11..0] 上行通道ADQ1写指针，正常工作时写指针需要软件维护。 */
        unsigned int    reserved                   : 20; /* [31..12] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_ADQ1_WPTR_T;    /* 上行通道ADQ1写指针寄存器 */

typedef union
{
    struct
    {
        unsigned int    ul_adq1_rptr               : 12; /* [11..0] 上行通道ADQ1读指针，正常工作时读指针由硬件维护。 */
        unsigned int    reserved                   : 20; /* [31..12] 保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_CH0_ADQ1_RPTR_T;    /* 上行通道ADQ1读指针寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_0_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_1_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_2_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_3_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_4_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_5_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_6_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_7_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_8_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_9_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_10_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_11_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_12_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_13_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_14_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_15_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_16_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_17_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_18_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_19_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_20_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_21_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_22_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_23_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_24_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_25_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_26_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_27_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_28_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_29_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_30_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_31_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_32_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_33_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_34_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_35_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_36_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_37_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_38_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_39_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_40_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_41_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_42_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_43_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_44_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_45_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_46_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_47_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_48_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_49_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_50_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_51_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_52_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_53_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_54_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_55_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_56_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_57_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_58_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_59_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_60_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_61_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_62_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_63_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_64_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_65_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_66_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_67_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_68_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_69_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_70_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_71_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_72_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_73_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_74_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_75_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_76_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_77_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_78_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_79_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_80_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_81_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_82_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_83_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_84_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_85_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_86_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_87_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_88_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_89_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_90_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_91_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_92_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_93_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_94_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_95_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_96_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_97_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_98_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_99_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_100_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_101_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_102_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_103_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_104_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_105_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_106_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_107_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_108_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_109_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_110_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_111_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_112_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_113_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_114_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_115_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_116_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_117_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_118_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_119_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_120_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_121_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_122_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_123_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_124_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_125_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_126_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS [127:96]，IPV4表示LOCAL ADDRESS [31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR0_127_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_0_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_1_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_2_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_3_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_4_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_5_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_6_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_7_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_8_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_9_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_10_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_11_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_12_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_13_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_14_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_15_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_16_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_17_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_18_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_19_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_20_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_21_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_22_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_23_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_24_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_25_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_26_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_27_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_28_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_29_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_30_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_31_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_32_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_33_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_34_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_35_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_36_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_37_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_38_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_39_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_40_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_41_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_42_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_43_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_44_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_45_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_46_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_47_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_48_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_49_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_50_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_51_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_52_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_53_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_54_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_55_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_56_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_57_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_58_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_59_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_60_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_61_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_62_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_63_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_64_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_65_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_66_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_67_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_68_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_69_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_70_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_71_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_72_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_73_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_74_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_75_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_76_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_77_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_78_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_79_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_80_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_81_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_82_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_83_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_84_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_85_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_86_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_87_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_88_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_89_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_90_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_91_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_92_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_93_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_94_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_95_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_96_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_97_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_98_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_99_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_100_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_101_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_102_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_103_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_104_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_105_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_106_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_107_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_108_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_109_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_110_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_111_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_112_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_113_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_114_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_115_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_116_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_117_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_118_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_119_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_120_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_121_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_122_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_123_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_124_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_125_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_126_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR1_127_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_0_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_1_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_2_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_3_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_4_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_5_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_6_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_7_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_8_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_9_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_10_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_11_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_12_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_13_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_14_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_15_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_16_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_17_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_18_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_19_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_20_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_21_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_22_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_23_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_24_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_25_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_26_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_27_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_28_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_29_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_30_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_31_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_32_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_33_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_34_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_35_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_36_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_37_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_38_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_39_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_40_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_41_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_42_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_43_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_44_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_45_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_46_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_47_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_48_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_49_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_50_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_51_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_52_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_53_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_54_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_55_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_56_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_57_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_58_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_59_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_60_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_61_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_62_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_63_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_64_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_65_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_66_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_67_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_68_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_69_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_70_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_71_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_72_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_73_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_74_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_75_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_76_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_77_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_78_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_79_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_80_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_81_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_82_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_83_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_84_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_85_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_86_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_87_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_88_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_89_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_90_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_91_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_92_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_93_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_94_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_95_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_96_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_97_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_98_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_99_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_100_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_101_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_102_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_103_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_104_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_105_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_106_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_107_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_108_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_109_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_110_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_111_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_112_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_113_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_114_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_115_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_116_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_117_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_118_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_119_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_120_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_121_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_122_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_123_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_124_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_125_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_126_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR2_127_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_0_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_1_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_2_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_3_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_4_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_5_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_6_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_7_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_8_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_9_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_10_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_11_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_12_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_13_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_14_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_15_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_16_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_17_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_18_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_19_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_20_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_21_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_22_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_23_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_24_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_25_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_26_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_27_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_28_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_29_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_30_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_31_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_32_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_33_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_34_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_35_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_36_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_37_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_38_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_39_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_40_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_41_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_42_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_43_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_44_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_45_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_46_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_47_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_48_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_49_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_50_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_51_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_52_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_53_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_54_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_55_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_56_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_57_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_58_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_59_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_60_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_61_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_62_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_63_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_64_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_65_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_66_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_67_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_68_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_69_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_70_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_71_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_72_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_73_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_74_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_75_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_76_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_77_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_78_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_79_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_80_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_81_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_82_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_83_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_84_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_85_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_86_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_87_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_88_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_89_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_90_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_91_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_92_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_93_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_94_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_95_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_96_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_97_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_98_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_99_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_100_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_101_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_102_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_103_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_104_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_105_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_106_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_107_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_108_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_109_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_110_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_111_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_112_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_113_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_114_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_115_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_116_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_117_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_118_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_119_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_120_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_121_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_122_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_123_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_124_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_125_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_126_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_laddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示LOCAL ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示LOCAL ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_ADDR3_127_T;    /* 过滤器local address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_0_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_1_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_2_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_3_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_4_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_5_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_6_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_7_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_8_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_9_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_10_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_11_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_12_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_13_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_14_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_15_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_16_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_17_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_18_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_19_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_20_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_21_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_22_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_23_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_24_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_25_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_26_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_27_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_28_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_29_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_30_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_31_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_32_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_33_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_34_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_35_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_36_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_37_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_38_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_39_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_40_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_41_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_42_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_43_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_44_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_45_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_46_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_47_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_48_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_49_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_50_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_51_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_52_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_53_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_54_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_55_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_56_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_57_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_58_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_59_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_60_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_61_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_62_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_63_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_64_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_65_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_66_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_67_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_68_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_69_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_70_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_71_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_72_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_73_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_74_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_75_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_76_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_77_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_78_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_79_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_80_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_81_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_82_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_83_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_84_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_85_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_86_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_87_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_88_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_89_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_90_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_91_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_92_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_93_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_94_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_95_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_96_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_97_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_98_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_99_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_100_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_101_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_102_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_103_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_104_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_105_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_106_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_107_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_108_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_109_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_110_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_111_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_112_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_113_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_114_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_115_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_116_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_117_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_118_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_119_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_120_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_121_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_122_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_123_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_124_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_125_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_126_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[103:96],[111:104],[119:112],[127:120]}，IPV4表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[127:96]，IPV4表示REMOTE ADDRESS[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_127_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_0_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_1_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_2_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_3_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_4_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_5_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_6_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_7_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_8_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_9_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_10_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_11_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_12_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_13_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_14_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_15_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_16_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_17_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_18_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_19_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_20_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_21_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_22_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_23_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_24_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_25_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_26_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_27_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_28_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_29_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_30_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_31_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_32_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_33_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_34_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_35_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_36_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_37_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_38_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_39_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_40_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_41_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_42_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_43_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_44_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_45_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_46_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_47_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_48_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_49_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_50_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_51_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_52_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_53_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_54_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_55_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_56_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_57_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_58_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_59_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_60_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_61_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_62_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_63_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_64_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_65_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_66_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_67_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_68_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_69_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_70_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_71_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_72_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_73_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_74_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_75_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_76_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_77_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_78_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_79_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_80_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_81_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_82_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_83_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_84_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_85_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_86_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_87_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_88_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_89_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_90_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_91_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_92_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_93_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_94_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_95_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_96_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_97_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_98_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_99_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_100_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_101_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_102_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_103_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_104_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_105_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_106_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_107_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_108_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_109_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_110_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_111_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_112_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_113_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_114_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_115_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_116_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_117_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_118_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_119_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_120_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_121_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_122_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_123_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_124_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_125_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_126_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_127_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_0_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_1_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_2_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_3_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_4_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_5_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_6_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_7_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_8_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_9_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_10_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_11_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_12_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_13_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_14_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_15_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_16_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_17_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_18_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_19_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_20_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_21_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_22_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_23_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_24_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_25_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_26_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_27_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_28_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_29_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_30_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_31_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_32_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_33_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_34_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_35_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_36_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_37_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_38_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_39_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_40_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_41_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_42_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_43_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_44_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_45_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_46_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_47_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_48_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_49_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_50_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_51_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_52_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_53_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_54_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_55_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_56_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_57_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_58_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_59_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_60_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_61_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_62_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_63_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_64_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_65_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_66_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_67_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_68_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_69_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_70_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_71_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_72_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_73_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_74_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_75_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_76_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_77_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_78_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_79_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_80_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_81_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_82_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_83_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_84_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_85_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_86_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_87_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_88_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_89_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_90_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_91_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_92_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_93_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_94_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_95_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_96_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_97_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_98_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_99_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_100_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_101_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_102_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_103_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_104_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_105_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_106_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_107_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_108_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_109_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_110_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_111_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_112_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_113_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_114_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_115_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_116_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_117_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_118_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_119_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_120_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_121_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_122_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_123_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_124_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_125_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_126_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_127_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_0_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_1_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_2_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_3_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_4_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_5_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_6_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_7_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_8_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_9_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_10_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_11_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_12_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_13_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_14_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_15_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_16_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_17_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_18_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_19_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_20_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_21_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_22_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_23_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_24_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_25_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_26_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_27_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_28_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_29_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_30_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_31_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_32_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_33_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_34_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_35_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_36_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_37_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_38_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_39_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_40_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_41_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_42_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_43_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_44_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_45_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_46_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_47_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_48_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_49_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_50_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_51_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_52_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_53_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_54_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_55_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_56_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_57_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_58_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_59_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_60_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_61_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_62_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_63_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_64_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_65_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_66_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_67_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_68_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_69_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_70_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_71_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_72_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_73_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_74_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_75_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_76_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_77_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_78_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_79_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_80_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_81_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_82_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_83_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_84_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_85_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_86_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_87_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_88_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_89_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_90_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_91_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_92_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_93_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_94_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_95_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_96_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_97_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_98_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_99_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_100_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_101_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_102_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_103_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_104_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_105_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_106_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_107_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_108_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_109_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_110_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_111_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_112_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_113_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_114_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_115_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_116_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_117_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_118_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_119_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_120_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_121_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_122_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_123_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_124_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_125_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_126_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3                : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_127_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_0_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_1_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_2_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_3_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_4_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_5_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_6_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_7_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_8_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_9_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_10_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_11_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_12_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_13_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_14_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_15_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_16_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_17_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_18_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_19_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_20_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_21_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_22_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_23_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_24_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_25_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_26_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_27_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_28_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_29_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_30_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_31_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_32_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_33_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_34_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_35_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_36_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_37_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_38_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_39_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_40_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_41_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_42_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_43_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_44_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_45_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_46_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_47_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_48_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_49_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_50_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_51_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_52_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_53_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_54_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_55_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_56_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_57_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_58_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_59_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_60_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_61_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_62_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_63_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_64_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_65_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_66_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_67_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_68_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_69_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_70_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_71_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_72_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_73_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_74_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_75_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_76_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_77_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_78_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_79_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_80_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_81_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_82_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_83_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_84_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_85_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_86_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_87_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_88_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_89_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_90_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_91_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_92_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_93_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_94_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_95_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_96_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_97_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_98_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_99_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_100_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_101_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_102_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_103_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_104_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_105_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_106_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_107_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_108_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_109_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_110_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_111_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_112_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_113_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_114_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_115_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_116_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_117_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_118_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_119_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_120_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_121_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_122_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_123_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_124_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_125_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_126_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr0_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[103:96],[111:104],[119:112],[127:120]}IPV4表示REMOTE ADDRESS_MASK {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[127:96]IPV4表示REMOTE ADDRESS_MASK[31:0] */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR0_MASK_127_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_0_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_1_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_2_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_3_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_4_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_5_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_6_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_7_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_8_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_9_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_10_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_11_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_12_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_13_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_14_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_15_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_16_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_17_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_18_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_19_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_20_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_21_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_22_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_23_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_24_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_25_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_26_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_27_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_28_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_29_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_30_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_31_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_32_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_33_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_34_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_35_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_36_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_37_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_38_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_39_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_40_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_41_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_42_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_43_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_44_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_45_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_46_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_47_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_48_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_49_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_50_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_51_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_52_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_53_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_54_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_55_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_56_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_57_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_58_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_59_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_60_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_61_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_62_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_63_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_64_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_65_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_66_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_67_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_68_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_69_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_70_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_71_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_72_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_73_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_74_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_75_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_76_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_77_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_78_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_79_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_80_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_81_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_82_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_83_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_84_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_85_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_86_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_87_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_88_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_89_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_90_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_91_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_92_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_93_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_94_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_95_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_96_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_97_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_98_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_99_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_100_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_101_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_102_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_103_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_104_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_105_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_106_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_107_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_108_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_109_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_110_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_111_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_112_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_113_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_114_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_115_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_116_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_117_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_118_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_119_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_120_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_121_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_122_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_123_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_124_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_125_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_126_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr1_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[71:64],[79:72],[87:80],[95:88]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[95:64]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR1_MASK_127_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_0_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_1_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_2_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_3_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_4_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_5_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_6_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_7_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_8_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_9_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_10_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_11_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_12_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_13_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_14_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_15_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_16_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_17_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_18_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_19_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_20_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_21_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_22_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_23_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_24_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_25_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_26_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_27_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_28_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_29_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_30_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_31_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_32_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_33_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_34_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_35_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_36_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_37_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_38_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_39_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_40_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_41_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_42_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_43_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_44_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_45_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_46_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_47_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_48_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_49_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_50_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_51_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_52_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_53_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_54_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_55_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_56_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_57_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_58_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_59_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_60_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_61_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_62_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_63_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_64_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_65_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_66_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_67_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_68_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_69_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_70_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_71_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_72_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_73_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_74_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_75_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_76_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_77_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_78_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_79_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_80_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_81_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_82_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_83_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_84_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_85_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_86_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_87_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_88_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_89_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_90_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_91_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_92_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_93_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_94_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_95_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_96_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_97_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_98_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_99_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_100_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_101_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_102_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_103_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_104_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_105_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_106_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_107_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_108_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_109_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_110_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_111_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_112_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_113_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_114_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_115_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_116_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_117_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_118_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_119_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_120_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_121_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_122_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_123_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_124_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_125_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_126_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr2_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS_MASK {[39:32],[47:40],[55:48],[63:56]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS_MASK[63:32]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR2_MASK_127_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_0_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_1_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_2_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_3_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_4_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_5_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_6_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_7_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_8_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_9_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_10_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_11_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_12_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_13_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_14_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_15_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_16_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_17_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_18_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_19_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_20_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_21_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_22_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_23_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_24_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_25_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_26_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_27_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_28_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_29_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_30_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_31_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_32_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_33_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_34_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_35_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_36_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_37_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_38_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_39_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_40_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_41_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_42_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_43_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_44_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_45_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_46_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_47_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_48_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_49_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_50_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_51_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_52_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_53_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_54_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_55_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_56_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_57_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_58_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_59_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_60_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_61_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_62_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_63_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_64_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_65_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_66_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_67_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_68_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_69_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_70_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_71_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_72_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_73_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_74_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_75_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_76_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_77_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_78_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_79_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_80_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_81_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_82_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_83_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_84_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_85_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_86_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_87_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_88_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_89_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_90_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_91_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_92_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_93_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_94_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_95_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_96_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_97_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_98_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_99_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_100_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_101_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_102_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_103_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_104_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_105_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_106_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_107_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_108_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_109_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_110_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_111_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_112_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_113_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_114_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_115_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_116_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_117_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_118_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_119_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_120_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_121_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_122_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_123_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_124_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_125_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_126_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_raddr3_mask           : 32; /* [31..0] fltn_addr_reverse等于0时按照字节大端排列，IPV6表示REMOTE ADDRESS {[7:0],[15:8],[23:16],[31:24]}fltn_addr_reverse等于1时按照字节小端排列，IPV6表示REMOTE ADDRESS[31:0]IPV4保留 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_ADDR3_MASK_127_T;    /* 过滤器remote address配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_0_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_1_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_2_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_3_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_4_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_5_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_6_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_7_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_8_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_9_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_10_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_11_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_12_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_13_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_14_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_15_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_16_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_17_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_18_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_19_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_20_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_21_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_22_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_23_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_24_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_25_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_26_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_27_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_28_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_29_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_30_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_31_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_32_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_33_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_34_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_35_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_36_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_37_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_38_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_39_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_40_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_41_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_42_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_43_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_44_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_45_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_46_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_47_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_48_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_49_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_50_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_51_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_52_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_53_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_54_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_55_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_56_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_57_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_58_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_59_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_60_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_61_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_62_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_63_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_64_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_65_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_66_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_67_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_68_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_69_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_70_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_71_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_72_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_73_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_74_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_75_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_76_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_77_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_78_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_79_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_80_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_81_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_82_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_83_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_84_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_85_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_86_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_87_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_88_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_89_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_90_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_91_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_92_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_93_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_94_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_95_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_96_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_97_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_98_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_99_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_100_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_101_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_102_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_103_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_104_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_105_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_106_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_107_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_108_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_109_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_110_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_111_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_112_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_113_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_114_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_115_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_116_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_117_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_118_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_119_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_120_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_121_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_122_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_123_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_124_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_125_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_126_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_port_low        : 16; /* [15..0] 过滤表LOCAL PORT低门限，字节小端排列 */
        unsigned int    fltn_local_port_high       : 16; /* [31..16] 过滤表LOCAL PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LOCAL_PORT_127_T;    /* 过滤表LOCAL PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_0_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_1_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_2_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_3_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_4_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_5_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_6_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_7_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_8_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_9_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_10_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_11_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_12_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_13_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_14_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_15_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_16_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_17_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_18_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_19_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_20_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_21_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_22_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_23_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_24_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_25_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_26_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_27_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_28_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_29_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_30_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_31_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_32_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_33_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_34_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_35_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_36_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_37_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_38_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_39_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_40_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_41_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_42_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_43_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_44_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_45_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_46_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_47_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_48_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_49_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_50_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_51_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_52_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_53_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_54_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_55_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_56_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_57_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_58_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_59_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_60_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_61_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_62_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_63_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_64_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_65_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_66_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_67_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_68_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_69_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_70_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_71_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_72_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_73_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_74_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_75_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_76_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_77_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_78_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_79_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_80_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_81_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_82_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_83_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_84_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_85_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_86_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_87_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_88_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_89_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_90_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_91_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_92_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_93_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_94_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_95_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_96_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_97_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_98_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_99_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_100_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_101_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_102_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_103_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_104_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_105_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_106_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_107_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_108_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_109_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_110_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_111_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_112_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_113_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_114_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_115_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_116_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_117_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_118_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_119_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_120_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_121_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_122_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_123_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_124_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_125_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_126_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_remote_port_low       : 16; /* [15..0] 过滤表REMOTE PORT低门限，字节小端排列 */
        unsigned int    fltn_remote_port_high      : 16; /* [31..16] 过滤表REMOTE PORT高门限，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_REMOTE_PORT_127_T;    /* 过滤表REMOTE PORT门限配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_0_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_1_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_2_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_3_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_4_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_5_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_6_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_7_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_8_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_9_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_10_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_11_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_12_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_13_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_14_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_15_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_16_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_17_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_18_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_19_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_20_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_21_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_22_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_23_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_24_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_25_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_26_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_27_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_28_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_29_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_30_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_31_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_32_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_33_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_34_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_35_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_36_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_37_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_38_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_39_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_40_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_41_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_42_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_43_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_44_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_45_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_46_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_47_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_48_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_49_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_50_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_51_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_52_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_53_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_54_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_55_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_56_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_57_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_58_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_59_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_60_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_61_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_62_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_63_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_64_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_65_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_66_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_67_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_68_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_69_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_70_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_71_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_72_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_73_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_74_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_75_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_76_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_77_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_78_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_79_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_80_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_81_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_82_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_83_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_84_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_85_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_86_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_87_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_88_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_89_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_90_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_91_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_92_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_93_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_94_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_95_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_96_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_97_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_98_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_99_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_100_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_101_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_102_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_103_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_104_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_105_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_106_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_107_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_108_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_109_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_110_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_111_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_112_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_113_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_114_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_115_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_116_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_117_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_118_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_119_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_120_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_121_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_122_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_123_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_124_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_125_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_126_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_traffic_class         : 8; /* [7..0] 过滤器业务等级域配置值IPV4为type of service域IPV6为traffic class域 */
        unsigned int    fltn_traffic_class_mask    : 8; /* [15..8] 过滤器业务等级域掩码配置值 */
        unsigned int    reserved                   : 16; /* [31..16] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_TRAFFIC_CLASS_127_T;    /* 过滤表业务等级域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_0_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_1_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_2_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_3_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_4_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_5_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_6_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_7_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_8_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_9_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_10_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_11_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_12_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_13_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_14_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_15_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_16_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_17_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_18_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_19_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_20_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_21_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_22_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_23_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_24_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_25_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_26_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_27_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_28_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_29_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_30_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_31_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_32_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_33_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_34_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_35_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_36_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_37_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_38_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_39_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_40_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_41_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_42_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_43_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_44_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_45_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_46_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_47_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_48_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_49_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_50_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_51_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_52_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_53_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_54_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_55_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_56_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_57_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_58_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_59_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_60_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_61_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_62_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_63_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_64_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_65_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_66_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_67_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_68_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_69_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_70_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_71_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_72_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_73_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_74_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_75_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_76_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_77_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_78_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_79_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_80_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_81_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_82_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_83_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_84_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_85_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_86_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_87_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_88_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_89_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_90_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_91_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_92_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_93_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_94_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_95_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_96_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_97_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_98_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_99_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_100_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_101_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_102_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_103_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_104_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_105_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_106_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_107_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_108_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_109_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_110_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_111_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_112_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_113_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_114_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_115_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_116_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_117_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_118_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_119_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_120_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_121_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_122_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_123_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_124_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_125_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_126_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_local_addr_mask       : 7; /* [6..0] 过滤器local address域掩码配置值，IPV4过滤器表示32位地址掩码从低位到高位0的个数。例如fltn_local_addr_mask=7'b0表示掩码等于0xffffffff；fltn_local_addr_mask=7'h4表示掩码等于0xfffffff0；fltn_local_addr_mask=7'h8表示掩码等于0xffffff00；IPV6过滤器表示128位地址掩码从低位到高位0的个数。 */
        unsigned int    reserved                   : 25; /* [31..7] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_LADD_MASK_127_T;    /* 过滤器local address mask域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_0_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_1_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_2_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_3_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_4_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_5_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_6_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_7_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_8_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_9_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_10_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_11_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_12_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_13_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_14_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_15_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_16_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_17_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_18_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_19_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_20_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_21_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_22_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_23_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_24_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_25_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_26_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_27_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_28_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_29_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_30_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_31_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_32_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_33_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_34_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_35_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_36_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_37_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_38_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_39_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_40_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_41_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_42_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_43_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_44_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_45_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_46_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_47_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_48_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_49_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_50_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_51_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_52_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_53_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_54_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_55_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_56_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_57_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_58_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_59_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_60_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_61_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_62_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_63_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_64_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_65_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_66_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_67_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_68_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_69_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_70_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_71_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_72_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_73_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_74_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_75_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_76_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_77_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_78_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_79_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_80_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_81_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_82_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_83_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_84_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_85_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_86_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_87_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_88_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_89_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_90_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_91_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_92_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_93_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_94_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_95_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_96_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_97_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_98_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_99_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_100_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_101_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_102_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_103_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_104_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_105_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_106_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_107_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_108_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_109_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_110_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_111_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_112_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_113_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_114_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_115_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_116_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_117_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_118_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_119_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_120_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_121_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_122_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_123_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_124_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_125_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_126_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_header           : 8; /* [7..0] 过滤器协议类型域配置值IPV4为protocol域IPV6为next header域 */
        unsigned int    reserved                   : 24; /* [31..8] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_NEXT_HEADER_127_T;    /* 过滤器协议类型域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_0_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_1_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_2_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_3_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_4_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_5_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_6_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_7_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_8_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_9_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_10_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_11_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_12_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_13_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_14_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_15_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_16_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_17_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_18_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_19_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_20_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_21_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_22_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_23_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_24_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_25_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_26_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_27_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_28_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_29_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_30_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_31_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_32_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_33_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_34_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_35_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_36_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_37_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_38_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_39_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_40_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_41_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_42_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_43_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_44_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_45_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_46_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_47_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_48_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_49_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_50_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_51_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_52_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_53_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_54_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_55_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_56_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_57_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_58_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_59_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_60_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_61_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_62_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_63_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_64_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_65_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_66_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_67_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_68_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_69_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_70_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_71_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_72_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_73_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_74_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_75_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_76_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_77_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_78_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_79_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_80_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_81_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_82_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_83_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_84_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_85_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_86_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_87_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_88_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_89_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_90_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_91_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_92_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_93_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_94_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_95_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_96_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_97_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_98_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_99_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_100_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_101_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_102_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_103_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_104_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_105_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_106_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_107_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_108_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_109_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_110_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_111_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_112_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_113_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_114_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_115_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_116_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_117_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_118_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_119_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_120_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_121_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_122_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_123_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_124_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_125_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_126_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_fow_lable             : 20; /* [19..0] 过滤表流标签配置寄存器，字节小端排列 */
        unsigned int    reserved                   : 12; /* [31..20] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_FLOW_LABEL_127_T;    /* 过滤器流标签域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_0_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_1_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_2_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_3_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_4_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_5_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_6_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_7_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_8_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_9_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_10_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_11_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_12_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_13_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_14_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_15_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_16_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_17_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_18_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_19_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_20_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_21_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_22_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_23_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_24_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_25_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_26_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_27_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_28_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_29_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_30_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_31_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_32_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_33_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_34_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_35_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_36_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_37_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_38_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_39_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_40_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_41_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_42_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_43_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_44_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_45_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_46_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_47_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_48_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_49_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_50_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_51_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_52_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_53_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_54_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_55_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_56_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_57_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_58_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_59_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_60_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_61_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_62_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_63_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_64_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_65_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_66_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_67_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_68_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_69_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_70_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_71_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_72_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_73_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_74_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_75_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_76_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_77_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_78_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_79_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_80_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_81_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_82_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_83_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_84_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_85_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_86_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_87_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_88_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_89_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_90_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_91_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_92_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_93_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_94_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_95_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_96_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_97_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_98_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_99_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_100_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_101_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_102_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_103_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_104_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_105_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_106_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_107_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_108_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_109_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_110_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_111_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_112_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_113_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_114_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_115_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_116_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_117_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_118_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_119_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_120_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_121_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_122_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_123_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_124_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_125_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_126_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_type                  : 8; /* [7..0] 过滤器type域配置值 */
        unsigned int    reserved_1                 : 8; /* [15..8] 保留。 */
        unsigned int    fltn_code                  : 8; /* [23..16] 过滤器code域配置值 */
        unsigned int    reserved_0                 : 8; /* [31..24] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_ICMP_127_T;    /* 过滤器ICMP配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_0_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_1_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_2_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_3_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_4_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_5_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_6_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_7_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_8_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_9_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_10_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_11_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_12_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_13_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_14_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_15_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_16_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_17_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_18_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_19_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_20_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_21_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_22_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_23_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_24_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_25_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_26_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_27_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_28_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_29_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_30_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_31_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_32_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_33_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_34_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_35_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_36_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_37_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_38_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_39_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_40_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_41_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_42_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_43_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_44_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_45_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_46_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_47_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_48_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_49_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_50_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_51_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_52_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_53_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_54_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_55_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_56_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_57_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_58_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_59_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_60_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_61_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_62_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_63_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_64_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_65_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_66_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_67_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_68_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_69_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_70_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_71_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_72_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_73_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_74_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_75_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_76_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_77_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_78_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_79_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_80_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_81_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_82_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_83_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_84_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_85_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_86_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_87_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_88_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_89_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_90_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_91_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_92_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_93_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_94_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_95_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_96_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_97_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_98_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_99_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_100_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_101_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_102_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_103_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_104_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_105_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_106_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_107_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_108_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_109_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_110_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_111_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_112_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_113_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_114_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_115_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_116_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_117_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_118_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_119_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_120_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_121_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_122_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_123_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_124_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_125_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_126_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_next_index            : 10; /* [9..0] 下一个过滤器对应的index */
        unsigned int    reserved_1                 : 6; /* [15..10] 保留。 */
        unsigned int    fltn_pri                   : 9; /* [24..16] 过滤器优先级，fltn_pri数值越小优先级越高 */
        unsigned int    reserved_0                 : 7; /* [31..25] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_CHAIN_127_T;    /* 过滤器链表域配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_0_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_1_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_2_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_3_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_4_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_5_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_6_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_7_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_8_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_9_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_10_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_11_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_12_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_13_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_14_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_15_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_16_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_17_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_18_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_19_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_20_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_21_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_22_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_23_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_24_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_25_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_26_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_27_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_28_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_29_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_30_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_31_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_32_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_33_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_34_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_35_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_36_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_37_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_38_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_39_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_40_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_41_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_42_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_43_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_44_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_45_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_46_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_47_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_48_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_49_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_50_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_51_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_52_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_53_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_54_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_55_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_56_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_57_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_58_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_59_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_60_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_61_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_62_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_63_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_64_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_65_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_66_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_67_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_68_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_69_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_70_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_71_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_72_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_73_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_74_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_75_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_76_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_77_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_78_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_79_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_80_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_81_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_82_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_83_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_84_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_85_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_86_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_87_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_88_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_89_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_90_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_91_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_92_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_93_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_94_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_95_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_96_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_97_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_98_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_99_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_100_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_101_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_102_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_103_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_104_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_105_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_106_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_107_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_108_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_109_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_110_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_111_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_112_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_113_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_114_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_115_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_116_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_117_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_118_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_119_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_120_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_121_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_122_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_123_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_124_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_125_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_126_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_spi                   : 32; /* [31..0] 过滤器SPI域配置值，字节小端排列 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_SPI_127_T;    /* 过滤器SPI配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_0_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_1_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_2_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_3_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_4_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_5_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_6_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_7_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_8_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_9_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_10_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_11_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_12_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_13_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_14_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_15_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_16_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_17_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_18_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_19_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_20_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_21_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_22_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_23_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_24_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_25_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_26_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_27_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_28_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_29_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_30_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_31_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_32_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_33_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_34_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_35_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_36_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_37_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_38_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_39_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_40_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_41_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_42_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_43_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_44_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_45_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_46_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_47_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_48_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_49_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_50_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_51_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_52_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_53_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_54_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_55_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_56_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_57_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_58_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_59_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_60_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_61_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_62_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_63_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_64_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_65_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_66_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_67_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_68_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_69_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_70_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_71_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_72_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_73_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_74_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_75_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_76_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_77_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_78_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_79_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_80_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_81_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_82_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_83_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_84_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_85_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_86_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_87_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_88_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_89_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_90_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_91_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_92_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_93_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_94_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_95_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_96_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_97_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_98_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_99_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_100_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_101_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_102_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_103_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_104_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_105_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_106_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_107_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_108_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_109_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_110_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_111_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_112_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_113_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_114_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_115_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_116_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_117_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_118_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_119_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_120_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_121_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_122_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_123_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_124_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_125_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_126_T;    /* 过滤器规则控制配置寄存器 */

typedef union
{
    struct
    {
        unsigned int    fltn_en                    : 1; /* [0..0] 过滤器使能 */
        unsigned int    fltn_type                  : 1; /* [1..1] 过滤器类型0：IPV41：IPV6 */
        unsigned int    reserved_2                 : 2; /* [3..2] 保留。 */
        unsigned int    fltn_spi_en                : 1; /* [4..4] 过滤器SPI域使能 */
        unsigned int    fltn_code_en               : 1; /* [5..5] 过滤器ICMP CODE域使能 */
        unsigned int    fltn_type_en               : 1; /* [6..6] 过滤器ICMP TYPE域使能 */
        unsigned int    fltn_fl_en                 : 1; /* [7..7] 过滤器IPV6 FLOW LABLE域使能。IPV4过滤器此位保留 */
        unsigned int    fltn_nh_en                 : 1; /* [8..8] 过滤器NEXT HEADER域使能IPV4为protocol域使能IPV6为next header域使能 */
        unsigned int    fltn_tos_en                : 1; /* [9..9] 过滤器TRAFFIC CLASS域使能IPV4为type of service域使能IPV6为traffic class域使能 */
        unsigned int    fltn_rport_en              : 1; /* [10..10] 过滤器remote port域使能 */
        unsigned int    fltn_lport_en              : 1; /* [11..11] 过滤器local port域使能 */
        unsigned int    fltn_raddr_en              : 1; /* [12..12] 过滤器remote address域使能 */
        unsigned int    fltn_laddr_en              : 1; /* [13..13] 过滤器local address域使能 */
        unsigned int    reserved_1                 : 2; /* [15..14] 保留。 */
        unsigned int    fltn_bear_id               : 6; /* [21..16] 过滤器对应的承载号 */
        unsigned int    reserved_0                 : 10; /* [31..22] 保留。 */
    } bits;
    unsigned int    u32;
}HI_IPF_FLTN_RULE_CTRL_127_T;    /* 过滤器规则控制配置寄存器 */

#endif

#endif // __TD_LTE_UE_CP_IPF_H__

